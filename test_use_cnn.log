/new_nas/taka/MMVAE/NumberSenseAndMultimodalLearning/src/analyse.py:90: RuntimeWarning: invalid value encountered in true_divide
  conf_mat_nrm = conf_mat.astype('float') / conf_mat.sum(axis=1)[:, np.newaxis]
/home/taka/.pyenv/versions/3.6.9/lib/python3.6/site-packages/sklearn/metrics/_plot/confusion_matrix.py:81: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig, ax = plt.subplots()
/new_nas/taka/MMVAE/NumberSenseAndMultimodalLearning/src/analyse.py:90: RuntimeWarning: invalid value encountered in true_divide
  conf_mat_nrm = conf_mat.astype('float') / conf_mat.sum(axis=1)[:, np.newaxis]
/new_nas/taka/MMVAE/NumberSenseAndMultimodalLearning/src/analyse.py:90: RuntimeWarning: invalid value encountered in true_divide
  conf_mat_nrm = conf_mat.astype('float') / conf_mat.sum(axis=1)[:, np.newaxis]
/new_nas/taka/MMVAE/NumberSenseAndMultimodalLearning/src/analyse.py:90: RuntimeWarning: invalid value encountered in true_divide
  conf_mat_nrm = conf_mat.astype('float') / conf_mat.sum(axis=1)[:, np.newaxis]
/new_nas/taka/MMVAE/NumberSenseAndMultimodalLearning/src/analyse.py:90: RuntimeWarning: invalid value encountered in true_divide
  conf_mat_nrm = conf_mat.astype('float') / conf_mat.sum(axis=1)[:, np.newaxis]
/new_nas/taka/MMVAE/NumberSenseAndMultimodalLearning/src/analyse.py:90: RuntimeWarning: invalid value encountered in true_divide
  conf_mat_nrm = conf_mat.astype('float') / conf_mat.sum(axis=1)[:, np.newaxis]
/new_nas/taka/MMVAE/NumberSenseAndMultimodalLearning/src/analyse.py:90: RuntimeWarning: invalid value encountered in true_divide
  conf_mat_nrm = conf_mat.astype('float') / conf_mat.sum(axis=1)[:, np.newaxis]
/new_nas/taka/MMVAE/NumberSenseAndMultimodalLearning/src/analyse.py:90: RuntimeWarning: invalid value encountered in true_divide
  conf_mat_nrm = conf_mat.astype('float') / conf_mat.sum(axis=1)[:, np.newaxis]
/new_nas/taka/MMVAE/NumberSenseAndMultimodalLearning/src/analyse.py:90: RuntimeWarning: invalid value encountered in true_divide
  conf_mat_nrm = conf_mat.astype('float') / conf_mat.sum(axis=1)[:, np.newaxis]
/new_nas/taka/MMVAE/NumberSenseAndMultimodalLearning/src/analyse.py:90: RuntimeWarning: invalid value encountered in true_divide
  conf_mat_nrm = conf_mat.astype('float') / conf_mat.sum(axis=1)[:, np.newaxis]
/new_nas/taka/MMVAE/NumberSenseAndMultimodalLearning/src/analyse.py:90: RuntimeWarning: invalid value encountered in true_divide
  conf_mat_nrm = conf_mat.astype('float') / conf_mat.sum(axis=1)[:, np.newaxis]
/new_nas/taka/MMVAE/NumberSenseAndMultimodalLearning/src/analyse.py:90: RuntimeWarning: invalid value encountered in true_divide
  conf_mat_nrm = conf_mat.astype('float') / conf_mat.sum(axis=1)[:, np.newaxis]


---
check the CMNIST dataset...

shape of train images: torch.Size([120000, 3, 28, 28]) 
shape of test images: torch.Size([4000, 3, 28, 28]) 
shape of train labels: torch.Size([120000]) 
shape of test labels: torch.Size([4000]) 
train labels[0]: tensor(5) 
train labels[1]: tensor(4)
target_property is 0
train
[[    0     1     2     3]
 [30000 30000 30000 30000]]
test
[[   0    1    2    3]
 [1000 1000 1000 1000]]
target_property is 1
train
[[    1     2     3     4     5     6     7     8     9]
 [15200 13092 13588 12940 12028 13188 13780 12796 13388]]
test
[[  1   2   3   4   5   6   7   8   9]
 [556 508 460 488 388 372 420 388 420]]
target_property is 2
train
[[    1     2     3     4     5     6     7     8     9]
 [15200 13092 13588 12940 12028 13188 13780 12796 13388]]
test
[[  1   2   3   4   5   6   7   8   9]
 [556 508 460 488 388 372 420 388 420]]


---
check the OSCN dataset...

shape of train images: torch.Size([120000, 3, 32, 32]) 
shape of test images: torch.Size([4000, 3, 32, 32]) 
shape of train labels: (120000,) 
shape of test labels: (4000,) 
train labels[0]: r5j 
train labels[1]: r4j
target_property is 0
train
[[    0     1     2     3]
 [30000 30000 30000 30000]]
test
[[   0    1    2    3]
 [1000 1000 1000 1000]]
target_property is 1
train
[[    1     2     3     4     5     6     7     8     9]
 [15200 13092 13588 12940 12028 13188 13780 12796 13388]]
test
[[  1   2   3   4   5   6   7   8   9]
 [556 508 460 488 388 372 420 388 420]]
target_property is 2
train
[[    0     1     2]
 [39929 40294 39777]]
test
[[   0    1    2]
 [1337 1381 1282]]


---
check the MNIST dataset...

shape of train images: torch.Size([60000, 28, 28]) 
shape of test images: torch.Size([10000, 28, 28]) 
shape of train labels: torch.Size([60000]) 
shape of test labels: torch.Size([10000]) 
train labels[0]: tensor(5) 
train labels[1]: tensor(0)
train
[[   0    1    2    3    4    5    6    7    8    9]
 [5923 6742 5958 6131 5842 5421 5918 6265 5851 5949]]
test
[[   0    1    2    3    4    5    6    7    8    9]
 [ 980 1135 1032 1010  982  892  958 1028  974 1009]]


---
check the OSCN dataset...
test dataset done...
check `convert_label_to_int()` function ...
test label converter done....
Arguments (initial):
{'K': 20,
 'batch_size': 128,
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'pretrained_path': '',
 'print_freq': 100,
 'run_id': 'test_classifier_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Parameters were loaded for classifier
Run ID:
 test_classifier_cmnist
Run Directory:
 ./rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist',
 'run_id': 'test_classifier_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist',
 'run_id': 'test_classifier_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]         941,200
              ReLU-2                  [-1, 400]               0
            Linear-3                   [-1, 20]           8,020
            Linear-4                   [-1, 20]           8,020
            EncMLP-5       [[-1, 20], [-1, 20]]               0
            Linear-6                    [-1, 9]             189
================================================================
Total params: 957,429
Trainable params: 957,429
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.00
Params size (MB): 3.65
Estimated Total Size (MB): 3.66
----------------------------------------------------------------
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: cross 
t_objectives: cross
iteration 0000: loss:  0.017
iteration 0100: loss:  0.006
iteration 0200: loss:  0.004
iteration 0300: loss:  0.004
iteration 0400: loss:  0.003
iteration 0500: loss:  0.001
iteration 0600: loss:  0.001
iteration 0700: loss:  0.001
iteration 0800: loss:  0.001
iteration 0900: loss:  0.001
====> Epoch: 001 Train loss: 0.0024  took : 2.083723306655884
====> Test loss: -0.0013, Test accuracy: 0.9567
iteration 0000: loss:  0.000
iteration 0100: loss:  0.001
iteration 0200: loss:  0.001
iteration 0300: loss:  0.001
iteration 0400: loss:  0.001
iteration 0500: loss:  0.000
iteration 0600: loss:  0.001
iteration 0700: loss:  0.001
iteration 0800: loss:  0.001
iteration 0900: loss:  0.000
====> Epoch: 002 Train loss: 0.0008  took : 2.038174629211426
====> Test loss: -0.0009, Test accuracy: 0.9698
iteration 0000: loss:  0.001
iteration 0100: loss:  0.000
iteration 0200: loss:  0.000
iteration 0300: loss:  0.000
iteration 0400: loss:  0.001
iteration 0500: loss:  0.000
iteration 0600: loss:  0.000
iteration 0700: loss:  0.001
iteration 0800: loss:  0.000
iteration 0900: loss:  0.001
====> Epoch: 003 Train loss: 0.0004  took : 2.047191619873047
====> Test loss: -0.0008, Test accuracy: 0.9728
====> [MM-VAE] Time:   9.115s or 00:00:09
Arguments (initial):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'pretrained_path': '',
 'print_freq': 100,
 'run_id': 'test_classifier_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Parameters were loaded for classifier
Run ID:
 test_classifier_oscn
Run Directory:
 ./rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn',
 'run_id': 'test_classifier_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn',
 'run_id': 'test_classifier_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]       1,229,200
              ReLU-2                  [-1, 400]               0
            Linear-3                   [-1, 20]           8,020
            Linear-4                   [-1, 20]           8,020
            EncMLP-5       [[-1, 20], [-1, 20]]               0
            Linear-6                    [-1, 9]             189
================================================================
Total params: 1,245,429
Trainable params: 1,245,429
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.00
Params size (MB): 4.75
Estimated Total Size (MB): 4.77
----------------------------------------------------------------
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: cross 
t_objectives: cross
iteration 0000: loss:  0.017
iteration 0100: loss:  0.008
iteration 0200: loss:  0.003
iteration 0300: loss:  0.001
iteration 0400: loss:  0.001
iteration 0500: loss:  0.000
iteration 0600: loss:  0.000
iteration 0700: loss:  0.000
iteration 0800: loss:  0.000
iteration 0900: loss:  0.000
====> Epoch: 001 Train loss: 0.0024  took : 2.0087103843688965
====> Test loss: -0.0001, Test accuracy: 1.0000
iteration 0000: loss:  0.000
iteration 0100: loss:  0.000
iteration 0200: loss:  0.000
iteration 0300: loss:  0.000
iteration 0400: loss:  0.000
iteration 0500: loss:  0.000
iteration 0600: loss:  0.000
iteration 0700: loss:  0.000
iteration 0800: loss:  0.000
iteration 0900: loss:  0.000
====> Epoch: 002 Train loss: 0.0000  took : 2.0162627696990967
====> Test loss: -0.0000, Test accuracy: 1.0000
iteration 0000: loss:  0.000
iteration 0100: loss:  0.000
iteration 0200: loss:  0.000
iteration 0300: loss:  0.000
iteration 0400: loss:  0.000
iteration 0500: loss:  0.000
iteration 0600: loss:  0.000
iteration 0700: loss:  0.000
iteration 0800: loss:  0.000
iteration 0900: loss:  0.000
====> Epoch: 003 Train loss: 0.0000  took : 2.069546699523926
====> Test loss: -0.0000, Test accuracy: 1.0000
====> [MM-VAE] Time:   7.626s or 00:00:07
Arguments (initial):
{'K': 20,
 'batch_size': 128,
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'print_freq': 100,
 'run_id': 'test_vae_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Parameters were loaded for classifier
Run ID:
 test_vae_cmnist
Run Directory:
 ./rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist',
 'run_id': 'test_vae_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist',
 'run_id': 'test_vae_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]         941,200
              ReLU-2                  [-1, 400]               0
            Linear-3                  [-1, 400]         160,400
              ReLU-4                  [-1, 400]               0
            Linear-5                   [-1, 20]           8,020
            Linear-6                   [-1, 20]           8,020
            EncMLP-7       [[-1, 20], [-1, 20]]               0
            Linear-8               [-1, 2, 400]           8,400
              ReLU-9               [-1, 2, 400]               0
           Linear-10               [-1, 2, 400]         160,400
             ReLU-11               [-1, 2, 400]               0
           Linear-12              [-1, 2, 2352]         943,152
Print of model summary was skipped because can't multiply sequence by non-int of type 'list'
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: elbo 
t_objectives: iwae
iteration 0000: loss: 1988.914
iteration 0100: loss: 1578.974
iteration 0200: loss: 1559.500
iteration 0300: loss: 1553.893
iteration 0400: loss: 1562.954
iteration 0500: loss: 1554.055
iteration 0600: loss: 1553.323
iteration 0700: loss: 1550.284
iteration 0800: loss: 1547.038
iteration 0900: loss: 1542.038
====> Epoch: 001 Train loss: 1558.1929  took : 4.1889448165893555
====> Test loss: 1539.5223
iteration 0000: loss: 1539.567
iteration 0100: loss: 1539.123
iteration 0200: loss: 1535.745
iteration 0300: loss: 1535.846
iteration 0400: loss: 1537.809
iteration 0500: loss: 1532.685
iteration 0600: loss: 1537.420
iteration 0700: loss: 1533.834
iteration 0800: loss: 1536.385
iteration 0900: loss: 1533.733
====> Epoch: 002 Train loss: 1537.5548  took : 4.285752058029175
====> Test loss: 1530.9750
iteration 0000: loss: 1534.170
iteration 0100: loss: 1534.759
iteration 0200: loss: 1529.186
iteration 0300: loss: 1531.567
iteration 0400: loss: 1532.904
iteration 0500: loss: 1532.557
iteration 0600: loss: 1537.596
iteration 0700: loss: 1528.411
iteration 0800: loss: 1535.578
iteration 0900: loss: 1532.253
====> Epoch: 003 Train loss: 1532.6653  took : 4.255234479904175
====> Test loss: 1528.5628
====> [MM-VAE] Time:  22.123s or 00:00:22
Arguments (initial):
{'K': 20,
 'batch_size': 128,
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'print_freq': 100,
 'run_id': 'test_vae_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Parameters were loaded for classifier
Run ID:
 test_vae_oscn
Run Directory:
 ./rslt/test_loop_1/VAE_OSCN/test_vae_oscn
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]       1,229,200
              ReLU-2                  [-1, 400]               0
            Linear-3                  [-1, 400]         160,400
              ReLU-4                  [-1, 400]               0
            Linear-5                   [-1, 20]           8,020
            Linear-6                   [-1, 20]           8,020
            EncMLP-7       [[-1, 20], [-1, 20]]               0
            Linear-8               [-1, 2, 400]           8,400
              ReLU-9               [-1, 2, 400]               0
           Linear-10               [-1, 2, 400]         160,400
             ReLU-11               [-1, 2, 400]               0
           Linear-12              [-1, 2, 3072]       1,231,872
Print of model summary was skipped because can't multiply sequence by non-int of type 'list'
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: elbo 
t_objectives: iwae
iteration 0000: loss: 2623.431
iteration 0100: loss: 2059.112
iteration 0200: loss: 2047.400
iteration 0300: loss: 2015.349
iteration 0400: loss: 2004.040
iteration 0500: loss: 1993.961
iteration 0600: loss: 1999.939
iteration 0700: loss: 2003.457
iteration 0800: loss: 2001.210
iteration 0900: loss: 1985.305
====> Epoch: 001 Train loss: 2021.2928  took : 4.271281719207764
====> Test loss: 1982.7863
iteration 0000: loss: 1986.973
iteration 0100: loss: 1976.044
iteration 0200: loss: 1972.700
iteration 0300: loss: 1972.387
iteration 0400: loss: 1967.269
iteration 0500: loss: 1969.025
iteration 0600: loss: 1970.425
iteration 0700: loss: 1970.162
iteration 0800: loss: 1965.693
iteration 0900: loss: 1964.280
====> Epoch: 002 Train loss: 1971.2538  took : 4.215637922286987
====> Test loss: 1958.9120
iteration 0000: loss: 1964.889
iteration 0100: loss: 1963.298
iteration 0200: loss: 1962.056
iteration 0300: loss: 1961.672
iteration 0400: loss: 1964.242
iteration 0500: loss: 1959.736
iteration 0600: loss: 1960.828
iteration 0700: loss: 1960.373
iteration 0800: loss: 1961.012
iteration 0900: loss: 1960.984
====> Epoch: 003 Train loss: 1962.1836  took : 4.235441207885742
====> Test loss: 1955.4885
====> [MM-VAE] Time:  22.067s or 00:00:22
Arguments (initial):
{'K': 20,
 'batch_size': 128,
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'MMVAE_CMNIST_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'dreg',
 'print_freq': 100,
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Parameters were loaded for classifier
Run ID:
 test_mmvae_cmnist_oscn
Run Directory:
 ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'MMVAE_CMNIST_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'dreg',
 'output_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn',
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'MMVAE_CMNIST_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'dreg',
 'output_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn',
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
Print of model summary was skipped because 'MMVAE_CMNIST_OSCN' object has no attribute 'data_size'
Model is initialized without loading.

length of cmnist and oscn dataset (train): 240000 
length of cmnist and oscn dataset (test): 8000

length of dataset (train): 240000 
length of dataset (test): 8000
objectives: m_dreg 
t_objectives: m_iwae
iteration 0000: loss: 5220.303
iteration 0100: loss: 4085.569
iteration 0200: loss: 4022.843
iteration 0300: loss: 4016.805
iteration 0400: loss: 4006.044
iteration 0500: loss: 3996.404
iteration 0600: loss: 4008.400
iteration 0700: loss: 4006.768
iteration 0800: loss: 3989.343
iteration 0900: loss: 3985.730
iteration 1000: loss: 3984.987
iteration 1100: loss: 3990.149
iteration 1200: loss: 3972.079
iteration 1300: loss: 3973.423
iteration 1400: loss: 3976.450
iteration 1500: loss: 3970.845
iteration 1600: loss: 3957.879
iteration 1700: loss: 3957.302
iteration 1800: loss: 3956.553
====> Epoch: 001 Train loss: 3998.1360  took : 72.62450170516968
====> Test loss: 3961.6309
iteration 0000: loss: 3958.169
iteration 0100: loss: 3954.396
iteration 0200: loss: 3950.640
iteration 0300: loss: 3961.999
iteration 0400: loss: 3955.456
iteration 0500: loss: 3956.045
iteration 0600: loss: 3956.968
iteration 0700: loss: 3953.495
iteration 0800: loss: 3948.280
iteration 0900: loss: 3955.931
iteration 1000: loss: 3950.078
iteration 1100: loss: 3952.650
iteration 1200: loss: 3955.724
iteration 1300: loss: 3948.317
iteration 1400: loss: 3951.948
iteration 1500: loss: 3947.037
iteration 1600: loss: 3951.003
iteration 1700: loss: 3950.405
iteration 1800: loss: 3952.407
====> Epoch: 002 Train loss: 3952.8451  took : 72.61351037025452
====> Test loss: 3952.2179
iteration 0000: loss: 3951.839
iteration 0100: loss: 3953.129
iteration 0200: loss: 3949.148
iteration 0300: loss: 3946.405
iteration 0400: loss: 3947.302
iteration 0500: loss: 3949.239
iteration 0600: loss: 3948.035
iteration 0700: loss: 3949.104
iteration 0800: loss: 3946.552
iteration 0900: loss: 3942.814
iteration 1000: loss: 3945.355
iteration 1100: loss: 3949.566
iteration 1200: loss: 3945.712
iteration 1300: loss: 3949.938
iteration 1400: loss: 3950.350
iteration 1500: loss: 3951.622
iteration 1600: loss: 3942.989
iteration 1700: loss: 3947.589
iteration 1800: loss: 3948.556
====> Epoch: 003 Train loss: 3948.5297  took : 72.60970211029053
====> Test loss: 3950.5496
====> [MM-VAE] Time: 271.251s or 00:04:31
Arguments (initial):
{'pretrained_path': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist',
 'run_id': 'test_vae_cmnist',
 'run_type': 'analyse'}
args are updated using pretrained_path:
 {'experiment': 'test_loop_1', 'model': 'VAE_CMNIST', 'run_type': 'train', 'seed': 4, 'num_hidden_layers': 2, 'use_conditional': False, 'use_cnn': False, 'latent_dim': 20, 'obj': 'elbo', 'batch_size': 128, 'epochs': 3, 'K': 20, 'learn_prior': False, 'llik_scaling': 0.0, 'logp': False, 'looser': False, 'print_freq': 100, 'no_analytics': False, 'no_cuda': False, 'run_id': 'test_vae_cmnist', 'pretrained_path': '', 'run_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist', 'output_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/train'}
Parameters were loaded for classifier
Run ID:
 test_vae_cmnist
Run Directory:
 ./rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist',
 'run_id': 'test_vae_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist',
 'run_id': 'test_vae_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]         941,200
              ReLU-2                  [-1, 400]               0
            Linear-3                  [-1, 400]         160,400
              ReLU-4                  [-1, 400]               0
            Linear-5                   [-1, 20]           8,020
            Linear-6                   [-1, 20]           8,020
            EncMLP-7       [[-1, 20], [-1, 20]]               0
            Linear-8               [-1, 2, 400]           8,400
              ReLU-9               [-1, 2, 400]               0
           Linear-10               [-1, 2, 400]         160,400
             ReLU-11               [-1, 2, 400]               0
           Linear-12              [-1, 2, 2352]         943,152
Print of model summary was skipped because can't multiply sequence by non-int of type 'list'
Loading model VAE_CMNIST from ./rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: elbo 
t_objectives: iwae


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist',
 'run_id': 'test_classifier_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]         941,200
              ReLU-2                  [-1, 400]               0
            Linear-3                   [-1, 20]           8,020
            Linear-4                   [-1, 20]           8,020
            EncMLP-5       [[-1, 20], [-1, 20]]               0
            Linear-6                    [-1, 9]             189
================================================================
Total params: 957,429
Trainable params: 957,429
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.00
Params size (MB): 3.65
Estimated Total Size (MB): 3.66
----------------------------------------------------------------
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: cross 
t_objectives: cross


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'torch.Tensor'> 
label: tensor([4, 3, 6, 9, 5, 4, 6, 3, 3, 3, 1, 6, 5, 2, 6, 4, 1, 5, 3, 9, 5, 9, 1, 6,
        8, 5, 9, 7, 2, 4, 8, 8, 5, 6, 7, 5, 9, 9, 8, 7, 1, 3, 5, 1, 9, 9, 5, 7,
        8, 2, 6, 5, 1, 6, 8, 5, 2, 9, 5, 9, 6, 8, 2, 7, 6, 4, 9, 4, 9, 2, 8, 7,
        7, 1, 2, 8, 5, 8, 9, 9, 3, 7, 4, 7, 5, 1, 2, 3, 9, 9, 4, 6, 8, 2, 2, 1,
        7, 8, 7, 3, 4, 9, 8, 6, 9, 3, 8, 4, 6, 2, 5, 2, 1, 9, 2, 3, 8, 3, 5, 9,
        4, 2, 4, 6, 8, 9, 1, 1], device='cuda:0') 
type(data): <class 'torch.Tensor'> 
data[0].shape: torch.Size([3, 28, 28])

===
Setting info... 
Target modality: 0 
Target property: 0 
Output directory: ./rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/analyse/0_0 
Number of category 4 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2, 3} 
Start index: 0 
End index: 4 
withzero: False
---
Silhouette values: [0.09365073 0.3459201  0.30094126 ... 0.18580513 0.21285419 0.16960298]
Average of silhouette coef: 0.17550366
---

Distance matrix between labels.
  0   1   2   3
0 0.0 2.7 2.6 2.2 
1 2.7 0.0 2.9 1.8 
2 2.6 2.9 0.0 1.6 
3 2.2 1.8 1.6 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 1, 2, 1] 
Latent embbeding: [2.6812468, 2.5718212, 2.193357, 2.9436407, 1.819581, 1.6013081] 
Flatten array: [[0.         0.        ]
 [1.         2.68124676]
 [2.         2.57182121]
 [3.         2.19335699]
 [0.         0.        ]
 [1.         2.94364071]
 [2.         1.81958103]
 [0.         0.        ]
 [1.         1.60130811]
 [0.         0.        ]]
Correlation: [[ 1.        -0.2012919]
 [-0.2012919  1.       ]]
---
[[], [], [], []] [3 1 2 ... 0 1 1] [[  7.141523   16.180529 ]
 [  7.9075446  36.240875 ]
 [-57.605904   -3.0334709]
 ...
 [ -2.2307389 -42.213684 ]
 [ 40.137226   27.694565 ]
 [-13.849356   54.037487 ]]
saved ./rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/analyse/0_0/latent__0_0.svg
results (all): {'cluster_avg': 0.17550366, 'cluster_all': array([0.09365073, 0.3459201 , 0.30094126, ..., 0.18580513, 0.21285419,
       0.16960298], dtype=float32), 'magnitude_avg': 0.20129189937677575, 'magnitude_all': -0.20129189937677575, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'test_vae_cmnist', 'model_name': 'VAE_CMNIST', 'target_modality': 0, 'target_property': 0, 'cluster_avg': 0.17550366, 'magnitude_avg': 0.20129189937677575, 'tsne-2d_avg': nan}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'torch.Tensor'> 
label: tensor([5, 7, 6, 6, 6, 1, 5, 9, 3, 6, 8, 6, 6, 2, 8, 3, 3, 9, 5, 1, 5, 5, 7, 8,
        4, 5, 9, 3, 8, 3, 2, 1, 1, 9, 3, 1, 6, 3, 5, 3, 6, 9, 9, 5, 2, 6, 4, 8,
        4, 8, 7, 3, 8, 5, 1, 3, 8, 9, 4, 7, 9, 3, 7, 2, 8, 6, 2, 7, 9, 5, 5, 1,
        7, 5, 5, 8, 7, 6, 1, 3, 1, 7, 7, 6, 3, 2, 9, 6, 6, 1, 6, 1, 7, 1, 5, 3,
        8, 9, 2, 7, 4, 6, 6, 3, 4, 5, 7, 7, 3, 4, 2, 3, 4, 7, 4, 1, 5, 7, 9, 9,
        5, 7, 3, 7, 9, 3, 7, 9], device='cuda:0') 
type(data): <class 'torch.Tensor'> 
data[0].shape: torch.Size([3, 28, 28])

===
Setting info... 
Target modality: 0 
Target property: 1 
Output directory: ./rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/analyse/0_1 
Number of category 10 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {1, 2, 3, 4, 5, 6, 7, 8, 9} 
Start index: 1 
End index: 10 
withzero: False
---
pred: tensor([7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 1, 7, 1,
        7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7,
        7, 1, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7,
        3, 1, 7, 7, 1, 7, 7, 7, 1, 7, 1, 1, 1, 7, 7, 1, 7, 7, 7, 7, 1, 7, 7, 7,
        7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 1, 7, 1, 7, 7, 1, 7, 1, 7, 7, 7, 7, 7,
        7, 1, 7, 1, 7, 7, 1, 7]) 
tar: tensor([6, 1, 2, 1, 8, 3, 7, 9, 8, 3, 7, 7, 3, 7, 2, 3, 3, 6, 1, 2, 9, 7, 7, 2,
        2, 1, 3, 4, 3, 2, 4, 8, 5, 4, 7, 4, 2, 1, 4, 1, 3, 9, 8, 3, 8, 8, 8, 1,
        8, 4, 3, 4, 1, 7, 4, 8, 6, 5, 1, 1, 4, 1, 9, 8, 5, 4, 6, 2, 8, 5, 2, 4,
        8, 7, 2, 8, 2, 5, 1, 6, 8, 4, 8, 9, 6, 4, 4, 2, 8, 3, 5, 7, 6, 8, 6, 8,
        6, 6, 2, 2, 7, 7, 4, 3, 2, 5, 7, 2, 4, 2, 7, 1, 7, 2, 8, 4, 8, 7, 2, 5,
        9, 7, 6, 9, 3, 2, 9, 3])
Accuracy (count): tensor(12) 
Accuracy (ratio) tensor(0.0938)
Accuracy:
 [[ 0  0  0  0  0  0 13  0  0]
 [ 8  0  0  0  0  0 12  0  0]
 [ 1  0  0  0  0  0 13  0  0]
 [ 1  0  0  0  0  0 16  0  0]
 [ 0  0  0  0  0  0  8  0  0]
 [ 2  0  0  0  0  0  9  0  0]
 [ 5  0  0  0  0  0 12  0  0]
 [ 5  0  1  0  0  0 14  0  0]
 [ 4  0  0  0  0  0  4  0  0]]
Accuracy:
 [[0.    0.    0.    0.    0.    0.    1.    0.    0.   ]
 [0.4   0.    0.    0.    0.    0.    0.6   0.    0.   ]
 [0.071 0.    0.    0.    0.    0.    0.929 0.    0.   ]
 [0.059 0.    0.    0.    0.    0.    0.941 0.    0.   ]
 [0.    0.    0.    0.    0.    0.    1.    0.    0.   ]
 [0.182 0.    0.    0.    0.    0.    0.818 0.    0.   ]
 [0.294 0.    0.    0.    0.    0.    0.706 0.    0.   ]
 [0.25  0.    0.05  0.    0.    0.    0.7   0.    0.   ]
 [0.5   0.    0.    0.    0.    0.    0.5   0.    0.   ]]
---
Silhouette values: [ 0.0133049   0.05111977  0.00467556 ... -0.15848957 -0.10609654
 -0.01001038]
Average of silhouette coef: 0.038583063
---

Distance matrix between labels.
  1   2   3   4   5   6   7   8   9
1 0.0 2.0 2.2 2.7 2.2 2.4 2.3 2.3 2.5 
2 2.0 0.0 1.0 2.3 1.5 1.3 3.0 1.8 2.5 
3 2.2 1.0 0.0 2.2 1.0 1.2 3.0 1.3 2.2 
4 2.7 2.3 2.2 0.0 1.4 1.3 1.5 1.8 0.7 
5 2.2 1.5 1.0 1.4 0.0 0.9 2.2 0.7 1.3 
6 2.4 1.3 1.2 1.3 0.9 0.0 2.3 1.5 1.5 
7 2.3 3.0 3.0 1.5 2.2 2.3 0.0 2.3 1.2 
8 2.3 1.8 1.3 1.8 0.7 1.5 2.3 0.0 1.6 
9 2.5 2.5 2.2 0.7 1.3 1.5 1.2 1.6 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
Latent embbeding: [2.0200832, 2.2377946, 2.7110338, 2.2381442, 2.4322155, 2.2525806, 2.349726, 2.5361536, 1.0112915, 2.3435218, 1.5255057, 1.2746489, 2.9653535, 1.8195806, 2.503996, 2.2201674, 0.9680881, 1.2255379, 2.9583974, 1.269997, 2.2086775, 1.4053684, 1.2721702, 1.4873362, 1.8363441, 0.6592769, 0.9149096, 2.1821334, 0.71918684, 1.2946726, 2.307736, 1.5194476, 1.5272924, 2.3447573, 1.216662, 1.5975198] 
Flatten array: [[0.         0.        ]
 [1.         2.02008319]
 [2.         2.23779464]
 [3.         2.71103382]
 [4.         2.23814416]
 [5.         2.43221545]
 [6.         2.25258064]
 [7.         2.34972596]
 [8.         2.53615355]
 [0.         0.        ]
 [1.         1.0112915 ]
 [2.         2.34352183]
 [3.         1.52550566]
 [4.         1.2746489 ]
 [5.         2.96535349]
 [6.         1.81958055]
 [7.         2.5039959 ]
 [0.         0.        ]
 [1.         2.2201674 ]
 [2.         0.96808809]
 [3.         1.2255379 ]
 [4.         2.95839739]
 [5.         1.269997  ]
 [6.         2.20867753]
 [0.         0.        ]
 [1.         1.40536845]
 [2.         1.27217019]
 [3.         1.48733616]
 [4.         1.83634412]
 [5.         0.6592769 ]
 [0.         0.        ]
 [1.         0.9149096 ]
 [2.         2.18213344]
 [3.         0.71918684]
 [4.         1.29467261]
 [0.         0.        ]
 [1.         2.30773592]
 [2.         1.51944757]
 [3.         1.52729237]
 [0.         0.        ]
 [1.         2.34475732]
 [2.         1.21666205]
 [0.         0.        ]
 [1.         1.59751976]
 [0.         0.        ]]
Correlation: [[1.         0.31577628]
 [0.31577628 1.        ]]
---
[[], [], [], [], [], [], [], [], [], []] [5 7 6 ... 8 9 4] [[ -6.114848  47.765484]
 [ -8.559057  19.09335 ]
 [ 44.782795  17.144623]
 ...
 [-17.816347 -37.161175]
 [ 42.405922   7.779478]
 [ 10.002394  21.081661]]
saved ./rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/analyse/0_1/latent__0_1.svg
---
length of elements: 408 408
length of 1: 36
length of 2: 43
length of 3: 48
length of 4: 51
length of 5: 52
length of 6: 51
length of 7: 48
length of 8: 43
length of 9: 36
all elements:

[(1, (1, 2, 2)),
 (2, (1, 3, 2)),
 (1, (1, 3, 3)),
 (3, (1, 4, 2)),
 (2, (1, 4, 3)),
 (1, (1, 4, 4)),
 (4, (1, 5, 2)),
 (3, (1, 5, 3)),
 (2, (1, 5, 4)),
 (1, (1, 5, 5)),
 (5, (1, 6, 2)),
 (4, (1, 6, 3)),
 (3, (1, 6, 4)),
 (2, (1, 6, 5)),
 (1, (1, 6, 6)),
 (6, (1, 7, 2)),
 (5, (1, 7, 3)),
 (4, (1, 7, 4)),
 (3, (1, 7, 5)),
 (2, (1, 7, 6)),
 (1, (1, 7, 7)),
 (7, (1, 8, 2)),
 (6, (1, 8, 3)),
 (5, (1, 8, 4)),
 (4, (1, 8, 5)),
 (3, (1, 8, 6)),
 (2, (1, 8, 7)),
 (1, (1, 8, 8)),
 (8, (1, 9, 2)),
 (7, (1, 9, 3)),
 (6, (1, 9, 4)),
 (5, (1, 9, 5)),
 (4, (1, 9, 6)),
 (3, (1, 9, 7)),
 (2, (1, 9, 8)),
 (1, (1, 9, 9)),
 (2, (2, 1, 1)),
 (3, (2, 2, 1)),
 (1, (2, 2, 3)),
 (4, (2, 3, 1)),
 (2, (2, 3, 3)),
 (1, (2, 3, 4)),
 (5, (2, 4, 1)),
 (3, (2, 4, 3)),
 (2, (2, 4, 4)),
 (1, (2, 4, 5)),
 (6, (2, 5, 1)),
 (4, (2, 5, 3)),
 (3, (2, 5, 4)),
 (2, (2, 5, 5)),
 (1, (2, 5, 6)),
 (7, (2, 6, 1)),
 (5, (2, 6, 3)),
 (4, (2, 6, 4)),
 (3, (2, 6, 5)),
 (2, (2, 6, 6)),
 (1, (2, 6, 7)),
 (8, (2, 7, 1)),
 (6, (2, 7, 3)),
 (5, (2, 7, 4)),
 (4, (2, 7, 5)),
 (3, (2, 7, 6)),
 (2, (2, 7, 7)),
 (1, (2, 7, 8)),
 (9, (2, 8, 1)),
 (7, (2, 8, 3)),
 (6, (2, 8, 4)),
 (5, (2, 8, 5)),
 (4, (2, 8, 6)),
 (3, (2, 8, 7)),
 (2, (2, 8, 8)),
 (1, (2, 8, 9)),
 (8, (2, 9, 3)),
 (7, (2, 9, 4)),
 (6, (2, 9, 5)),
 (5, (2, 9, 6)),
 (4, (2, 9, 7)),
 (3, (2, 9, 8)),
 (2, (2, 9, 9)),
 (3, (3, 1, 1)),
 (2, (3, 1, 2)),
 (4, (3, 2, 1)),
 (3, (3, 2, 2)),
 (1, (3, 2, 4)),
 (5, (3, 3, 1)),
 (4, (3, 3, 2)),
 (2, (3, 3, 4)),
 (1, (3, 3, 5)),
 (6, (3, 4, 1)),
 (5, (3, 4, 2)),
 (3, (3, 4, 4)),
 (2, (3, 4, 5)),
 (1, (3, 4, 6)),
 (7, (3, 5, 1)),
 (6, (3, 5, 2)),
 (4, (3, 5, 4)),
 (3, (3, 5, 5)),
 (2, (3, 5, 6)),
 (1, (3, 5, 7)),
 (8, (3, 6, 1)),
 (7, (3, 6, 2)),
 (5, (3, 6, 4)),
 (4, (3, 6, 5)),
 (3, (3, 6, 6)),
 (2, (3, 6, 7)),
 (1, (3, 6, 8)),
 (9, (3, 7, 1)),
 (8, (3, 7, 2)),
 (6, (3, 7, 4)),
 (5, (3, 7, 5)),
 (4, (3, 7, 6)),
 (3, (3, 7, 7)),
 (2, (3, 7, 8)),
 (1, (3, 7, 9)),
 (9, (3, 8, 2)),
 (7, (3, 8, 4)),
 (6, (3, 8, 5)),
 (5, (3, 8, 6)),
 (4, (3, 8, 7)),
 (3, (3, 8, 8)),
 (2, (3, 8, 9)),
 (8, (3, 9, 4)),
 (7, (3, 9, 5)),
 (6, (3, 9, 6)),
 (5, (3, 9, 7)),
 (4, (3, 9, 8)),
 (3, (3, 9, 9)),
 (4, (4, 1, 1)),
 (3, (4, 1, 2)),
 (2, (4, 1, 3)),
 (5, (4, 2, 1)),
 (4, (4, 2, 2)),
 (3, (4, 2, 3)),
 (1, (4, 2, 5)),
 (6, (4, 3, 1)),
 (5, (4, 3, 2)),
 (4, (4, 3, 3)),
 (2, (4, 3, 5)),
 (1, (4, 3, 6)),
 (7, (4, 4, 1)),
 (6, (4, 4, 2)),
 (5, (4, 4, 3)),
 (3, (4, 4, 5)),
 (2, (4, 4, 6)),
 (1, (4, 4, 7)),
 (8, (4, 5, 1)),
 (7, (4, 5, 2)),
 (6, (4, 5, 3)),
 (4, (4, 5, 5)),
 (3, (4, 5, 6)),
 (2, (4, 5, 7)),
 (1, (4, 5, 8)),
 (9, (4, 6, 1)),
 (8, (4, 6, 2)),
 (7, (4, 6, 3)),
 (5, (4, 6, 5)),
 (4, (4, 6, 6)),
 (3, (4, 6, 7)),
 (2, (4, 6, 8)),
 (1, (4, 6, 9)),
 (9, (4, 7, 2)),
 (8, (4, 7, 3)),
 (6, (4, 7, 5)),
 (5, (4, 7, 6)),
 (4, (4, 7, 7)),
 (3, (4, 7, 8)),
 (2, (4, 7, 9)),
 (9, (4, 8, 3)),
 (7, (4, 8, 5)),
 (6, (4, 8, 6)),
 (5, (4, 8, 7)),
 (4, (4, 8, 8)),
 (3, (4, 8, 9)),
 (8, (4, 9, 5)),
 (7, (4, 9, 6)),
 (6, (4, 9, 7)),
 (5, (4, 9, 8)),
 (4, (4, 9, 9)),
 (5, (5, 1, 1)),
 (4, (5, 1, 2)),
 (3, (5, 1, 3)),
 (2, (5, 1, 4)),
 (6, (5, 2, 1)),
 (5, (5, 2, 2)),
 (4, (5, 2, 3)),
 (3, (5, 2, 4)),
 (1, (5, 2, 6)),
 (7, (5, 3, 1)),
 (6, (5, 3, 2)),
 (5, (5, 3, 3)),
 (4, (5, 3, 4)),
 (2, (5, 3, 6)),
 (1, (5, 3, 7)),
 (8, (5, 4, 1)),
 (7, (5, 4, 2)),
 (6, (5, 4, 3)),
 (5, (5, 4, 4)),
 (3, (5, 4, 6)),
 (2, (5, 4, 7)),
 (1, (5, 4, 8)),
 (9, (5, 5, 1)),
 (8, (5, 5, 2)),
 (7, (5, 5, 3)),
 (6, (5, 5, 4)),
 (4, (5, 5, 6)),
 (3, (5, 5, 7)),
 (2, (5, 5, 8)),
 (1, (5, 5, 9)),
 (9, (5, 6, 2)),
 (8, (5, 6, 3)),
 (7, (5, 6, 4)),
 (5, (5, 6, 6)),
 (4, (5, 6, 7)),
 (3, (5, 6, 8)),
 (2, (5, 6, 9)),
 (9, (5, 7, 3)),
 (8, (5, 7, 4)),
 (6, (5, 7, 6)),
 (5, (5, 7, 7)),
 (4, (5, 7, 8)),
 (3, (5, 7, 9)),
 (9, (5, 8, 4)),
 (7, (5, 8, 6)),
 (6, (5, 8, 7)),
 (5, (5, 8, 8)),
 (4, (5, 8, 9)),
 (8, (5, 9, 6)),
 (7, (5, 9, 7)),
 (6, (5, 9, 8)),
 (5, (5, 9, 9)),
 (6, (6, 1, 1)),
 (5, (6, 1, 2)),
 (4, (6, 1, 3)),
 (3, (6, 1, 4)),
 (2, (6, 1, 5)),
 (7, (6, 2, 1)),
 (6, (6, 2, 2)),
 (5, (6, 2, 3)),
 (4, (6, 2, 4)),
 (3, (6, 2, 5)),
 (1, (6, 2, 7)),
 (8, (6, 3, 1)),
 (7, (6, 3, 2)),
 (6, (6, 3, 3)),
 (5, (6, 3, 4)),
 (4, (6, 3, 5)),
 (2, (6, 3, 7)),
 (1, (6, 3, 8)),
 (9, (6, 4, 1)),
 (8, (6, 4, 2)),
 (7, (6, 4, 3)),
 (6, (6, 4, 4)),
 (5, (6, 4, 5)),
 (3, (6, 4, 7)),
 (2, (6, 4, 8)),
 (1, (6, 4, 9)),
 (9, (6, 5, 2)),
 (8, (6, 5, 3)),
 (7, (6, 5, 4)),
 (6, (6, 5, 5)),
 (4, (6, 5, 7)),
 (3, (6, 5, 8)),
 (2, (6, 5, 9)),
 (9, (6, 6, 3)),
 (8, (6, 6, 4)),
 (7, (6, 6, 5)),
 (5, (6, 6, 7)),
 (4, (6, 6, 8)),
 (3, (6, 6, 9)),
 (9, (6, 7, 4)),
 (8, (6, 7, 5)),
 (6, (6, 7, 7)),
 (5, (6, 7, 8)),
 (4, (6, 7, 9)),
 (9, (6, 8, 5)),
 (7, (6, 8, 7)),
 (6, (6, 8, 8)),
 (5, (6, 8, 9)),
 (8, (6, 9, 7)),
 (7, (6, 9, 8)),
 (6, (6, 9, 9)),
 (7, (7, 1, 1)),
 (6, (7, 1, 2)),
 (5, (7, 1, 3)),
 (4, (7, 1, 4)),
 (3, (7, 1, 5)),
 (2, (7, 1, 6)),
 (8, (7, 2, 1)),
 (7, (7, 2, 2)),
 (6, (7, 2, 3)),
 (5, (7, 2, 4)),
 (4, (7, 2, 5)),
 (3, (7, 2, 6)),
 (1, (7, 2, 8)),
 (9, (7, 3, 1)),
 (8, (7, 3, 2)),
 (7, (7, 3, 3)),
 (6, (7, 3, 4)),
 (5, (7, 3, 5)),
 (4, (7, 3, 6)),
 (2, (7, 3, 8)),
 (1, (7, 3, 9)),
 (9, (7, 4, 2)),
 (8, (7, 4, 3)),
 (7, (7, 4, 4)),
 (6, (7, 4, 5)),
 (5, (7, 4, 6)),
 (3, (7, 4, 8)),
 (2, (7, 4, 9)),
 (9, (7, 5, 3)),
 (8, (7, 5, 4)),
 (7, (7, 5, 5)),
 (6, (7, 5, 6)),
 (4, (7, 5, 8)),
 (3, (7, 5, 9)),
 (9, (7, 6, 4)),
 (8, (7, 6, 5)),
 (7, (7, 6, 6)),
 (5, (7, 6, 8)),
 (4, (7, 6, 9)),
 (9, (7, 7, 5)),
 (8, (7, 7, 6)),
 (6, (7, 7, 8)),
 (5, (7, 7, 9)),
 (9, (7, 8, 6)),
 (7, (7, 8, 8)),
 (6, (7, 8, 9)),
 (8, (7, 9, 8)),
 (7, (7, 9, 9)),
 (8, (8, 1, 1)),
 (7, (8, 1, 2)),
 (6, (8, 1, 3)),
 (5, (8, 1, 4)),
 (4, (8, 1, 5)),
 (3, (8, 1, 6)),
 (2, (8, 1, 7)),
 (9, (8, 2, 1)),
 (8, (8, 2, 2)),
 (7, (8, 2, 3)),
 (6, (8, 2, 4)),
 (5, (8, 2, 5)),
 (4, (8, 2, 6)),
 (3, (8, 2, 7)),
 (1, (8, 2, 9)),
 (9, (8, 3, 2)),
 (8, (8, 3, 3)),
 (7, (8, 3, 4)),
 (6, (8, 3, 5)),
 (5, (8, 3, 6)),
 (4, (8, 3, 7)),
 (2, (8, 3, 9)),
 (9, (8, 4, 3)),
 (8, (8, 4, 4)),
 (7, (8, 4, 5)),
 (6, (8, 4, 6)),
 (5, (8, 4, 7)),
 (3, (8, 4, 9)),
 (9, (8, 5, 4)),
 (8, (8, 5, 5)),
 (7, (8, 5, 6)),
 (6, (8, 5, 7)),
 (4, (8, 5, 9)),
 (9, (8, 6, 5)),
 (8, (8, 6, 6)),
 (7, (8, 6, 7)),
 (5, (8, 6, 9)),
 (9, (8, 7, 6)),
 (8, (8, 7, 7)),
 (6, (8, 7, 9)),
 (9, (8, 8, 7)),
 (7, (8, 8, 9)),
 (8, (8, 9, 9)),
 (9, (9, 1, 1)),
 (8, (9, 1, 2)),
 (7, (9, 1, 3)),
 (6, (9, 1, 4)),
 (5, (9, 1, 5)),
 (4, (9, 1, 6)),
 (3, (9, 1, 7)),
 (2, (9, 1, 8)),
 (9, (9, 2, 2)),
 (8, (9, 2, 3)),
 (7, (9, 2, 4)),
 (6, (9, 2, 5)),
 (5, (9, 2, 6)),
 (4, (9, 2, 7)),
 (3, (9, 2, 8)),
 (9, (9, 3, 3)),
 (8, (9, 3, 4)),
 (7, (9, 3, 5)),
 (6, (9, 3, 6)),
 (5, (9, 3, 7)),
 (4, (9, 3, 8)),
 (9, (9, 4, 4)),
 (8, (9, 4, 5)),
 (7, (9, 4, 6)),
 (6, (9, 4, 7)),
 (5, (9, 4, 8)),
 (9, (9, 5, 5)),
 (8, (9, 5, 6)),
 (7, (9, 5, 7)),
 (6, (9, 5, 8)),
 (9, (9, 6, 6)),
 (8, (9, 6, 7)),
 (7, (9, 6, 8)),
 (9, (9, 7, 7)),
 (8, (9, 7, 8)),
 (9, (9, 8, 8))]
i: 1
shape (20,)
i: 2
shape (20,)
i: 3
shape (20,)
i: 4
shape (20,)
i: 5
shape (20,)
i: 6
shape (20,)
i: 7
shape (20,)
i: 8
shape (20,)
i: 9
shape (20,)
mean_all: [None, array([ 1.05316019e+00,  1.47932786e-02, -1.83512550e-02,  1.09840855e-02,
        5.90636348e-03, -6.65878993e-04,  1.39712036e+00,  5.05367061e-03,
       -7.38245575e-03,  2.68180110e-03, -4.68538702e-01, -2.09280159e-02,
       -1.97708327e-02,  6.56090071e-03,  2.14082710e-02,  6.23567170e-03,
       -1.81630552e-02,  2.74924492e-03,  3.04059088e-01, -1.91758633e-01],
      dtype=float32), array([ 6.7562985e-01,  3.8210761e-02, -1.1952903e-02,  2.5256403e-02,
        2.7871164e-02, -2.1486428e-02, -3.3964905e-01, -1.9570887e-02,
       -7.8473089e-04,  7.9957694e-03, -2.8981972e-02, -3.1203378e-02,
       -4.2443369e-02,  8.2540503e-03,  2.2797808e-02, -2.1249440e-02,
       -4.0876936e-02, -2.4073988e-03,  8.5230964e-01, -8.4271187e-01],
      dtype=float32), array([ 0.6463387 ,  0.01434165, -0.00082659,  0.04208949,  0.00288297,
       -0.0084392 , -0.7999728 ,  0.03333718,  0.02510419,  0.01134139,
       -0.4881362 , -0.0113153 , -0.04287819,  0.02308876,  0.01179251,
        0.01472571,  0.00238592,  0.01396443,  0.3972496 , -0.22414157],
      dtype=float32), array([-1.0506862 ,  0.03299961, -0.01827715,  0.03642503,  0.00590676,
       -0.02666733,  0.06743529,  0.02534419, -0.0044835 ,  0.02440542,
        0.41013613,  0.00618491, -0.03105905, -0.01078771,  0.01446819,
        0.00122803,  0.00813677,  0.01654418, -0.04251159,  0.31679356],
      dtype=float32), array([ 0.06063958,  0.01569874, -0.00825022,  0.0454234 , -0.0216036 ,
        0.02376465, -0.50941944,  0.0386317 ,  0.02472097,  0.00542532,
       -0.16740315, -0.00417442, -0.04942184,  0.02994129,  0.02105122,
        0.03345609,  0.01481939, -0.01857609, -0.15472324,  0.08990846],
      dtype=float32), array([-0.42745999,  0.00661716, -0.00582435,  0.05810254,  0.01195387,
       -0.01469289, -0.46640316,  0.02391434,  0.01957731,  0.03326734,
       -0.04103144, -0.00807928, -0.02404899,  0.01574501,  0.00313431,
        0.003369  ,  0.03253394,  0.01052317,  0.41373587, -0.41082367],
      dtype=float32), array([-0.7662301 ,  0.01123037, -0.02899135,  0.02356934, -0.01348008,
       -0.01274529,  1.3760698 ,  0.00430877, -0.01284939,  0.02372785,
        0.2720937 , -0.02009964, -0.0127352 ,  0.00455014,  0.02431189,
        0.01129701, -0.01132092,  0.01518067, -0.67178935,  0.3192304 ],
      dtype=float32), array([ 0.48613936,  0.03951183, -0.02185279,  0.01158916,  0.00828089,
       -0.02199478, -0.5778166 , -0.00260402, -0.01063446, -0.01986037,
        0.0377401 , -0.02308336, -0.0133894 , -0.00889408, -0.00279273,
       -0.02856611, -0.04616703,  0.00674351, -0.6733361 ,  0.096618  ],
      dtype=float32), array([-8.3173174e-01,  3.1179186e-02, -2.8202472e-02,  2.8733447e-02,
       -2.3391312e-03, -1.2772658e-02,  2.0375866e-01,  9.5126964e-03,
       -4.3694745e-03,  1.5378960e-02,  7.7458918e-02, -1.0515335e-02,
       -2.0924697e-02,  2.8429306e-03,  1.5343659e-02, -3.8696763e-03,
       -5.7242942e-05,  1.1449247e-02, -5.1020002e-01,  5.0985545e-01],
      dtype=float32)]
---
Target calculation: 1+1-1
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 1, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
Accuracy (count): tensor(2) 
Accuracy (ratio) tensor(0.0312)
Accuracy:
 [[ 2  0  0  0  0  0 62  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[0.031 0.    0.    0.    0.    0.    0.969 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.3 -0.0 -0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  0.9 -0.8 
 0.6  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.2 
-1.1  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0  0.3 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.2 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0 -0.2  0.1 
-0.4  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.4 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.7  0.3 
 0.5  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0  0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0  0.0 -0.7  0.1 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.5  0.5 
Minimum distance of calculation. 
true answer: 1 
indices: 1 
distance: 0.0
---
Target calculation: 1+9-8
pred: tensor([7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 7, 7, 7, 1, 7, 1, 7,
        7, 1, 7, 1, 7, 1, 7, 7, 1, 1, 7, 7, 7, 1, 1, 7]) 
tar: tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [15  0  0  0  0  0 49  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.234 0.    0.    0.    0.    0.    0.766 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.3 -0.0 -0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  0.9 -0.8 
 0.6  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.2 
-1.1  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0  0.3 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.2 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0 -0.2  0.1 
-0.4  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.4 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.7  0.3 
 0.5  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0  0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0  0.0 -0.7  0.1 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.5  0.5 
Minimum distance of calculation. 
true answer: 2 
indices: 1 
distance: 1.5975198
---
Target calculation: 1+8-4
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 2  0  0  0  0  0 62  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.031 0.    0.    0.    0.    0.    0.969 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.3 -0.0 -0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  0.9 -0.8 
 0.6  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.2 
-1.1  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0  0.3 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.2 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0 -0.2  0.1 
-0.4  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.4 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.7  0.3 
 0.5  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0  0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0  0.0 -0.7  0.1 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.5  0.5 
Minimum distance of calculation. 
true answer: 5 
indices: 1 
distance: 1.8363441
---
Target calculation: 2+7-1
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 1, 7, 7, 1, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 1, 1, 7, 7, 1, 7, 1,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 7, 7]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [10  0  0  0  0  0 54  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.156 0.    0.    0.    0.    0.    0.844 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.3 -0.0 -0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  0.9 -0.8 
 0.6  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.2 
-1.1  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0  0.3 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.2 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0 -0.2  0.1 
-0.4  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.4 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.7  0.3 
 0.5  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0  0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0  0.0 -0.7  0.1 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.5  0.5 
Minimum distance of calculation. 
true answer: 8 
indices: 4 
distance: 0.8462241
---
Target calculation: 2+7-2
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 1, 7, 7, 7, 1, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 1, 7, 7, 7, 7,
        7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])
Accuracy (count): tensor(57) 
Accuracy (ratio) tensor(0.8906)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 7  0  0  0  0  0 57  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.109 0.    0.    0.    0.    0.    0.891 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.3 -0.0 -0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  0.9 -0.8 
 0.6  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.2 
-1.1  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0  0.3 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.2 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0 -0.2  0.1 
-0.4  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.4 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.7  0.3 
 0.5  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0  0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0  0.0 -0.7  0.1 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.5  0.5 
Minimum distance of calculation. 
true answer: 7 
indices: 7 
distance: 3.0109963e-08
---
Target calculation: 3+3-3
pred: tensor([7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 1, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 5  0  0  0  0  0 59  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.078 0.    0.    0.    0.    0.    0.922 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.3 -0.0 -0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  0.9 -0.8 
 0.6  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.2 
-1.1  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0  0.3 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.2 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0 -0.2  0.1 
-0.4  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.4 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.7  0.3 
 0.5  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0  0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0  0.0 -0.7  0.1 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.5  0.5 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 0.0
---
Target calculation: 3+5-2
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 7, 7, 7, 7, 7, 7, 1, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 2  0  1  0  0  0 61  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.031 0.    0.016 0.    0.    0.    0.953 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.3 -0.0 -0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  0.9 -0.8 
 0.6  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.2 
-1.1  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0  0.3 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.2 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0 -0.2  0.1 
-0.4  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.4 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.7  0.3 
 0.5  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0  0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0  0.0 -0.7  0.1 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.5  0.5 
Minimum distance of calculation. 
true answer: 6 
indices: 5 
distance: 1.0112914
---
Target calculation: 3+6-3
pred: tensor([7, 7, 7, 7, 7, 7, 1, 7, 1, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 1, 7, 7, 7, 7, 1, 7, 1, 7, 7, 7, 1, 7, 7,
        7, 1, 7, 1, 7, 7, 7, 3, 7, 7, 7, 7, 7, 7, 1, 7]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [11  0  1  0  0  0 52  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.172 0.    0.016 0.    0.    0.    0.812 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.3 -0.0 -0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  0.9 -0.8 
 0.6  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.2 
-1.1  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0  0.3 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.2 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0 -0.2  0.1 
-0.4  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.4 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.7  0.3 
 0.5  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0  0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0  0.0 -0.7  0.1 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.5  0.5 
Minimum distance of calculation. 
true answer: 6 
indices: 6 
distance: 4.4940535e-08
---
Target calculation: 5+3-5
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 1, 7, 1, 7, 7, 7, 7, 7, 7, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(1) 
Accuracy (ratio) tensor(0.0156)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 2  0  1  0  0  0 61  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.031 0.    0.016 0.    0.    0.    0.953 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.3 -0.0 -0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  0.9 -0.8 
 0.6  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.2 
-1.1  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0  0.3 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.2 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0 -0.2  0.1 
-0.4  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.4 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.7  0.3 
 0.5  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0  0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0  0.0 -0.7  0.1 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.5  0.5 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 3.0154546e-08
---
Target calculation: 9+7-8
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 1, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 1, 7,
        7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 7  0  0  0  0  0 57  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.109 0.    0.    0.    0.    0.    0.891 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.3 -0.0 -0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  0.9 -0.8 
 0.6  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.5 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.2 
-1.1  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0  0.3 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.2 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.0 -0.2  0.1 
-0.4  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0 -0.0 -0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.4 -0.4 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.7  0.3 
 0.5  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0  0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0  0.0 -0.7  0.1 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.5  0.5 
Minimum distance of calculation. 
true answer: 8 
indices: 7 
distance: 1.5975198
---
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 1, 1, 1, 7, 1, 7, 7, 7, 7, 1, 7, 7,
        1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 3, 7, 7, 7, 7, 7, 7, 7, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        1, 7, 7, 1, 1, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 1,
        7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 1, 1, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 1, 7, 1,
        7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7,
        7, 7, 7, 7, 1, 1, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7,
        7, 1, 1, 1, 1, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 1, 1, 7, 7, 1, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1,
        7, 1, 1, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 7, 6, 5,
        4, 3, 2, 1, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1, 4, 2, 1, 5, 3, 2, 1, 6, 4,
        3, 2, 1, 7, 5, 4, 3, 2, 1, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3, 2, 1,
        8, 7, 6, 5, 4, 3, 2, 3, 2, 4, 3, 1, 5, 4, 2, 1, 6, 5, 3, 2, 1, 7, 6, 4,
        3, 2, 1, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3,
        2, 8, 7, 6, 5, 4, 3, 4, 3, 2, 5, 4, 3, 1, 6, 5, 4, 2, 1, 7, 6, 5, 3, 2,
        1, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 9,
        7, 6, 5, 4, 3, 8, 7, 6, 5, 4, 5, 4, 3, 2, 6, 5, 4, 3, 1, 7, 6, 5, 4, 2,
        1, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 9,
        8, 6, 5, 4, 3, 9, 7, 6, 5, 4, 8, 7, 6, 5, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3,
        1, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 9,
        8, 7, 5, 4, 3, 9, 8, 6, 5, 4, 9, 7, 6, 5, 8, 7, 6, 7, 6, 5, 4, 3, 2, 8,
        7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 9, 8, 7,
        6, 4, 3, 9, 8, 7, 5, 4, 9, 8, 6, 5, 9, 7, 6, 8, 7, 8, 7, 6, 5, 4, 3, 2,
        9, 8, 7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 9, 8, 7, 6, 5, 3, 9, 8, 7,
        6, 4, 9, 8, 7, 5, 9, 8, 6, 9, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 9, 8, 7, 6,
        5, 4, 3, 9, 8, 7, 6, 5, 4, 9, 8, 7, 6, 5, 9, 8, 7, 6, 9, 8, 7, 9, 8, 9])
Accuracy (count): tensor(45) 
Accuracy (ratio) tensor(0.1103)
Accuracy:
 [[ 3  0  0  0  0  0 33  0  0]
 [ 9  0  0  0  0  0 34  0  0]
 [12  0  1  0  0  0 35  0  0]
 [ 9  0  1  0  0  0 41  0  0]
 [ 6  0  0  0  0  0 46  0  0]
 [ 2  0  0  0  0  0 49  0  0]
 [ 6  0  1  0  0  0 41  0  0]
 [ 3  0  0  0  0  0 40  0  0]
 [ 3  0  0  0  0  0 33  0  0]]
Accuracy:
 [[0.083 0.    0.    0.    0.    0.    0.917 0.    0.   ]
 [0.209 0.    0.    0.    0.    0.    0.791 0.    0.   ]
 [0.25  0.    0.021 0.    0.    0.    0.729 0.    0.   ]
 [0.176 0.    0.02  0.    0.    0.    0.804 0.    0.   ]
 [0.115 0.    0.    0.    0.    0.    0.885 0.    0.   ]
 [0.039 0.    0.    0.    0.    0.    0.961 0.    0.   ]
 [0.125 0.    0.021 0.    0.    0.    0.854 0.    0.   ]
 [0.07  0.    0.    0.    0.    0.    0.93  0.    0.   ]
 [0.083 0.    0.    0.    0.    0.    0.917 0.    0.   ]]
results (all): {'reconst_0x0_avg': 0.09375, 'reconst_0x0_all': nan, 'cluster_avg': 0.038583063, 'cluster_all': array([ 0.0133049 ,  0.05111977,  0.00467556, ..., -0.15848957,
       -0.10609654, -0.01001038], dtype=float32), 'magnitude_avg': 0.31577627532583424, 'magnitude_all': 0.31577627532583424, 'tsne-2d_avg': nan, 'tsne-2d_all': nan, 'mathematics_1+1-1_avg': 0.03125, 'mathematics_1+1-1_all': nan, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+9-8_all': nan, 'mathematics_1+8-4_avg': 0.0, 'mathematics_1+8-4_all': nan, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-1_all': nan, 'mathematics_2+7-2_avg': 0.890625, 'mathematics_2+7-2_all': nan, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+3-3_all': nan, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+5-2_all': nan, 'mathematics_3+6-3_avg': 0.0, 'mathematics_3+6-3_all': nan, 'mathematics_5+3-5_avg': 0.015625, 'mathematics_5+3-5_all': nan, 'mathematics_9+7-8_avg': 0.0, 'mathematics_9+7-8_all': nan, 'mathematics_avg': 0.11029411852359772, 'mathematics_all': nan}
results (only averages): {'id': 'test_vae_cmnist', 'model_name': 'VAE_CMNIST', 'target_modality': 0, 'target_property': 1, 'reconst_0x0_avg': 0.09375, 'cluster_avg': 0.038583063, 'magnitude_avg': 0.31577627532583424, 'tsne-2d_avg': nan, 'mathematics_1+1-1_avg': 0.03125, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+8-4_avg': 0.0, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-2_avg': 0.890625, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+6-3_avg': 0.0, 'mathematics_5+3-5_avg': 0.015625, 'mathematics_9+7-8_avg': 0.0, 'mathematics_avg': 0.11029411852359772}
Arguments (initial):
{'pretrained_path': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'analyse'}
args are updated using pretrained_path:
 {'experiment': 'test_loop_1', 'model': 'VAE_OSCN', 'run_type': 'train', 'seed': 4, 'num_hidden_layers': 2, 'use_conditional': False, 'use_cnn': False, 'latent_dim': 20, 'obj': 'elbo', 'batch_size': 128, 'epochs': 3, 'K': 20, 'learn_prior': False, 'llik_scaling': 0.0, 'logp': False, 'looser': False, 'print_freq': 100, 'no_analytics': False, 'no_cuda': False, 'run_id': 'test_vae_oscn', 'pretrained_path': '', 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn', 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train'}
Parameters were loaded for classifier
Run ID:
 test_vae_oscn
Run Directory:
 ./rslt/test_loop_1/VAE_OSCN/test_vae_oscn
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]       1,229,200
              ReLU-2                  [-1, 400]               0
            Linear-3                  [-1, 400]         160,400
              ReLU-4                  [-1, 400]               0
            Linear-5                   [-1, 20]           8,020
            Linear-6                   [-1, 20]           8,020
            EncMLP-7       [[-1, 20], [-1, 20]]               0
            Linear-8               [-1, 2, 400]           8,400
              ReLU-9               [-1, 2, 400]               0
           Linear-10               [-1, 2, 400]         160,400
             ReLU-11               [-1, 2, 400]               0
           Linear-12              [-1, 2, 3072]       1,231,872
Print of model summary was skipped because can't multiply sequence by non-int of type 'list'
Loading model VAE_OSCN from ./rslt/test_loop_1/VAE_OSCN/test_vae_oscn

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: elbo 
t_objectives: iwae


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn',
 'run_id': 'test_classifier_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]       1,229,200
              ReLU-2                  [-1, 400]               0
            Linear-3                   [-1, 20]           8,020
            Linear-4                   [-1, 20]           8,020
            EncMLP-5       [[-1, 20], [-1, 20]]               0
            Linear-6                    [-1, 9]             189
================================================================
Total params: 1,245,429
Trainable params: 1,245,429
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.00
Params size (MB): 4.75
Estimated Total Size (MB): 4.77
----------------------------------------------------------------
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: cross 
t_objectives: cross


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'tuple'> 
label: ('b9t', 'w5s', 'g9t', 'r7t', 'w8t', 'b5j', 'w5t', 'r4j', 'b3t', 'w8j', 'r4s', 'w2s', 'g6t', 'r9s', 'g9s', 'b4j', 'g6t', 'w7t', 'r8j', 'r5j', 'b6s', 'w8t', 'b8j', 'g7j', 'w7t', 'w3t', 'g6s', 'g4s', 'r3j', 'b6j', 'b4t', 'g6s', 'b5s', 'g4j', 'g1s', 'w9j', 'b5t', 'g2j', 'g1s', 'b9t', 'r8s', 'g9t', 'b9t', 'g8t', 'g2j', 'w5t', 'r4j', 'b5t', 'b7j', 'g9t', 'g5t', 'g9j', 'w4t', 'w6s', 'r7t', 'w4s', 'r4j', 'r3j', 'w1j', 'b2s', 'g7j', 'g6s', 'r1t', 'r2j', 'g7t', 'r5s', 'g7j', 'b9t', 'r4t', 'g5j', 'g1j', 'g7s', 'r5t', 'r8t', 'g1j', 'b2s', 'b6t', 'g7t', 'b2j', 'r7s', 'r3j', 'w3s', 'b9j', 'b8j', 'b5j', 'r2t', 'b4t', 'b2s', 'r5s', 'r6s', 'w3s', 'w5j', 'b3j', 'w8j', 'b7t', 'g3t', 'w6s', 'b4s', 'g4j', 'w3s', 'g3j', 'w9t', 'b8j', 'g7j', 'g9t', 'w6s', 'g2s', 'b3t', 'r3s', 'b3s', 'r9s', 'r1j', 'r5j', 'g5j', 'r6j', 'w3j', 'b5t', 'r3s', 'b3s', 'r1j', 'b3s', 'g4s', 'w5t', 'g2j', 'g5s', 'r6j', 'b8s', 'w6s') 
type(data): <class 'torch.Tensor'> 
data[0].shape: torch.Size([3, 32, 32])

===
Setting info... 
Target modality: 0 
Target property: 0 
Output directory: ./rslt/test_loop_1/VAE_OSCN/test_vae_oscn/analyse/0_0 
Number of category 4 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2, 3} 
Start index: 0 
End index: 4 
withzero: False
---
Silhouette values: [ 0.27647462 -0.05163316  0.27090904 ...  0.17580348  0.2574932
  0.13987568]
Average of silhouette coef: 0.1276148
---

Distance matrix between labels.
  0   1   2   3
0 0.0 1.8 2.2 1.8 
1 1.8 0.0 2.8 3.4 
2 2.2 2.8 0.0 2.9 
3 1.8 3.4 2.9 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 1, 2, 1] 
Latent embbeding: [1.7942775, 2.1986551, 1.7632977, 2.7570772, 3.393401, 2.8692577] 
Flatten array: [[0.         0.        ]
 [1.         1.79427755]
 [2.         2.19865513]
 [3.         1.76329768]
 [0.         0.        ]
 [1.         2.75707722]
 [2.         3.39340091]
 [0.         0.        ]
 [1.         2.86925769]
 [0.         0.        ]]
Correlation: [[ 1.         -0.27511116]
 [-0.27511116  1.        ]]
---
[[], [], [], []] [1 0 2 ... 3 3 3] [[  0.72784555 -65.95088   ]
 [-54.655655    -7.274739  ]
 [ 54.0008      20.862976  ]
 ...
 [  9.737665    29.998247  ]
 [-25.964529    63.07264   ]
 [  5.929735    26.188776  ]]
saved ./rslt/test_loop_1/VAE_OSCN/test_vae_oscn/analyse/0_0/latent__0_0.svg
results (all): {'cluster_avg': 0.1276148, 'cluster_all': array([ 0.27647462, -0.05163316,  0.27090904, ...,  0.17580348,
        0.2574932 ,  0.13987568], dtype=float32), 'magnitude_avg': 0.27511116452612816, 'magnitude_all': -0.27511116452612816, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'test_vae_oscn', 'model_name': 'VAE_OSCN', 'target_modality': 0, 'target_property': 0, 'cluster_avg': 0.1276148, 'magnitude_avg': 0.27511116452612816, 'tsne-2d_avg': nan}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'tuple'> 
label: ('r5j', 'r4t', 'r2t', 'w4j', 'r2j', 'r5s', 'w5j', 'w2t', 'b2s', 'b7j', 'b7t', 'w9s', 'r8s', 'b1s', 'w1s', 'b2t', 'b9j', 'r9j', 'r1t', 'w5s', 'b2t', 'r7j', 'r7s', 'w7s', 'b3t', 'g7j', 'b6j', 'w1t', 'r8j', 'r4j', 'b2s', 'r1j', 'b5j', 'r2j', 'r1j', 'b5t', 'b2j', 'b1s', 'b3s', 'g3s', 'w9t', 'g8t', 'b5t', 'g4s', 'r6t', 'r7s', 'g2j', 'r4t', 'g5j', 'w4s', 'r5s', 'b1t', 'b4s', 'r7s', 'b9j', 'b9t', 'g5s', 'g8j', 'b3t', 'g8s', 'w6j', 'w7j', 'g3s', 'g4s', 'w8j', 'g4j', 'w2j', 'b7s', 'w8j', 'w1j', 'b9s', 'b9t', 'b7s', 'r1t', 'r7t', 'w3t', 'g6j', 'b2s', 'r2t', 'b6j', 'b6s', 'g4t', 'b7j', 'b4s', 'r2j', 'r8s', 'w2s', 'w8t', 'w4j', 'r8s', 'w6s', 'w1s', 'b5t', 'g7j', 'g2s', 'g1t', 'r7s', 'w9t', 'w3s', 'r1j', 'w8t', 'g4j', 'b4t', 'b9s', 'r2s', 'w5t', 'r7s', 'b7j', 'r1s', 'r9j', 'w7t', 'w3j', 'w7s', 'r6s', 'g2s', 'r3s', 'g5s', 'w2j', 'r7s', 'r1j', 'r6t', 'w4t', 'r7s', 'r4j', 'r2t', 'b2s', 'g6s', 'w2s') 
type(data): <class 'torch.Tensor'> 
data[0].shape: torch.Size([3, 32, 32])

===
Setting info... 
Target modality: 0 
Target property: 1 
Output directory: ./rslt/test_loop_1/VAE_OSCN/test_vae_oscn/analyse/0_1 
Number of category 10 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {1, 2, 3, 4, 5, 6, 7, 8, 9} 
Start index: 1 
End index: 10 
withzero: False
---
pred: tensor([1, 4, 1, 1, 4, 1, 4, 1, 1, 1, 4, 4, 1, 4, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1,
        1, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 4, 4, 4, 1, 1, 4, 1, 1, 1, 4, 5, 1, 4,
        1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 4, 1, 1, 1, 5, 4, 1, 1, 1, 1,
        1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 4,
        1, 1, 1, 1, 4, 1, 4, 1, 4, 1, 1, 1, 1, 1, 1, 4, 1, 4, 4, 1, 1, 1, 1, 1,
        1, 1, 1, 4, 1, 4, 1, 1]) 
tar: tensor([8, 3, 3, 3, 1, 6, 2, 3, 6, 3, 3, 4, 7, 7, 8, 4, 6, 2, 5, 3, 7, 7, 1, 4,
        4, 2, 7, 3, 5, 5, 2, 5, 9, 3, 7, 3, 5, 1, 7, 2, 7, 7, 5, 4, 2, 2, 2, 3,
        9, 1, 8, 5, 3, 7, 2, 6, 6, 5, 9, 9, 2, 3, 5, 9, 6, 7, 8, 6, 8, 1, 8, 3,
        6, 9, 5, 1, 3, 2, 3, 4, 8, 2, 1, 1, 1, 6, 1, 7, 4, 3, 8, 6, 6, 9, 3, 5,
        4, 4, 5, 7, 1, 3, 3, 8, 2, 6, 6, 6, 8, 6, 1, 7, 9, 3, 1, 2, 7, 3, 3, 2,
        5, 8, 2, 5, 4, 1, 7, 7])
Accuracy (count): tensor(8) 
Accuracy (ratio) tensor(0.0625)
Accuracy:
 [[ 7  0  0  7  0  0  0  0  0]
 [ 8  0  0  7  1  0  0  0  0]
 [14  0  0  9  0  0  0  0  0]
 [ 9  0  0  1  0  0  0  0  0]
 [10  0  0  4  0  0  0  0  0]
 [13  0  0  2  0  0  0  0  0]
 [14  0  0  3  0  0  0  0  0]
 [10  0  0  0  1  0  0  0  0]
 [ 8  0  0  0  0  0  0  0  0]]
Accuracy:
 [[0.5   0.    0.    0.5   0.    0.    0.    0.    0.   ]
 [0.5   0.    0.    0.438 0.062 0.    0.    0.    0.   ]
 [0.609 0.    0.    0.391 0.    0.    0.    0.    0.   ]
 [0.9   0.    0.    0.1   0.    0.    0.    0.    0.   ]
 [0.714 0.    0.    0.286 0.    0.    0.    0.    0.   ]
 [0.867 0.    0.    0.133 0.    0.    0.    0.    0.   ]
 [0.824 0.    0.    0.176 0.    0.    0.    0.    0.   ]
 [0.909 0.    0.    0.    0.091 0.    0.    0.    0.   ]
 [1.    0.    0.    0.    0.    0.    0.    0.    0.   ]]
---
Silhouette values: [-0.19353604 -0.17913824 -0.1031417  ... -0.13612947 -0.15330611
 -0.13818152]
Average of silhouette coef: -0.10329348
---

Distance matrix between labels.
  1   2   3   4   5   6   7   8   9
1 0.0 0.3 0.5 0.5 0.5 0.6 0.8 0.7 1.0 
2 0.3 0.0 0.3 0.3 0.4 0.5 0.6 0.6 0.8 
3 0.5 0.3 0.0 0.3 0.2 0.3 0.4 0.3 0.6 
4 0.5 0.3 0.3 0.0 0.3 0.3 0.5 0.4 0.6 
5 0.5 0.4 0.2 0.3 0.0 0.2 0.4 0.4 0.5 
6 0.6 0.5 0.3 0.3 0.2 0.0 0.3 0.3 0.5 
7 0.8 0.6 0.4 0.5 0.4 0.3 0.0 0.2 0.3 
8 0.7 0.6 0.3 0.4 0.4 0.3 0.2 0.0 0.3 
9 1.0 0.8 0.6 0.6 0.5 0.5 0.3 0.3 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
Latent embbeding: [0.25128078, 0.45864588, 0.53345484, 0.5495898, 0.6461141, 0.8093014, 0.72733146, 0.9687226, 0.30141726, 0.34817177, 0.36031628, 0.45535612, 0.6281849, 0.58426267, 0.80768865, 0.27293283, 0.23833388, 0.2743508, 0.41175312, 0.31973708, 0.5687491, 0.26781243, 0.2791575, 0.45279872, 0.38172594, 0.60147285, 0.19840665, 0.38449144, 0.3659058, 0.5113122, 0.28946778, 0.3015962, 0.4516906, 0.22783224, 0.26620424, 0.31202015] 
Flatten array: [[0.         0.        ]
 [1.         0.25128078]
 [2.         0.45864588]
 [3.         0.53345484]
 [4.         0.54958981]
 [5.         0.64611411]
 [6.         0.80930138]
 [7.         0.72733146]
 [8.         0.96872258]
 [0.         0.        ]
 [1.         0.30141726]
 [2.         0.34817177]
 [3.         0.36031628]
 [4.         0.45535612]
 [5.         0.62818491]
 [6.         0.58426267]
 [7.         0.80768865]
 [0.         0.        ]
 [1.         0.27293283]
 [2.         0.23833388]
 [3.         0.27435079]
 [4.         0.41175312]
 [5.         0.31973708]
 [6.         0.56874913]
 [0.         0.        ]
 [1.         0.26781243]
 [2.         0.27915749]
 [3.         0.45279872]
 [4.         0.38172594]
 [5.         0.60147285]
 [0.         0.        ]
 [1.         0.19840665]
 [2.         0.38449144]
 [3.         0.36590579]
 [4.         0.51131219]
 [0.         0.        ]
 [1.         0.28946778]
 [2.         0.30159619]
 [3.         0.45169061]
 [0.         0.        ]
 [1.         0.22783224]
 [2.         0.26620424]
 [0.         0.        ]
 [1.         0.31202015]
 [0.         0.        ]]
Correlation: [[1.         0.89363774]
 [0.89363774 1.        ]]
---
[[], [], [], [], [], [], [], [], [], []] [5 4 2 ... 3 9 5] [[ -9.416561    12.91838   ]
 [-28.12547      0.42466187]
 [-27.048765   -17.427984  ]
 ...
 [ 42.06876    -31.612629  ]
 [ 12.274067   -59.577557  ]
 [ 55.44309     -4.919663  ]]
saved ./rslt/test_loop_1/VAE_OSCN/test_vae_oscn/analyse/0_1/latent__0_1.svg
---
length of elements: 408 408
length of 1: 36
length of 2: 43
length of 3: 48
length of 4: 51
length of 5: 52
length of 6: 51
length of 7: 48
length of 8: 43
length of 9: 36
all elements:

[(1, (1, 2, 2)),
 (2, (1, 3, 2)),
 (1, (1, 3, 3)),
 (3, (1, 4, 2)),
 (2, (1, 4, 3)),
 (1, (1, 4, 4)),
 (4, (1, 5, 2)),
 (3, (1, 5, 3)),
 (2, (1, 5, 4)),
 (1, (1, 5, 5)),
 (5, (1, 6, 2)),
 (4, (1, 6, 3)),
 (3, (1, 6, 4)),
 (2, (1, 6, 5)),
 (1, (1, 6, 6)),
 (6, (1, 7, 2)),
 (5, (1, 7, 3)),
 (4, (1, 7, 4)),
 (3, (1, 7, 5)),
 (2, (1, 7, 6)),
 (1, (1, 7, 7)),
 (7, (1, 8, 2)),
 (6, (1, 8, 3)),
 (5, (1, 8, 4)),
 (4, (1, 8, 5)),
 (3, (1, 8, 6)),
 (2, (1, 8, 7)),
 (1, (1, 8, 8)),
 (8, (1, 9, 2)),
 (7, (1, 9, 3)),
 (6, (1, 9, 4)),
 (5, (1, 9, 5)),
 (4, (1, 9, 6)),
 (3, (1, 9, 7)),
 (2, (1, 9, 8)),
 (1, (1, 9, 9)),
 (2, (2, 1, 1)),
 (3, (2, 2, 1)),
 (1, (2, 2, 3)),
 (4, (2, 3, 1)),
 (2, (2, 3, 3)),
 (1, (2, 3, 4)),
 (5, (2, 4, 1)),
 (3, (2, 4, 3)),
 (2, (2, 4, 4)),
 (1, (2, 4, 5)),
 (6, (2, 5, 1)),
 (4, (2, 5, 3)),
 (3, (2, 5, 4)),
 (2, (2, 5, 5)),
 (1, (2, 5, 6)),
 (7, (2, 6, 1)),
 (5, (2, 6, 3)),
 (4, (2, 6, 4)),
 (3, (2, 6, 5)),
 (2, (2, 6, 6)),
 (1, (2, 6, 7)),
 (8, (2, 7, 1)),
 (6, (2, 7, 3)),
 (5, (2, 7, 4)),
 (4, (2, 7, 5)),
 (3, (2, 7, 6)),
 (2, (2, 7, 7)),
 (1, (2, 7, 8)),
 (9, (2, 8, 1)),
 (7, (2, 8, 3)),
 (6, (2, 8, 4)),
 (5, (2, 8, 5)),
 (4, (2, 8, 6)),
 (3, (2, 8, 7)),
 (2, (2, 8, 8)),
 (1, (2, 8, 9)),
 (8, (2, 9, 3)),
 (7, (2, 9, 4)),
 (6, (2, 9, 5)),
 (5, (2, 9, 6)),
 (4, (2, 9, 7)),
 (3, (2, 9, 8)),
 (2, (2, 9, 9)),
 (3, (3, 1, 1)),
 (2, (3, 1, 2)),
 (4, (3, 2, 1)),
 (3, (3, 2, 2)),
 (1, (3, 2, 4)),
 (5, (3, 3, 1)),
 (4, (3, 3, 2)),
 (2, (3, 3, 4)),
 (1, (3, 3, 5)),
 (6, (3, 4, 1)),
 (5, (3, 4, 2)),
 (3, (3, 4, 4)),
 (2, (3, 4, 5)),
 (1, (3, 4, 6)),
 (7, (3, 5, 1)),
 (6, (3, 5, 2)),
 (4, (3, 5, 4)),
 (3, (3, 5, 5)),
 (2, (3, 5, 6)),
 (1, (3, 5, 7)),
 (8, (3, 6, 1)),
 (7, (3, 6, 2)),
 (5, (3, 6, 4)),
 (4, (3, 6, 5)),
 (3, (3, 6, 6)),
 (2, (3, 6, 7)),
 (1, (3, 6, 8)),
 (9, (3, 7, 1)),
 (8, (3, 7, 2)),
 (6, (3, 7, 4)),
 (5, (3, 7, 5)),
 (4, (3, 7, 6)),
 (3, (3, 7, 7)),
 (2, (3, 7, 8)),
 (1, (3, 7, 9)),
 (9, (3, 8, 2)),
 (7, (3, 8, 4)),
 (6, (3, 8, 5)),
 (5, (3, 8, 6)),
 (4, (3, 8, 7)),
 (3, (3, 8, 8)),
 (2, (3, 8, 9)),
 (8, (3, 9, 4)),
 (7, (3, 9, 5)),
 (6, (3, 9, 6)),
 (5, (3, 9, 7)),
 (4, (3, 9, 8)),
 (3, (3, 9, 9)),
 (4, (4, 1, 1)),
 (3, (4, 1, 2)),
 (2, (4, 1, 3)),
 (5, (4, 2, 1)),
 (4, (4, 2, 2)),
 (3, (4, 2, 3)),
 (1, (4, 2, 5)),
 (6, (4, 3, 1)),
 (5, (4, 3, 2)),
 (4, (4, 3, 3)),
 (2, (4, 3, 5)),
 (1, (4, 3, 6)),
 (7, (4, 4, 1)),
 (6, (4, 4, 2)),
 (5, (4, 4, 3)),
 (3, (4, 4, 5)),
 (2, (4, 4, 6)),
 (1, (4, 4, 7)),
 (8, (4, 5, 1)),
 (7, (4, 5, 2)),
 (6, (4, 5, 3)),
 (4, (4, 5, 5)),
 (3, (4, 5, 6)),
 (2, (4, 5, 7)),
 (1, (4, 5, 8)),
 (9, (4, 6, 1)),
 (8, (4, 6, 2)),
 (7, (4, 6, 3)),
 (5, (4, 6, 5)),
 (4, (4, 6, 6)),
 (3, (4, 6, 7)),
 (2, (4, 6, 8)),
 (1, (4, 6, 9)),
 (9, (4, 7, 2)),
 (8, (4, 7, 3)),
 (6, (4, 7, 5)),
 (5, (4, 7, 6)),
 (4, (4, 7, 7)),
 (3, (4, 7, 8)),
 (2, (4, 7, 9)),
 (9, (4, 8, 3)),
 (7, (4, 8, 5)),
 (6, (4, 8, 6)),
 (5, (4, 8, 7)),
 (4, (4, 8, 8)),
 (3, (4, 8, 9)),
 (8, (4, 9, 5)),
 (7, (4, 9, 6)),
 (6, (4, 9, 7)),
 (5, (4, 9, 8)),
 (4, (4, 9, 9)),
 (5, (5, 1, 1)),
 (4, (5, 1, 2)),
 (3, (5, 1, 3)),
 (2, (5, 1, 4)),
 (6, (5, 2, 1)),
 (5, (5, 2, 2)),
 (4, (5, 2, 3)),
 (3, (5, 2, 4)),
 (1, (5, 2, 6)),
 (7, (5, 3, 1)),
 (6, (5, 3, 2)),
 (5, (5, 3, 3)),
 (4, (5, 3, 4)),
 (2, (5, 3, 6)),
 (1, (5, 3, 7)),
 (8, (5, 4, 1)),
 (7, (5, 4, 2)),
 (6, (5, 4, 3)),
 (5, (5, 4, 4)),
 (3, (5, 4, 6)),
 (2, (5, 4, 7)),
 (1, (5, 4, 8)),
 (9, (5, 5, 1)),
 (8, (5, 5, 2)),
 (7, (5, 5, 3)),
 (6, (5, 5, 4)),
 (4, (5, 5, 6)),
 (3, (5, 5, 7)),
 (2, (5, 5, 8)),
 (1, (5, 5, 9)),
 (9, (5, 6, 2)),
 (8, (5, 6, 3)),
 (7, (5, 6, 4)),
 (5, (5, 6, 6)),
 (4, (5, 6, 7)),
 (3, (5, 6, 8)),
 (2, (5, 6, 9)),
 (9, (5, 7, 3)),
 (8, (5, 7, 4)),
 (6, (5, 7, 6)),
 (5, (5, 7, 7)),
 (4, (5, 7, 8)),
 (3, (5, 7, 9)),
 (9, (5, 8, 4)),
 (7, (5, 8, 6)),
 (6, (5, 8, 7)),
 (5, (5, 8, 8)),
 (4, (5, 8, 9)),
 (8, (5, 9, 6)),
 (7, (5, 9, 7)),
 (6, (5, 9, 8)),
 (5, (5, 9, 9)),
 (6, (6, 1, 1)),
 (5, (6, 1, 2)),
 (4, (6, 1, 3)),
 (3, (6, 1, 4)),
 (2, (6, 1, 5)),
 (7, (6, 2, 1)),
 (6, (6, 2, 2)),
 (5, (6, 2, 3)),
 (4, (6, 2, 4)),
 (3, (6, 2, 5)),
 (1, (6, 2, 7)),
 (8, (6, 3, 1)),
 (7, (6, 3, 2)),
 (6, (6, 3, 3)),
 (5, (6, 3, 4)),
 (4, (6, 3, 5)),
 (2, (6, 3, 7)),
 (1, (6, 3, 8)),
 (9, (6, 4, 1)),
 (8, (6, 4, 2)),
 (7, (6, 4, 3)),
 (6, (6, 4, 4)),
 (5, (6, 4, 5)),
 (3, (6, 4, 7)),
 (2, (6, 4, 8)),
 (1, (6, 4, 9)),
 (9, (6, 5, 2)),
 (8, (6, 5, 3)),
 (7, (6, 5, 4)),
 (6, (6, 5, 5)),
 (4, (6, 5, 7)),
 (3, (6, 5, 8)),
 (2, (6, 5, 9)),
 (9, (6, 6, 3)),
 (8, (6, 6, 4)),
 (7, (6, 6, 5)),
 (5, (6, 6, 7)),
 (4, (6, 6, 8)),
 (3, (6, 6, 9)),
 (9, (6, 7, 4)),
 (8, (6, 7, 5)),
 (6, (6, 7, 7)),
 (5, (6, 7, 8)),
 (4, (6, 7, 9)),
 (9, (6, 8, 5)),
 (7, (6, 8, 7)),
 (6, (6, 8, 8)),
 (5, (6, 8, 9)),
 (8, (6, 9, 7)),
 (7, (6, 9, 8)),
 (6, (6, 9, 9)),
 (7, (7, 1, 1)),
 (6, (7, 1, 2)),
 (5, (7, 1, 3)),
 (4, (7, 1, 4)),
 (3, (7, 1, 5)),
 (2, (7, 1, 6)),
 (8, (7, 2, 1)),
 (7, (7, 2, 2)),
 (6, (7, 2, 3)),
 (5, (7, 2, 4)),
 (4, (7, 2, 5)),
 (3, (7, 2, 6)),
 (1, (7, 2, 8)),
 (9, (7, 3, 1)),
 (8, (7, 3, 2)),
 (7, (7, 3, 3)),
 (6, (7, 3, 4)),
 (5, (7, 3, 5)),
 (4, (7, 3, 6)),
 (2, (7, 3, 8)),
 (1, (7, 3, 9)),
 (9, (7, 4, 2)),
 (8, (7, 4, 3)),
 (7, (7, 4, 4)),
 (6, (7, 4, 5)),
 (5, (7, 4, 6)),
 (3, (7, 4, 8)),
 (2, (7, 4, 9)),
 (9, (7, 5, 3)),
 (8, (7, 5, 4)),
 (7, (7, 5, 5)),
 (6, (7, 5, 6)),
 (4, (7, 5, 8)),
 (3, (7, 5, 9)),
 (9, (7, 6, 4)),
 (8, (7, 6, 5)),
 (7, (7, 6, 6)),
 (5, (7, 6, 8)),
 (4, (7, 6, 9)),
 (9, (7, 7, 5)),
 (8, (7, 7, 6)),
 (6, (7, 7, 8)),
 (5, (7, 7, 9)),
 (9, (7, 8, 6)),
 (7, (7, 8, 8)),
 (6, (7, 8, 9)),
 (8, (7, 9, 8)),
 (7, (7, 9, 9)),
 (8, (8, 1, 1)),
 (7, (8, 1, 2)),
 (6, (8, 1, 3)),
 (5, (8, 1, 4)),
 (4, (8, 1, 5)),
 (3, (8, 1, 6)),
 (2, (8, 1, 7)),
 (9, (8, 2, 1)),
 (8, (8, 2, 2)),
 (7, (8, 2, 3)),
 (6, (8, 2, 4)),
 (5, (8, 2, 5)),
 (4, (8, 2, 6)),
 (3, (8, 2, 7)),
 (1, (8, 2, 9)),
 (9, (8, 3, 2)),
 (8, (8, 3, 3)),
 (7, (8, 3, 4)),
 (6, (8, 3, 5)),
 (5, (8, 3, 6)),
 (4, (8, 3, 7)),
 (2, (8, 3, 9)),
 (9, (8, 4, 3)),
 (8, (8, 4, 4)),
 (7, (8, 4, 5)),
 (6, (8, 4, 6)),
 (5, (8, 4, 7)),
 (3, (8, 4, 9)),
 (9, (8, 5, 4)),
 (8, (8, 5, 5)),
 (7, (8, 5, 6)),
 (6, (8, 5, 7)),
 (4, (8, 5, 9)),
 (9, (8, 6, 5)),
 (8, (8, 6, 6)),
 (7, (8, 6, 7)),
 (5, (8, 6, 9)),
 (9, (8, 7, 6)),
 (8, (8, 7, 7)),
 (6, (8, 7, 9)),
 (9, (8, 8, 7)),
 (7, (8, 8, 9)),
 (8, (8, 9, 9)),
 (9, (9, 1, 1)),
 (8, (9, 1, 2)),
 (7, (9, 1, 3)),
 (6, (9, 1, 4)),
 (5, (9, 1, 5)),
 (4, (9, 1, 6)),
 (3, (9, 1, 7)),
 (2, (9, 1, 8)),
 (9, (9, 2, 2)),
 (8, (9, 2, 3)),
 (7, (9, 2, 4)),
 (6, (9, 2, 5)),
 (5, (9, 2, 6)),
 (4, (9, 2, 7)),
 (3, (9, 2, 8)),
 (9, (9, 3, 3)),
 (8, (9, 3, 4)),
 (7, (9, 3, 5)),
 (6, (9, 3, 6)),
 (5, (9, 3, 7)),
 (4, (9, 3, 8)),
 (9, (9, 4, 4)),
 (8, (9, 4, 5)),
 (7, (9, 4, 6)),
 (6, (9, 4, 7)),
 (5, (9, 4, 8)),
 (9, (9, 5, 5)),
 (8, (9, 5, 6)),
 (7, (9, 5, 7)),
 (6, (9, 5, 8)),
 (9, (9, 6, 6)),
 (8, (9, 6, 7)),
 (7, (9, 6, 8)),
 (9, (9, 7, 7)),
 (8, (9, 7, 8)),
 (9, (9, 8, 8))]
i: 1
shape (20,)
i: 2
shape (20,)
i: 3
shape (20,)
i: 4
shape (20,)
i: 5
shape (20,)
i: 6
shape (20,)
i: 7
shape (20,)
i: 8
shape (20,)
i: 9
shape (20,)
mean_all: [None, array([-0.48402104,  0.03262154,  0.05816566,  0.02105897,  0.17571287,
        0.03089778, -0.00092325,  0.01926955,  0.12157829, -0.01994217,
        0.01279711, -0.0138559 ,  0.03755027,  0.1929106 , -0.03837038,
        0.01377424,  0.01672501,  0.03791434,  0.03185955,  0.01252683],
      dtype=float32), array([-0.35731858,  0.02240961,  0.11416098,  0.01879808,  0.04498094,
        0.02160313, -0.00065649,  0.0107664 ,  0.14459091, -0.02651877,
        0.01312462, -0.01542938,  0.04026661,  0.07211874, -0.0239996 ,
        0.01671263,  0.01770448,  0.04577232,  0.13704696,  0.02137741],
      dtype=float32), array([-0.16027853,  0.0287005 ,  0.06150745,  0.01322196,  0.03332584,
        0.02147465, -0.0074308 ,  0.02799624,  0.03008277, -0.0253219 ,
        0.01406849, -0.00864516,  0.03636696, -0.08171733, -0.07021078,
        0.01364752,  0.02164135,  0.04406711,  0.03883281,  0.01393451],
      dtype=float32), array([-0.13410513,  0.02314775, -0.03415709,  0.01955137,  0.01684614,
        0.01835122,  0.00117014,  0.03228959,  0.17403652, -0.02441522,
        0.01600349, -0.00580835,  0.03421492, -0.10697072,  0.09461994,
        0.00695133,  0.02150404,  0.0414565 ,  0.16370596,  0.00956048],
      dtype=float32), array([-0.0952035 ,  0.02218089,  0.02370469,  0.02652705, -0.14724068,
        0.01784821,  0.00320418,  0.02517465,  0.14171608, -0.03284784,
        0.01427762, -0.00460715,  0.03043266, -0.01608318, -0.04068598,
        0.00254974,  0.0181562 ,  0.03783875,  0.05377598,  0.00809803],
      dtype=float32), array([ 0.01572275,  0.02601001,  0.10724477,  0.01698011, -0.08397689,
        0.0245173 ,  0.00811989,  0.03316574,  0.15333797, -0.02830789,
        0.00939371, -0.0146015 ,  0.02819013, -0.10742179,  0.03621741,
       -0.00265503,  0.02014617,  0.03905877,  0.01858317,  0.00274844],
      dtype=float32), array([ 0.23011607,  0.02072498,  0.10898116,  0.03137987, -0.02761754,
        0.01694329,  0.0102571 ,  0.03839928,  0.06536615, -0.02825209,
        0.01336232, -0.00126848,  0.02651066, -0.09803084, -0.08977824,
       -0.02231344,  0.01527653,  0.04180796,  0.11712407, -0.0144731 ],
      dtype=float32), array([ 0.13150877,  0.01827668, -0.03845959,  0.02792928,  0.05791926,
        0.01257123,  0.00532051,  0.03223734,  0.00104975, -0.01997425,
        0.01843265, -0.01416088,  0.02131944, -0.13749333, -0.06646736,
       -0.01076798,  0.0125962 ,  0.02094182,  0.04053017, -0.00658202],
      dtype=float32), array([ 0.35179642,  0.01465548, -0.05466861,  0.03779907, -0.08895746,
       -0.01384161,  0.01884541,  0.01288868,  0.09149335, -0.00721146,
        0.03058251, -0.02635388,  0.01072259, -0.16091672, -0.19257723,
       -0.01774902,  0.0024951 ,  0.0209557 ,  0.03806252, -0.02296023],
      dtype=float32)]
---
Target calculation: 1+1-1
pred: tensor([1, 4, 4, 1, 1, 4, 1, 4, 1, 1, 4, 1, 1, 4, 1, 4, 1, 1, 1, 1, 1, 4, 4, 1,
        1, 4, 1, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 1,
        4, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 1, 1]) 
tar: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
Accuracy (count): tensor(41) 
Accuracy (ratio) tensor(0.6406)
Accuracy:
 [[41  0  0 22  1  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[0.641 0.    0.    0.344 0.016 0.    0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.5  0.0  0.1  0.0  0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.0  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1 -0.0  0.0  0.0  0.0  0.1  0.0 
-0.2  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.1  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.1  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.0  0.0  0.0  0.0  0.1  0.0 
 0.0  0.0  0.1  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.0  0.0  0.0 
 0.2  0.0  0.1  0.0 -0.0  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.1 -0.0 
 0.1  0.0 -0.0  0.0  0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.4  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.2 -0.2 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 1 
indices: 1 
distance: 0.0
---
Target calculation: 1+9-8
pred: tensor([1, 1, 4, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 4, 4, 1, 1, 1, 1, 4, 1, 4, 1, 1,
        4, 1, 1, 1, 1, 1, 1, 4, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1,
        1, 4, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 4, 4]) 
tar: tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [46  0  0 18  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.719 0.    0.    0.281 0.    0.    0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.5  0.0  0.1  0.0  0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.0  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1 -0.0  0.0  0.0  0.0  0.1  0.0 
-0.2  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.1  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.1  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.0  0.0  0.0  0.0  0.1  0.0 
 0.0  0.0  0.1  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.0  0.0  0.0 
 0.2  0.0  0.1  0.0 -0.0  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.1 -0.0 
 0.1  0.0 -0.0  0.0  0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.4  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.2 -0.2 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 2 
indices: 2 
distance: 0.24916723
---
Target calculation: 1+8-4
pred: tensor([1, 1, 4, 1, 1, 5, 1, 1, 1, 4, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 4,
        4, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1,
        1, 4, 1, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 4, 1, 4]) 
tar: tensor([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])
Accuracy (count): tensor(1) 
Accuracy (ratio) tensor(0.0156)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [48  0  0 15  1  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.75  0.    0.    0.234 0.016 0.    0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.5  0.0  0.1  0.0  0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.0  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1 -0.0  0.0  0.0  0.0  0.1  0.0 
-0.2  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.1  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.1  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.0  0.0  0.0  0.0  0.1  0.0 
 0.0  0.0  0.1  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.0  0.0  0.0 
 0.2  0.0  0.1  0.0 -0.0  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.1 -0.0 
 0.1  0.0 -0.0  0.0  0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.4  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.2 -0.2 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 5 
indices: 3 
distance: 0.37332723
---
Target calculation: 2+7-1
pred: tensor([1, 1, 1, 4, 1, 1, 1, 4, 1, 4, 1, 1, 4, 1, 1, 1, 4, 4, 4, 1, 4, 1, 1, 4,
        1, 1, 4, 1, 1, 4, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 4, 4, 4, 1, 4, 1,
        1, 1, 1, 4, 1, 4, 4, 1, 1, 1, 1, 1, 4, 1, 4, 1]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [42  0  0 22  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.656 0.    0.    0.344 0.    0.    0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.5  0.0  0.1  0.0  0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.0  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1 -0.0  0.0  0.0  0.0  0.1  0.0 
-0.2  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.1  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.1  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.0  0.0  0.0  0.0  0.1  0.0 
 0.0  0.0  0.1  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.0  0.0  0.0 
 0.2  0.0  0.1  0.0 -0.0  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.1 -0.0 
 0.1  0.0 -0.0  0.0  0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.4  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.2 -0.2 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 8 
indices: 7 
distance: 0.25128078
---
Target calculation: 2+7-2
pred: tensor([1, 4, 4, 4, 4, 1, 1, 4, 1, 1, 1, 1, 4, 4, 1, 4, 1, 1, 1, 1, 1, 1, 1, 4,
        1, 4, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1,
        1, 1, 4, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1]) 
tar: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [47  0  0 17  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.734 0.    0.    0.266 0.    0.    0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.5  0.0  0.1  0.0  0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.0  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1 -0.0  0.0  0.0  0.0  0.1  0.0 
-0.2  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.1  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.1  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.0  0.0  0.0  0.0  0.1  0.0 
 0.0  0.0  0.1  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.0  0.0  0.0 
 0.2  0.0  0.1  0.0 -0.0  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.1 -0.0 
 0.1  0.0 -0.0  0.0  0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.4  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.2 -0.2 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 7 
indices: 7 
distance: 1.2127326e-08
---
Target calculation: 3+3-3
pred: tensor([1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 1, 4, 4, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        4, 4, 1, 4, 4, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 4, 4, 1, 1, 1,
        4, 4, 1, 1, 1, 1, 1, 1, 4, 4, 1, 4, 1, 4, 4, 4]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [42  0  0 22  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.656 0.    0.    0.344 0.    0.    0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.5  0.0  0.1  0.0  0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.0  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1 -0.0  0.0  0.0  0.0  0.1  0.0 
-0.2  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.1  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.1  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.0  0.0  0.0  0.0  0.1  0.0 
 0.0  0.0  0.1  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.0  0.0  0.0 
 0.2  0.0  0.1  0.0 -0.0  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.1 -0.0 
 0.1  0.0 -0.0  0.0  0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.4  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.2 -0.2 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 0.0
---
Target calculation: 3+5-2
pred: tensor([1, 1, 1, 4, 4, 4, 1, 1, 1, 4, 4, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 4, 1,
        1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 4, 1, 1, 1, 1, 1]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [46  0  0 18  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.719 0.    0.    0.281 0.    0.    0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.5  0.0  0.1  0.0  0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.0  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1 -0.0  0.0  0.0  0.0  0.1  0.0 
-0.2  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.1  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.1  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.0  0.0  0.0  0.0  0.1  0.0 
 0.0  0.0  0.1  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.0  0.0  0.0 
 0.2  0.0  0.1  0.0 -0.0  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.1 -0.0 
 0.1  0.0 -0.0  0.0  0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.4  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.2 -0.2 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 6 
indices: 8 
distance: 0.24214283
---
Target calculation: 3+6-3
pred: tensor([1, 4, 4, 1, 4, 1, 1, 1, 1, 4, 1, 4, 4, 1, 4, 4, 1, 1, 4, 1, 1, 1, 4, 1,
        1, 1, 1, 1, 1, 4, 4, 4, 1, 1, 1, 4, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 1, 4,
        1, 1, 1, 4, 4, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [40  0  0 24  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.625 0.    0.    0.375 0.    0.    0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.5  0.0  0.1  0.0  0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.0  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1 -0.0  0.0  0.0  0.0  0.1  0.0 
-0.2  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.1  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.1  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.0  0.0  0.0  0.0  0.1  0.0 
 0.0  0.0  0.1  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.0  0.0  0.0 
 0.2  0.0  0.1  0.0 -0.0  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.1 -0.0 
 0.1  0.0 -0.0  0.0  0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.4  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.2 -0.2 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 6 
indices: 6 
distance: 7.544575e-09
---
Target calculation: 5+3-5
pred: tensor([1, 1, 4, 1, 4, 4, 1, 1, 1, 1, 4, 5, 1, 4, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 1, 1, 4, 4,
        1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 4, 4, 1, 1]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [44  0  0 19  1  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.688 0.    0.    0.297 0.016 0.    0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.5  0.0  0.1  0.0  0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.0  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1 -0.0  0.0  0.0  0.0  0.1  0.0 
-0.2  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.1  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.1  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.0  0.0  0.0  0.0  0.1  0.0 
 0.0  0.0  0.1  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.0  0.0  0.0 
 0.2  0.0  0.1  0.0 -0.0  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.1 -0.0 
 0.1  0.0 -0.0  0.0  0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.4  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.2 -0.2 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 1.7944583e-08
---
Target calculation: 9+7-8
pred: tensor([1, 1, 4, 1, 4, 4, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 4, 4, 1, 1, 1, 1, 4, 4,
        4, 1, 4, 1, 1, 4, 1, 4, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 4, 4,
        4, 1, 4, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [43  0  0 21  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.672 0.    0.    0.328 0.    0.    0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.5  0.0  0.1  0.0  0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.0  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1 -0.0  0.0  0.0  0.0  0.1  0.0 
-0.2  0.0  0.1  0.0  0.0  0.0 -0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.1  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.1  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.0  0.0  0.0  0.0  0.1  0.0 
 0.0  0.0  0.1  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.0  0.0  0.0 
 0.2  0.0  0.1  0.0 -0.0  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.1 -0.0 
 0.1  0.0 -0.0  0.0  0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.4  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.2 -0.2 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 8 
indices: 9 
distance: 0.22783224
---
pred: tensor([1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1,
        4, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        4, 1, 4, 1, 4, 1, 1, 4, 1, 1, 4, 4, 4, 4, 1, 4, 1, 4, 1, 4, 1, 4, 4, 1,
        1, 4, 4, 4, 1, 1, 4, 1, 4, 1, 4, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 4, 1,
        1, 4, 4, 4, 4, 4, 4, 1, 1, 4, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 4, 1, 4, 1, 4, 1, 1, 1, 1, 1, 1, 1, 4, 1, 4, 4, 4,
        1, 1, 1, 4, 1, 4, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 4, 4, 1, 1, 1, 4, 1, 1, 1, 1, 4, 4,
        1, 1, 5, 1, 1, 1, 4, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 5, 4, 1, 1, 1, 4, 4, 1, 1,
        1, 1, 5, 1, 4, 4, 1, 1, 4, 1, 1, 4, 1, 4, 4, 4, 1, 1, 1, 4, 4, 1, 1, 1,
        4, 1, 1, 1, 4, 1, 1, 4, 4, 1, 4, 1, 1, 4, 1, 1, 1, 1, 4, 1, 4, 1, 1, 1,
        4, 4, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 4, 4, 4, 4, 1, 1, 1, 4,
        1, 4, 4, 4, 1, 4, 4, 4, 1, 1, 1, 4, 1, 4, 1, 1, 1, 4, 4, 4, 1, 4, 1, 1,
        1, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 4, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 1, 1, 4, 4, 1, 1, 1, 1, 4, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4]) 
tar: tensor([1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 7, 6, 5,
        4, 3, 2, 1, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1, 4, 2, 1, 5, 3, 2, 1, 6, 4,
        3, 2, 1, 7, 5, 4, 3, 2, 1, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3, 2, 1,
        8, 7, 6, 5, 4, 3, 2, 3, 2, 4, 3, 1, 5, 4, 2, 1, 6, 5, 3, 2, 1, 7, 6, 4,
        3, 2, 1, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3,
        2, 8, 7, 6, 5, 4, 3, 4, 3, 2, 5, 4, 3, 1, 6, 5, 4, 2, 1, 7, 6, 5, 3, 2,
        1, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 9,
        7, 6, 5, 4, 3, 8, 7, 6, 5, 4, 5, 4, 3, 2, 6, 5, 4, 3, 1, 7, 6, 5, 4, 2,
        1, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 9,
        8, 6, 5, 4, 3, 9, 7, 6, 5, 4, 8, 7, 6, 5, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3,
        1, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 9,
        8, 7, 5, 4, 3, 9, 8, 6, 5, 4, 9, 7, 6, 5, 8, 7, 6, 7, 6, 5, 4, 3, 2, 8,
        7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 9, 8, 7,
        6, 4, 3, 9, 8, 7, 5, 4, 9, 8, 6, 5, 9, 7, 6, 8, 7, 8, 7, 6, 5, 4, 3, 2,
        9, 8, 7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 9, 8, 7, 6, 5, 3, 9, 8, 7,
        6, 4, 9, 8, 7, 5, 9, 8, 6, 9, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 9, 8, 7, 6,
        5, 4, 3, 9, 8, 7, 6, 5, 4, 9, 8, 7, 6, 5, 9, 8, 7, 6, 9, 8, 7, 9, 8, 9])
Accuracy (count): tensor(45) 
Accuracy (ratio) tensor(0.1103)
Accuracy:
 [[29  0  0  6  1  0  0  0  0]
 [30  0  0 13  0  0  0  0  0]
 [31  0  0 17  0  0  0  0  0]
 [37  0  0 14  0  0  0  0  0]
 [32  0  0 18  2  0  0  0  0]
 [33  0  0 18  0  0  0  0  0]
 [30  0  0 18  0  0  0  0  0]
 [34  0  0  9  0  0  0  0  0]
 [28  0  0  8  0  0  0  0  0]]
Accuracy:
 [[0.806 0.    0.    0.167 0.028 0.    0.    0.    0.   ]
 [0.698 0.    0.    0.302 0.    0.    0.    0.    0.   ]
 [0.646 0.    0.    0.354 0.    0.    0.    0.    0.   ]
 [0.725 0.    0.    0.275 0.    0.    0.    0.    0.   ]
 [0.615 0.    0.    0.346 0.038 0.    0.    0.    0.   ]
 [0.647 0.    0.    0.353 0.    0.    0.    0.    0.   ]
 [0.625 0.    0.    0.375 0.    0.    0.    0.    0.   ]
 [0.791 0.    0.    0.209 0.    0.    0.    0.    0.   ]
 [0.778 0.    0.    0.222 0.    0.    0.    0.    0.   ]]
results (all): {'reconst_0x0_avg': 0.0625, 'reconst_0x0_all': nan, 'cluster_avg': -0.10329348, 'cluster_all': array([-0.19353604, -0.17913824, -0.1031417 , ..., -0.13612947,
       -0.15330611, -0.13818152], dtype=float32), 'magnitude_avg': 0.8936377373687912, 'magnitude_all': 0.8936377373687912, 'tsne-2d_avg': nan, 'tsne-2d_all': nan, 'mathematics_1+1-1_avg': 0.640625, 'mathematics_1+1-1_all': nan, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+9-8_all': nan, 'mathematics_1+8-4_avg': 0.015625, 'mathematics_1+8-4_all': nan, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-1_all': nan, 'mathematics_2+7-2_avg': 0.0, 'mathematics_2+7-2_all': nan, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+3-3_all': nan, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+5-2_all': nan, 'mathematics_3+6-3_avg': 0.0, 'mathematics_3+6-3_all': nan, 'mathematics_5+3-5_avg': 0.0, 'mathematics_5+3-5_all': nan, 'mathematics_9+7-8_avg': 0.0, 'mathematics_9+7-8_all': nan, 'mathematics_avg': 0.11029411852359772, 'mathematics_all': nan}
results (only averages): {'id': 'test_vae_oscn', 'model_name': 'VAE_OSCN', 'target_modality': 0, 'target_property': 1, 'reconst_0x0_avg': 0.0625, 'cluster_avg': -0.10329348, 'magnitude_avg': 0.8936377373687912, 'tsne-2d_avg': nan, 'mathematics_1+1-1_avg': 0.640625, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+8-4_avg': 0.015625, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-2_avg': 0.0, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+6-3_avg': 0.0, 'mathematics_5+3-5_avg': 0.0, 'mathematics_9+7-8_avg': 0.0, 'mathematics_avg': 0.11029411852359772}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'tuple'> 
label: ('w6s', 'w7j', 'w1s', 'g1s', 'b4s', 'w6s', 'g1j', 'g9s', 'b3t', 'w6j', 'g6s', 'r1t', 'g8t', 'g3j', 'w3t', 'g4s', 'w1t', 'w5s', 'r8t', 'w2j', 'w1j', 'r5j', 'b7t', 'g7j', 'g5t', 'g7j', 'b4j', 'w7s', 'g5t', 'b7s', 'g4s', 'r3s', 'b3s', 'w6t', 'b1s', 'b6s', 'b4j', 'r1s', 'r6t', 'b7j', 'g6j', 'r9t', 'w4s', 'b3t', 'r6j', 'b3t', 'g9t', 'w2s', 'g2t', 'r8s', 'w1t', 'b8j', 'r3j', 'w4s', 'w7j', 'r2t', 'b9s', 'g2j', 'b3j', 'w7t', 'r3t', 'g7s', 'w4j', 'r4s', 'w3j', 'w6s', 'b2t', 'g9j', 'b8s', 'w7j', 'g3j', 'w4s', 'r7t', 'b7t', 'b7t', 'g3j', 'b8s', 'b3t', 'r7s', 'w9t', 'g6s', 'w8s', 'r5t', 'b8j', 'b5j', 'w8s', 'r3s', 'w8j', 'r7t', 'w9t', 'w6j', 'g7t', 'g5s', 'r9j', 'g5j', 'b5s', 'w8t', 'w4t', 'b9j', 'b3t', 'b8t', 'b2t', 'w7j', 'b4t', 'b7t', 'r5s', 'r9s', 'r4s', 'g5s', 'w2s', 'w6s', 'b3t', 'r2j', 'r7j', 'g7j', 'r6t', 'w8t', 'g6s', 'r1j', 'w6s', 'g9j', 'r1j', 'r6t', 'b8j', 'r4t', 'b9j', 'g7s', 'w7t') 
type(data): <class 'torch.Tensor'> 
data[0].shape: torch.Size([3, 32, 32])

===
Setting info... 
Target modality: 0 
Target property: 2 
Output directory: ./rslt/test_loop_1/VAE_OSCN/test_vae_oscn/analyse/0_2 
Number of category 3 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2} 
Start index: 0 
End index: 3 
withzero: False
---
Silhouette values: [ 0.12558661  0.20080306 -0.04428774 ... -0.0423558   0.14560267
  0.14767163]
Average of silhouette coef: 0.1282407
---

Distance matrix between labels.
  0   1   2
0 0.0 2.3 2.7 
1 2.3 0.0 2.6 
2 2.7 2.6 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 1] 
Latent embbeding: [2.2804456, 2.699655, 2.55702] 
Flatten array: [[0.         0.        ]
 [1.         2.28044558]
 [2.         2.69965506]
 [0.         0.        ]
 [1.         2.55701995]
 [0.         0.        ]]
Correlation: [[1.         0.76095398]
 [0.76095398 1.        ]]
---
[[], [], []] [1 0 1 ... 1 2 0] [[ 21.281054  10.408006]
 [-35.35618   39.626812]
 [  9.422603   4.760419]
 ...
 [-19.070444   6.254368]
 [ 50.872105 -13.845047]
 [-10.863244 -39.143696]]
saved ./rslt/test_loop_1/VAE_OSCN/test_vae_oscn/analyse/0_2/latent__0_2.svg
results (all): {'cluster_avg': 0.1282407, 'cluster_all': array([ 0.12558661,  0.20080306, -0.04428774, ..., -0.0423558 ,
        0.14560267,  0.14767163], dtype=float32), 'magnitude_avg': 0.7609539844959841, 'magnitude_all': 0.7609539844959841, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'test_vae_oscn', 'model_name': 'VAE_OSCN', 'target_modality': 0, 'target_property': 2, 'cluster_avg': 0.1282407, 'magnitude_avg': 0.7609539844959841, 'tsne-2d_avg': nan}
Arguments (initial):
{'pretrained_path': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn',
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'analyse'}
args are updated using pretrained_path:
 {'experiment': 'test_loop_1', 'model': 'MMVAE_CMNIST_OSCN', 'run_type': 'train', 'seed': 4, 'num_hidden_layers': 2, 'use_conditional': False, 'use_cnn': False, 'latent_dim': 20, 'obj': 'dreg', 'batch_size': 128, 'epochs': 3, 'K': 20, 'learn_prior': False, 'llik_scaling': 0.0, 'logp': False, 'looser': False, 'print_freq': 100, 'no_analytics': False, 'no_cuda': False, 'run_id': 'test_mmvae_cmnist_oscn', 'pretrained_path': '', 'run_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn', 'output_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/train'}
Parameters were loaded for classifier
Run ID:
 test_mmvae_cmnist_oscn
Run Directory:
 ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'MMVAE_CMNIST_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'dreg',
 'output_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn',
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'MMVAE_CMNIST_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'dreg',
 'output_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn',
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
Print of model summary was skipped because 'MMVAE_CMNIST_OSCN' object has no attribute 'data_size'
Loading model MMVAE_CMNIST_OSCN from ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn

length of cmnist and oscn dataset (train): 240000 
length of cmnist and oscn dataset (test): 8000

length of dataset (train): 240000 
length of dataset (test): 8000
objectives: m_dreg 
t_objectives: m_iwae


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist',
 'run_id': 'test_classifier_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]         941,200
              ReLU-2                  [-1, 400]               0
            Linear-3                   [-1, 20]           8,020
            Linear-4                   [-1, 20]           8,020
            EncMLP-5       [[-1, 20], [-1, 20]]               0
            Linear-6                    [-1, 9]             189
================================================================
Total params: 957,429
Trainable params: 957,429
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.00
Params size (MB): 3.65
Estimated Total Size (MB): 3.66
----------------------------------------------------------------
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: cross 
t_objectives: cross


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([3, 5, 9, 5, 1, 1, 8, 2, 1, 6, 2, 6, 5, 5, 3, 8, 5, 3, 4, 4, 3, 6, 7, 4,
        7, 4, 8, 4, 5, 7, 7, 4, 4, 3, 2, 8, 4, 6, 3, 1, 7, 2, 2, 2, 1, 9, 5, 1,
        9, 2, 4, 2, 7, 5, 3, 6, 5, 6, 3, 3, 2, 7, 2, 7, 7, 9, 3, 1, 5, 2, 9, 4,
        3, 9, 7, 4, 8, 9, 5, 4, 9, 7, 6, 4, 7, 3, 9, 7, 4, 6, 1, 6, 1, 3, 4, 7,
        1, 6, 6, 1, 4, 2, 1, 3, 4, 2, 1, 2, 6, 2, 8, 4, 6, 4, 5, 7, 9, 6, 7, 3,
        8, 1, 8, 5, 3, 6, 1, 5]), ['r3j', 'r5s', 'r9s', 'b5t', 'r1t', 'g1t', 'r8t', 'w2j', 'b1j', 'b6t', 'w2t', 'b6j', 'r5s', 'r5j', 'b3j', 'g8t', 'b5j', 'g3s', 'g4s', 'r4j', 'r3s', 'w6t', 'b7j', 'b4t', 'w7s', 'w4t', 'r8s', 'g4s', 'w5t', 'w7t', 'g7j', 'w4t', 'w4j', 'w3s', 'b2s', 'w8t', 'r4s', 'b6j', 'b3s', 'g1s', 'b7j', 'w2s', 'g2t', 'g2j', 'b1s', 'r9s', 'g5s', 'b1j', 'g9s', 'g2t', 'b4s', 'g2t', 'r7t', 'w5t', 'b3s', 'g6t', 'r5j', 'b6t', 'g3s', 'w3s', 'g2j', 'w7j', 'g2t', 'g7t', 'g7j', 'r9t', 'w3s', 'b1s', 'r5s', 'b2s', 'g9t', 'r4s', 'r3t', 'g9j', 'b7j', 'b4s', 'w8j', 'g9t', 'r5s', 'g4t', 'b9s', 'g7j', 'g6s', 'r4t', 'b7t', 'r3t', 'r9s', 'g7j', 'r4s', 'b6j', 'w1s', 'g6t', 'b1s', 'g3j', 'w4j', 'w7s', 'g1s', 'g6j', 'g6s', 'b1j', 'g4t', 'r2j', 'b1s', 'r3s', 'g4s', 'r2s', 'b1s', 'r2t', 'g6j', 'b2j', 'b8s', 'b4s', 'g6j', 'g4s', 'g5s', 'w7s', 'b9s', 'r6t', 'w7j', 'b3j', 'b8t', 'w1t', 'g8j', 'g5s', 'r3j', 'r6j', 'r1j', 'r5j']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 0 
Target property: 0 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/analyse/0_0 
Number of category 4 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2, 3} 
Start index: 0 
End index: 4 
withzero: False
---
Silhouette values: [0.20488244 0.23611338 0.18352108 ... 0.25266019 0.20670499 0.09343433]
Average of silhouette coef: 0.15130144
---

Distance matrix between labels.
  0   1   2   3
0 0.0 4.3 3.6 4.0 
1 4.3 0.0 3.6 4.0 
2 3.6 3.6 0.0 3.8 
3 4.0 4.0 3.8 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 1, 2, 1] 
Latent embbeding: [4.266982, 3.6126974, 3.992976, 3.6390324, 3.9707463, 3.7696288] 
Flatten array: [[0.         0.        ]
 [1.         4.26698208]
 [2.         3.61269736]
 [3.         3.99297595]
 [0.         0.        ]
 [1.         3.63903236]
 [2.         3.97074628]
 [0.         0.        ]
 [1.         3.76962876]
 [0.         0.        ]]
Correlation: [[1.         0.06666511]
 [0.06666511 1.        ]]
---
[[], [], [], []] [3 3 3 ... 3 3 1] [[ 30.740051  -28.612753 ]
 [  5.7458673  -9.061329 ]
 [ 23.634848   -9.532742 ]
 ...
 [ 15.926768   -3.1209066]
 [  7.2491236 -29.45002  ]
 [ 49.17421    33.42372  ]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/analyse/0_0/latent__0_0.svg
results (all): {'cluster_avg': 0.15130144, 'cluster_all': array([0.20488244, 0.23611338, 0.18352108, ..., 0.25266019, 0.20670499,
       0.09343433], dtype=float32), 'magnitude_avg': 0.06666510544969413, 'magnitude_all': 0.06666510544969413, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'test_mmvae_cmnist_oscn', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 0, 'target_property': 0, 'cluster_avg': 0.15130144, 'magnitude_avg': 0.06666510544969413, 'tsne-2d_avg': nan}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([6, 3, 8, 9, 2, 4, 5, 5, 2, 5, 2, 7, 2, 8, 4, 5, 7, 8, 4, 7, 5, 9, 9, 3,
        3, 3, 8, 3, 1, 4, 7, 1, 5, 3, 6, 4, 8, 1, 6, 4, 8, 7, 1, 7, 7, 6, 5, 3,
        9, 3, 1, 8, 3, 2, 2, 6, 4, 3, 6, 5, 3, 6, 2, 1, 8, 6, 1, 8, 4, 4, 5, 5,
        6, 6, 8, 9, 8, 6, 6, 8, 4, 3, 3, 3, 8, 2, 9, 6, 1, 2, 1, 4, 6, 1, 1, 2,
        8, 1, 7, 8, 4, 9, 1, 6, 8, 7, 4, 2, 1, 1, 5, 7, 5, 6, 1, 1, 5, 5, 3, 7,
        8, 6, 2, 6, 5, 1, 2, 3]), ['w6t', 'b3s', 'r8s', 'b9t', 'w2t', 'w4s', 'w5j', 'b5j', 'g2s', 'b5j', 'r2j', 'g7s', 'r2j', 'g8j', 'b4j', 'w5s', 'r7s', 'b8s', 'b4s', 'b7s', 'w5t', 'b9t', 'b9t', 'w3s', 'g3s', 'r3t', 'b8s', 'w3j', 'w1j', 'r4s', 'b7j', 'w1t', 'w5t', 'b3t', 'r6s', 'w4t', 'b8s', 'w1t', 'b6t', 'g4j', 'r8s', 'g7s', 'b1t', 'b7j', 'w7s', 'w6s', 'r5s', 'b3t', 'r9j', 'b3j', 'r1j', 'r8s', 'w3t', 'r2s', 'w2j', 'g6j', 'r4t', 'b3t', 'b6j', 'g5j', 'r3s', 'r6j', 'g2t', 'w1s', 'r8j', 'b6t', 'b1j', 'b8t', 'r4s', 'g4s', 'b5s', 'w5t', 'g6t', 'b6s', 'r8j', 'b9t', 'w8j', 'b6j', 'w6t', 'b8t', 'b4t', 'g3j', 'g3s', 'g3s', 'w8j', 'g2j', 'g9j', 'w6t', 'b1s', 'b2s', 'g1j', 'r4j', 'g6t', 'g1j', 'w1s', 'r2t', 'r8t', 'r1t', 'r7s', 'w8s', 'w4j', 'g9j', 'b1t', 'b6t', 'r8s', 'g7t', 'b4s', 'g2t', 'g1t', 'w1s', 'w5t', 'r7t', 'b5t', 'b6t', 'g1t', 'g1j', 'b5j', 'g5j', 'g3j', 'g7s', 'b8s', 'b6t', 'r2s', 'g6s', 'r5j', 'r1t', 'g2s', 'w3t']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 0 
Target property: 1 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/analyse/0_1 
Number of category 10 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {1, 2, 3, 4, 5, 6, 7, 8, 9} 
Start index: 1 
End index: 10 
withzero: False
---
size of extracted recon in MMVAE: <class 'list'>
size of extracted recon in MMVAE: torch.Size([1, 128, 3, 28, 28])
size of extracted recon in MMVAE: torch.Size([128, 3, 28, 28])
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([3, 4, 4, 9, 1, 3, 6, 8, 2, 5, 1, 9, 6, 6, 6, 9, 4, 5, 9, 8, 6, 3, 3, 4,
        4, 5, 2, 2, 3, 3, 2, 4, 1, 9, 7, 2, 2, 4, 4, 6, 7, 4, 7, 6, 2, 7, 4, 6,
        2, 1, 2, 1, 7, 2, 9, 6, 4, 5, 1, 2, 9, 5, 4, 4, 6, 7, 6, 1, 1, 5, 3, 8,
        7, 1, 6, 2, 9, 8, 1, 4, 3, 8, 8, 7, 3, 6, 6, 8, 9, 9, 6, 7, 6, 4, 4, 4,
        7, 5, 4, 7, 3, 3, 1, 2, 2, 4, 5, 4, 9, 4, 9, 7, 1, 5, 4, 5, 8, 5, 4, 1,
        8, 4, 2, 4, 7, 1, 6, 7])
Accuracy (count): tensor(14) 
Accuracy (ratio) tensor(0.1094)
Accuracy:
 [[14  0  0  0  0  0  0  0  0]
 [15  0  0  0  0  0  0  0  0]
 [11  0  0  0  0  0  0  0  0]
 [25  0  0  0  0  0  0  0  0]
 [11  0  0  0  0  0  0  0  0]
 [17  0  0  0  0  0  0  0  0]
 [14  0  0  0  0  0  0  0  0]
 [ 9  0  0  0  0  0  0  0  0]
 [12  0  0  0  0  0  0  0  0]]
Accuracy:
 [[1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]]
---
size of extracted recon in MMVAE: <class 'list'>
size of extracted recon in MMVAE: torch.Size([1, 128, 3, 28, 28])
size of extracted recon in MMVAE: torch.Size([128, 3, 28, 28])
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([7, 6, 4, 9, 6, 1, 2, 6, 3, 1, 5, 6, 8, 8, 4, 5, 2, 5, 1, 4, 3, 9, 1, 3,
        6, 9, 2, 2, 2, 6, 3, 6, 9, 3, 8, 1, 9, 9, 1, 3, 9, 8, 9, 9, 4, 6, 2, 9,
        9, 9, 1, 4, 7, 1, 1, 3, 6, 4, 2, 2, 6, 3, 7, 5, 2, 7, 6, 6, 2, 9, 6, 1,
        4, 3, 2, 2, 8, 1, 9, 1, 1, 4, 4, 9, 8, 2, 3, 2, 7, 6, 1, 7, 5, 5, 6, 2,
        5, 5, 7, 2, 5, 3, 7, 1, 9, 4, 2, 8, 1, 8, 8, 7, 1, 4, 8, 7, 2, 6, 1, 9,
        3, 2, 6, 7, 7, 5, 2, 4])
Accuracy (count): tensor(18) 
Accuracy (ratio) tensor(0.1406)
Accuracy:
 [[18  0  0  0  0  0  0  0  0]
 [20  0  0  0  0  0  0  0  0]
 [12  0  0  0  0  0  0  0  0]
 [12  0  0  0  0  0  0  0  0]
 [10  0  0  0  0  0  0  0  0]
 [17  0  0  0  0  0  0  0  0]
 [12  0  0  0  0  0  0  0  0]
 [10  0  0  0  0  0  0  0  0]
 [17  0  0  0  0  0  0  0  0]]
Accuracy:
 [[1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]]
---
Silhouette values: [0.08826704 0.16999437 0.00923043 ... 0.12000931 0.0657832  0.03680053]
Average of silhouette coef: 0.04718832
---

Distance matrix between labels.
  1   2   3   4   5   6   7   8   9
1 0.0 4.5 4.9 6.0 5.0 5.7 5.7 5.9 6.4 
2 4.5 0.0 3.2 3.9 2.7 1.8 4.6 3.6 4.8 
3 4.9 3.2 0.0 4.6 1.9 4.1 4.2 2.3 4.8 
4 6.0 3.9 4.6 0.0 3.0 3.3 2.5 3.3 1.5 
5 5.0 2.7 1.9 3.0 0.0 3.2 2.8 1.6 3.4 
6 5.7 1.8 4.1 3.3 3.2 0.0 4.8 3.6 4.3 
7 5.7 4.6 4.2 2.5 2.8 4.8 0.0 3.2 2.2 
8 5.9 3.6 2.3 3.3 1.6 3.6 3.2 0.0 3.2 
9 6.4 4.8 4.8 1.5 3.4 4.3 2.2 3.2 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
Latent embbeding: [4.486689, 4.914203, 5.9758635, 5.003521, 5.7038445, 5.7162786, 5.909496, 6.3715286, 3.166488, 3.9333446, 2.6781332, 1.7709781, 4.6441774, 3.5758061, 4.837918, 4.550594, 1.9316263, 4.1196723, 4.1978498, 2.2683794, 4.7587113, 2.9801018, 3.3116531, 2.5017037, 3.3237839, 1.4967241, 3.202789, 2.8388107, 1.5884676, 3.3925204, 4.786152, 3.6427093, 4.2759204, 3.1720493, 2.2277205, 3.168463] 
Flatten array: [[0.         0.        ]
 [1.         4.48668909]
 [2.         4.91420317]
 [3.         5.97586346]
 [4.         5.00352097]
 [5.         5.70384455]
 [6.         5.71627855]
 [7.         5.90949583]
 [8.         6.37152863]
 [0.         0.        ]
 [1.         3.16648793]
 [2.         3.9333446 ]
 [3.         2.67813325]
 [4.         1.77097809]
 [5.         4.64417744]
 [6.         3.57580614]
 [7.         4.8379178 ]
 [0.         0.        ]
 [1.         4.55059385]
 [2.         1.93162632]
 [3.         4.1196723 ]
 [4.         4.19784975]
 [5.         2.26837945]
 [6.         4.75871134]
 [0.         0.        ]
 [1.         2.98010182]
 [2.         3.31165314]
 [3.         2.50170374]
 [4.         3.32378387]
 [5.         1.49672413]
 [0.         0.        ]
 [1.         3.20278907]
 [2.         2.83881068]
 [3.         1.5884676 ]
 [4.         3.39252043]
 [0.         0.        ]
 [1.         4.78615189]
 [2.         3.64270926]
 [3.         4.27592039]
 [0.         0.        ]
 [1.         3.17204928]
 [2.         2.2277205 ]
 [0.         0.        ]
 [1.         3.16846299]
 [0.         0.        ]]
Correlation: [[1.         0.38721512]
 [0.38721512 1.        ]]
---
[[], [], [], [], [], [], [], [], [], []] [6 3 8 ... 3 6 9] [[ -7.751229  -59.944386 ]
 [ -3.3644528  62.833355 ]
 [-41.976036  -10.776452 ]
 ...
 [ 11.751471  -77.9719   ]
 [ -7.454416  -57.32338  ]
 [-52.889122  -32.279274 ]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/analyse/0_1/latent__0_1.svg
---
length of elements: 408 408
length of 1: 36
length of 2: 43
length of 3: 48
length of 4: 51
length of 5: 52
length of 6: 51
length of 7: 48
length of 8: 43
length of 9: 36
all elements:

[(1, (1, 2, 2)),
 (2, (1, 3, 2)),
 (1, (1, 3, 3)),
 (3, (1, 4, 2)),
 (2, (1, 4, 3)),
 (1, (1, 4, 4)),
 (4, (1, 5, 2)),
 (3, (1, 5, 3)),
 (2, (1, 5, 4)),
 (1, (1, 5, 5)),
 (5, (1, 6, 2)),
 (4, (1, 6, 3)),
 (3, (1, 6, 4)),
 (2, (1, 6, 5)),
 (1, (1, 6, 6)),
 (6, (1, 7, 2)),
 (5, (1, 7, 3)),
 (4, (1, 7, 4)),
 (3, (1, 7, 5)),
 (2, (1, 7, 6)),
 (1, (1, 7, 7)),
 (7, (1, 8, 2)),
 (6, (1, 8, 3)),
 (5, (1, 8, 4)),
 (4, (1, 8, 5)),
 (3, (1, 8, 6)),
 (2, (1, 8, 7)),
 (1, (1, 8, 8)),
 (8, (1, 9, 2)),
 (7, (1, 9, 3)),
 (6, (1, 9, 4)),
 (5, (1, 9, 5)),
 (4, (1, 9, 6)),
 (3, (1, 9, 7)),
 (2, (1, 9, 8)),
 (1, (1, 9, 9)),
 (2, (2, 1, 1)),
 (3, (2, 2, 1)),
 (1, (2, 2, 3)),
 (4, (2, 3, 1)),
 (2, (2, 3, 3)),
 (1, (2, 3, 4)),
 (5, (2, 4, 1)),
 (3, (2, 4, 3)),
 (2, (2, 4, 4)),
 (1, (2, 4, 5)),
 (6, (2, 5, 1)),
 (4, (2, 5, 3)),
 (3, (2, 5, 4)),
 (2, (2, 5, 5)),
 (1, (2, 5, 6)),
 (7, (2, 6, 1)),
 (5, (2, 6, 3)),
 (4, (2, 6, 4)),
 (3, (2, 6, 5)),
 (2, (2, 6, 6)),
 (1, (2, 6, 7)),
 (8, (2, 7, 1)),
 (6, (2, 7, 3)),
 (5, (2, 7, 4)),
 (4, (2, 7, 5)),
 (3, (2, 7, 6)),
 (2, (2, 7, 7)),
 (1, (2, 7, 8)),
 (9, (2, 8, 1)),
 (7, (2, 8, 3)),
 (6, (2, 8, 4)),
 (5, (2, 8, 5)),
 (4, (2, 8, 6)),
 (3, (2, 8, 7)),
 (2, (2, 8, 8)),
 (1, (2, 8, 9)),
 (8, (2, 9, 3)),
 (7, (2, 9, 4)),
 (6, (2, 9, 5)),
 (5, (2, 9, 6)),
 (4, (2, 9, 7)),
 (3, (2, 9, 8)),
 (2, (2, 9, 9)),
 (3, (3, 1, 1)),
 (2, (3, 1, 2)),
 (4, (3, 2, 1)),
 (3, (3, 2, 2)),
 (1, (3, 2, 4)),
 (5, (3, 3, 1)),
 (4, (3, 3, 2)),
 (2, (3, 3, 4)),
 (1, (3, 3, 5)),
 (6, (3, 4, 1)),
 (5, (3, 4, 2)),
 (3, (3, 4, 4)),
 (2, (3, 4, 5)),
 (1, (3, 4, 6)),
 (7, (3, 5, 1)),
 (6, (3, 5, 2)),
 (4, (3, 5, 4)),
 (3, (3, 5, 5)),
 (2, (3, 5, 6)),
 (1, (3, 5, 7)),
 (8, (3, 6, 1)),
 (7, (3, 6, 2)),
 (5, (3, 6, 4)),
 (4, (3, 6, 5)),
 (3, (3, 6, 6)),
 (2, (3, 6, 7)),
 (1, (3, 6, 8)),
 (9, (3, 7, 1)),
 (8, (3, 7, 2)),
 (6, (3, 7, 4)),
 (5, (3, 7, 5)),
 (4, (3, 7, 6)),
 (3, (3, 7, 7)),
 (2, (3, 7, 8)),
 (1, (3, 7, 9)),
 (9, (3, 8, 2)),
 (7, (3, 8, 4)),
 (6, (3, 8, 5)),
 (5, (3, 8, 6)),
 (4, (3, 8, 7)),
 (3, (3, 8, 8)),
 (2, (3, 8, 9)),
 (8, (3, 9, 4)),
 (7, (3, 9, 5)),
 (6, (3, 9, 6)),
 (5, (3, 9, 7)),
 (4, (3, 9, 8)),
 (3, (3, 9, 9)),
 (4, (4, 1, 1)),
 (3, (4, 1, 2)),
 (2, (4, 1, 3)),
 (5, (4, 2, 1)),
 (4, (4, 2, 2)),
 (3, (4, 2, 3)),
 (1, (4, 2, 5)),
 (6, (4, 3, 1)),
 (5, (4, 3, 2)),
 (4, (4, 3, 3)),
 (2, (4, 3, 5)),
 (1, (4, 3, 6)),
 (7, (4, 4, 1)),
 (6, (4, 4, 2)),
 (5, (4, 4, 3)),
 (3, (4, 4, 5)),
 (2, (4, 4, 6)),
 (1, (4, 4, 7)),
 (8, (4, 5, 1)),
 (7, (4, 5, 2)),
 (6, (4, 5, 3)),
 (4, (4, 5, 5)),
 (3, (4, 5, 6)),
 (2, (4, 5, 7)),
 (1, (4, 5, 8)),
 (9, (4, 6, 1)),
 (8, (4, 6, 2)),
 (7, (4, 6, 3)),
 (5, (4, 6, 5)),
 (4, (4, 6, 6)),
 (3, (4, 6, 7)),
 (2, (4, 6, 8)),
 (1, (4, 6, 9)),
 (9, (4, 7, 2)),
 (8, (4, 7, 3)),
 (6, (4, 7, 5)),
 (5, (4, 7, 6)),
 (4, (4, 7, 7)),
 (3, (4, 7, 8)),
 (2, (4, 7, 9)),
 (9, (4, 8, 3)),
 (7, (4, 8, 5)),
 (6, (4, 8, 6)),
 (5, (4, 8, 7)),
 (4, (4, 8, 8)),
 (3, (4, 8, 9)),
 (8, (4, 9, 5)),
 (7, (4, 9, 6)),
 (6, (4, 9, 7)),
 (5, (4, 9, 8)),
 (4, (4, 9, 9)),
 (5, (5, 1, 1)),
 (4, (5, 1, 2)),
 (3, (5, 1, 3)),
 (2, (5, 1, 4)),
 (6, (5, 2, 1)),
 (5, (5, 2, 2)),
 (4, (5, 2, 3)),
 (3, (5, 2, 4)),
 (1, (5, 2, 6)),
 (7, (5, 3, 1)),
 (6, (5, 3, 2)),
 (5, (5, 3, 3)),
 (4, (5, 3, 4)),
 (2, (5, 3, 6)),
 (1, (5, 3, 7)),
 (8, (5, 4, 1)),
 (7, (5, 4, 2)),
 (6, (5, 4, 3)),
 (5, (5, 4, 4)),
 (3, (5, 4, 6)),
 (2, (5, 4, 7)),
 (1, (5, 4, 8)),
 (9, (5, 5, 1)),
 (8, (5, 5, 2)),
 (7, (5, 5, 3)),
 (6, (5, 5, 4)),
 (4, (5, 5, 6)),
 (3, (5, 5, 7)),
 (2, (5, 5, 8)),
 (1, (5, 5, 9)),
 (9, (5, 6, 2)),
 (8, (5, 6, 3)),
 (7, (5, 6, 4)),
 (5, (5, 6, 6)),
 (4, (5, 6, 7)),
 (3, (5, 6, 8)),
 (2, (5, 6, 9)),
 (9, (5, 7, 3)),
 (8, (5, 7, 4)),
 (6, (5, 7, 6)),
 (5, (5, 7, 7)),
 (4, (5, 7, 8)),
 (3, (5, 7, 9)),
 (9, (5, 8, 4)),
 (7, (5, 8, 6)),
 (6, (5, 8, 7)),
 (5, (5, 8, 8)),
 (4, (5, 8, 9)),
 (8, (5, 9, 6)),
 (7, (5, 9, 7)),
 (6, (5, 9, 8)),
 (5, (5, 9, 9)),
 (6, (6, 1, 1)),
 (5, (6, 1, 2)),
 (4, (6, 1, 3)),
 (3, (6, 1, 4)),
 (2, (6, 1, 5)),
 (7, (6, 2, 1)),
 (6, (6, 2, 2)),
 (5, (6, 2, 3)),
 (4, (6, 2, 4)),
 (3, (6, 2, 5)),
 (1, (6, 2, 7)),
 (8, (6, 3, 1)),
 (7, (6, 3, 2)),
 (6, (6, 3, 3)),
 (5, (6, 3, 4)),
 (4, (6, 3, 5)),
 (2, (6, 3, 7)),
 (1, (6, 3, 8)),
 (9, (6, 4, 1)),
 (8, (6, 4, 2)),
 (7, (6, 4, 3)),
 (6, (6, 4, 4)),
 (5, (6, 4, 5)),
 (3, (6, 4, 7)),
 (2, (6, 4, 8)),
 (1, (6, 4, 9)),
 (9, (6, 5, 2)),
 (8, (6, 5, 3)),
 (7, (6, 5, 4)),
 (6, (6, 5, 5)),
 (4, (6, 5, 7)),
 (3, (6, 5, 8)),
 (2, (6, 5, 9)),
 (9, (6, 6, 3)),
 (8, (6, 6, 4)),
 (7, (6, 6, 5)),
 (5, (6, 6, 7)),
 (4, (6, 6, 8)),
 (3, (6, 6, 9)),
 (9, (6, 7, 4)),
 (8, (6, 7, 5)),
 (6, (6, 7, 7)),
 (5, (6, 7, 8)),
 (4, (6, 7, 9)),
 (9, (6, 8, 5)),
 (7, (6, 8, 7)),
 (6, (6, 8, 8)),
 (5, (6, 8, 9)),
 (8, (6, 9, 7)),
 (7, (6, 9, 8)),
 (6, (6, 9, 9)),
 (7, (7, 1, 1)),
 (6, (7, 1, 2)),
 (5, (7, 1, 3)),
 (4, (7, 1, 4)),
 (3, (7, 1, 5)),
 (2, (7, 1, 6)),
 (8, (7, 2, 1)),
 (7, (7, 2, 2)),
 (6, (7, 2, 3)),
 (5, (7, 2, 4)),
 (4, (7, 2, 5)),
 (3, (7, 2, 6)),
 (1, (7, 2, 8)),
 (9, (7, 3, 1)),
 (8, (7, 3, 2)),
 (7, (7, 3, 3)),
 (6, (7, 3, 4)),
 (5, (7, 3, 5)),
 (4, (7, 3, 6)),
 (2, (7, 3, 8)),
 (1, (7, 3, 9)),
 (9, (7, 4, 2)),
 (8, (7, 4, 3)),
 (7, (7, 4, 4)),
 (6, (7, 4, 5)),
 (5, (7, 4, 6)),
 (3, (7, 4, 8)),
 (2, (7, 4, 9)),
 (9, (7, 5, 3)),
 (8, (7, 5, 4)),
 (7, (7, 5, 5)),
 (6, (7, 5, 6)),
 (4, (7, 5, 8)),
 (3, (7, 5, 9)),
 (9, (7, 6, 4)),
 (8, (7, 6, 5)),
 (7, (7, 6, 6)),
 (5, (7, 6, 8)),
 (4, (7, 6, 9)),
 (9, (7, 7, 5)),
 (8, (7, 7, 6)),
 (6, (7, 7, 8)),
 (5, (7, 7, 9)),
 (9, (7, 8, 6)),
 (7, (7, 8, 8)),
 (6, (7, 8, 9)),
 (8, (7, 9, 8)),
 (7, (7, 9, 9)),
 (8, (8, 1, 1)),
 (7, (8, 1, 2)),
 (6, (8, 1, 3)),
 (5, (8, 1, 4)),
 (4, (8, 1, 5)),
 (3, (8, 1, 6)),
 (2, (8, 1, 7)),
 (9, (8, 2, 1)),
 (8, (8, 2, 2)),
 (7, (8, 2, 3)),
 (6, (8, 2, 4)),
 (5, (8, 2, 5)),
 (4, (8, 2, 6)),
 (3, (8, 2, 7)),
 (1, (8, 2, 9)),
 (9, (8, 3, 2)),
 (8, (8, 3, 3)),
 (7, (8, 3, 4)),
 (6, (8, 3, 5)),
 (5, (8, 3, 6)),
 (4, (8, 3, 7)),
 (2, (8, 3, 9)),
 (9, (8, 4, 3)),
 (8, (8, 4, 4)),
 (7, (8, 4, 5)),
 (6, (8, 4, 6)),
 (5, (8, 4, 7)),
 (3, (8, 4, 9)),
 (9, (8, 5, 4)),
 (8, (8, 5, 5)),
 (7, (8, 5, 6)),
 (6, (8, 5, 7)),
 (4, (8, 5, 9)),
 (9, (8, 6, 5)),
 (8, (8, 6, 6)),
 (7, (8, 6, 7)),
 (5, (8, 6, 9)),
 (9, (8, 7, 6)),
 (8, (8, 7, 7)),
 (6, (8, 7, 9)),
 (9, (8, 8, 7)),
 (7, (8, 8, 9)),
 (8, (8, 9, 9)),
 (9, (9, 1, 1)),
 (8, (9, 1, 2)),
 (7, (9, 1, 3)),
 (6, (9, 1, 4)),
 (5, (9, 1, 5)),
 (4, (9, 1, 6)),
 (3, (9, 1, 7)),
 (2, (9, 1, 8)),
 (9, (9, 2, 2)),
 (8, (9, 2, 3)),
 (7, (9, 2, 4)),
 (6, (9, 2, 5)),
 (5, (9, 2, 6)),
 (4, (9, 2, 7)),
 (3, (9, 2, 8)),
 (9, (9, 3, 3)),
 (8, (9, 3, 4)),
 (7, (9, 3, 5)),
 (6, (9, 3, 6)),
 (5, (9, 3, 7)),
 (4, (9, 3, 8)),
 (9, (9, 4, 4)),
 (8, (9, 4, 5)),
 (7, (9, 4, 6)),
 (6, (9, 4, 7)),
 (5, (9, 4, 8)),
 (9, (9, 5, 5)),
 (8, (9, 5, 6)),
 (7, (9, 5, 7)),
 (6, (9, 5, 8)),
 (9, (9, 6, 6)),
 (8, (9, 6, 7)),
 (7, (9, 6, 8)),
 (9, (9, 7, 7)),
 (8, (9, 7, 8)),
 (9, (9, 8, 8))]
i: 1
shape (20,)
i: 2
shape (20,)
i: 3
shape (20,)
i: 4
shape (20,)
i: 5
shape (20,)
i: 6
shape (20,)
i: 7
shape (20,)
i: 8
shape (20,)
i: 9
shape (20,)
mean_all: [None, array([-0.38639015, -3.446754  ,  0.45816472,  0.06499252, -0.28855443,
       -0.19760707,  0.17383805,  0.38205862,  0.5945427 ,  0.06314115,
       -0.6582146 , -0.690378  ,  0.08133654,  0.6600107 ,  0.06964041,
        0.41393033,  0.5335883 , -0.26508784,  0.30047184, -0.2691535 ],
      dtype=float32), array([-0.26554254, -0.13339984, -0.36129245,  0.4072319 , -0.50358146,
       -0.17858642, -2.0289552 ,  0.23034997,  0.09620206,  0.17637727,
       -0.21954998, -0.10493413, -0.27050278, -0.48217142, -0.06198917,
        0.15456557, -0.37769085, -0.765185  ,  0.23691207, -0.08738749],
      dtype=float32), array([ 0.26017657,  0.3448593 ,  1.5329745 ,  0.08956624, -0.6235194 ,
        0.84540474, -0.72440916, -0.16073678,  1.4011514 ,  0.40734538,
        0.05503146,  0.28300738, -0.99783945, -0.67485595, -0.34907797,
        0.11448608,  0.12366796, -0.6956348 ,  0.09161178, -0.01648781],
      dtype=float32), array([ 0.29766184,  0.9886521 , -1.3199593 , -0.6344149 ,  0.01743108,
       -0.16225637, -0.13781649, -0.85205144,  0.12893122,  0.36212352,
       -1.7419572 ,  0.5655891 ,  0.170193  , -1.6395152 ,  0.27559343,
        0.07235981,  0.11327583,  0.29839748, -0.7832416 , -0.11846905],
      dtype=float32), array([ 0.2626775 ,  0.8349055 ,  0.14909838, -0.30672848, -0.3023473 ,
        0.56201035, -0.4729976 ,  0.30322248,  0.95622826,  0.3439553 ,
       -0.44104147,  0.30884504, -0.7033056 , -0.9322169 , -0.09882031,
        0.02932076,  0.17896415, -0.25421524, -0.20135358,  0.02352641],
      dtype=float32), array([-0.26217014,  0.53101814, -0.9116795 ,  0.22680727, -0.4936934 ,
       -0.415994  , -2.6616595 , -0.12198527, -0.11476456,  0.35234582,
       -1.1370718 ,  0.22953466, -0.1195339 , -1.1022118 , -0.0111062 ,
        0.09297406, -0.4708632 , -0.51899284, -0.25929826,  0.05466485],
      dtype=float32), array([ 0.4983638 ,  1.2152526 , -0.2772267 , -0.5975955 , -0.03950931,
        0.10812798,  1.7121376 ,  0.08085029,  0.15884542,  0.5143903 ,
       -1.301083  ,  0.4931465 ,  0.07402367, -1.0728678 ,  0.04122124,
        0.06160384, -0.02149277,  0.24680822, -0.5026232 , -0.14310072],
      dtype=float32), array([ 0.6139497 ,  1.4266275 ,  1.101203  , -0.31201127, -0.3045789 ,
        0.6803253 , -0.77587205,  0.2180477 ,  0.9067271 ,  0.5679948 ,
       -1.1532395 ,  0.7375815 , -0.66275233, -1.1728888 , -0.28393868,
       -0.02853205,  0.11633293,  0.02026197, -0.5326433 ,  0.04079983],
      dtype=float32), array([ 0.7340074 ,  1.1987971 , -0.43229672, -0.9602398 , -0.01206265,
       -0.08944368,  0.42317584, -0.7827435 ,  0.1566068 ,  0.5783818 ,
       -2.4331803 ,  0.8287996 ,  0.20363082, -1.7103101 ,  0.13310128,
        0.09476119,  0.14679888,  0.5247228 , -1.1055139 , -0.2083879 ],
      dtype=float32)]
---
Target calculation: 1+1-1
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
Accuracy (count): tensor(64) 
Accuracy (ratio) tensor(1.)
Accuracy:
 [[64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.4  0.5  0.1 -0.3 -0.2  0.2  0.4  0.6  0.1 -0.7 -0.7  0.1  0.7  0.1  0.4  0.5 -0.3  0.3 -0.3 
-0.3 -0.1 -0.4  0.4 -0.5 -0.2 -2.0  0.2  0.1  0.2 -0.2 -0.1 -0.3 -0.5 -0.1  0.2 -0.4 -0.8  0.2 -0.1 
 0.3  0.3  1.5  0.1 -0.6  0.8 -0.7 -0.2  1.4  0.4  0.1  0.3 -1.0 -0.7 -0.3  0.1  0.1 -0.7  0.1 -0.0 
 0.3  1.0 -1.3 -0.6  0.0 -0.2 -0.1 -0.9  0.1  0.4 -1.7  0.6  0.2 -1.6  0.3  0.1  0.1  0.3 -0.8 -0.1 
 0.3  0.8  0.1 -0.3 -0.3  0.6 -0.5  0.3  1.0  0.3 -0.4  0.3 -0.7 -0.9 -0.1  0.0  0.2 -0.3 -0.2  0.0 
-0.3  0.5 -0.9  0.2 -0.5 -0.4 -2.7 -0.1 -0.1  0.4 -1.1  0.2 -0.1 -1.1 -0.0  0.1 -0.5 -0.5 -0.3  0.1 
 0.5  1.2 -0.3 -0.6 -0.0  0.1  1.7  0.1  0.2  0.5 -1.3  0.5  0.1 -1.1  0.0  0.1 -0.0  0.2 -0.5 -0.1 
 0.6  1.4  1.1 -0.3 -0.3  0.7 -0.8  0.2  0.9  0.6 -1.2  0.7 -0.7 -1.2 -0.3 -0.0  0.1  0.0 -0.5  0.0 
 0.7  1.2 -0.4 -1.0 -0.0 -0.1  0.4 -0.8  0.2  0.6 -2.4  0.8  0.2 -1.7  0.1  0.1  0.1  0.5 -1.1 -0.2 
Minimum distance of calculation. 
true answer: 1 
indices: 1 
distance: 0.0
---
Target calculation: 1+9-8
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.4  0.5  0.1 -0.3 -0.2  0.2  0.4  0.6  0.1 -0.7 -0.7  0.1  0.7  0.1  0.4  0.5 -0.3  0.3 -0.3 
-0.3 -0.1 -0.4  0.4 -0.5 -0.2 -2.0  0.2  0.1  0.2 -0.2 -0.1 -0.3 -0.5 -0.1  0.2 -0.4 -0.8  0.2 -0.1 
 0.3  0.3  1.5  0.1 -0.6  0.8 -0.7 -0.2  1.4  0.4  0.1  0.3 -1.0 -0.7 -0.3  0.1  0.1 -0.7  0.1 -0.0 
 0.3  1.0 -1.3 -0.6  0.0 -0.2 -0.1 -0.9  0.1  0.4 -1.7  0.6  0.2 -1.6  0.3  0.1  0.1  0.3 -0.8 -0.1 
 0.3  0.8  0.1 -0.3 -0.3  0.6 -0.5  0.3  1.0  0.3 -0.4  0.3 -0.7 -0.9 -0.1  0.0  0.2 -0.3 -0.2  0.0 
-0.3  0.5 -0.9  0.2 -0.5 -0.4 -2.7 -0.1 -0.1  0.4 -1.1  0.2 -0.1 -1.1 -0.0  0.1 -0.5 -0.5 -0.3  0.1 
 0.5  1.2 -0.3 -0.6 -0.0  0.1  1.7  0.1  0.2  0.5 -1.3  0.5  0.1 -1.1  0.0  0.1 -0.0  0.2 -0.5 -0.1 
 0.6  1.4  1.1 -0.3 -0.3  0.7 -0.8  0.2  0.9  0.6 -1.2  0.7 -0.7 -1.2 -0.3 -0.0  0.1  0.0 -0.5  0.0 
 0.7  1.2 -0.4 -1.0 -0.0 -0.1  0.4 -0.8  0.2  0.6 -2.4  0.8  0.2 -1.7  0.1  0.1  0.1  0.5 -1.1 -0.2 
Minimum distance of calculation. 
true answer: 2 
indices: 1 
distance: 3.168463
---
Target calculation: 1+8-4
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.4  0.5  0.1 -0.3 -0.2  0.2  0.4  0.6  0.1 -0.7 -0.7  0.1  0.7  0.1  0.4  0.5 -0.3  0.3 -0.3 
-0.3 -0.1 -0.4  0.4 -0.5 -0.2 -2.0  0.2  0.1  0.2 -0.2 -0.1 -0.3 -0.5 -0.1  0.2 -0.4 -0.8  0.2 -0.1 
 0.3  0.3  1.5  0.1 -0.6  0.8 -0.7 -0.2  1.4  0.4  0.1  0.3 -1.0 -0.7 -0.3  0.1  0.1 -0.7  0.1 -0.0 
 0.3  1.0 -1.3 -0.6  0.0 -0.2 -0.1 -0.9  0.1  0.4 -1.7  0.6  0.2 -1.6  0.3  0.1  0.1  0.3 -0.8 -0.1 
 0.3  0.8  0.1 -0.3 -0.3  0.6 -0.5  0.3  1.0  0.3 -0.4  0.3 -0.7 -0.9 -0.1  0.0  0.2 -0.3 -0.2  0.0 
-0.3  0.5 -0.9  0.2 -0.5 -0.4 -2.7 -0.1 -0.1  0.4 -1.1  0.2 -0.1 -1.1 -0.0  0.1 -0.5 -0.5 -0.3  0.1 
 0.5  1.2 -0.3 -0.6 -0.0  0.1  1.7  0.1  0.2  0.5 -1.3  0.5  0.1 -1.1  0.0  0.1 -0.0  0.2 -0.5 -0.1 
 0.6  1.4  1.1 -0.3 -0.3  0.7 -0.8  0.2  0.9  0.6 -1.2  0.7 -0.7 -1.2 -0.3 -0.0  0.1  0.0 -0.5  0.0 
 0.7  1.2 -0.4 -1.0 -0.0 -0.1  0.4 -0.8  0.2  0.6 -2.4  0.8  0.2 -1.7  0.1  0.1  0.1  0.5 -1.1 -0.2 
Minimum distance of calculation. 
true answer: 5 
indices: 1 
distance: 3.3237839
---
Target calculation: 2+7-1
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.4  0.5  0.1 -0.3 -0.2  0.2  0.4  0.6  0.1 -0.7 -0.7  0.1  0.7  0.1  0.4  0.5 -0.3  0.3 -0.3 
-0.3 -0.1 -0.4  0.4 -0.5 -0.2 -2.0  0.2  0.1  0.2 -0.2 -0.1 -0.3 -0.5 -0.1  0.2 -0.4 -0.8  0.2 -0.1 
 0.3  0.3  1.5  0.1 -0.6  0.8 -0.7 -0.2  1.4  0.4  0.1  0.3 -1.0 -0.7 -0.3  0.1  0.1 -0.7  0.1 -0.0 
 0.3  1.0 -1.3 -0.6  0.0 -0.2 -0.1 -0.9  0.1  0.4 -1.7  0.6  0.2 -1.6  0.3  0.1  0.1  0.3 -0.8 -0.1 
 0.3  0.8  0.1 -0.3 -0.3  0.6 -0.5  0.3  1.0  0.3 -0.4  0.3 -0.7 -0.9 -0.1  0.0  0.2 -0.3 -0.2  0.0 
-0.3  0.5 -0.9  0.2 -0.5 -0.4 -2.7 -0.1 -0.1  0.4 -1.1  0.2 -0.1 -1.1 -0.0  0.1 -0.5 -0.5 -0.3  0.1 
 0.5  1.2 -0.3 -0.6 -0.0  0.1  1.7  0.1  0.2  0.5 -1.3  0.5  0.1 -1.1  0.0  0.1 -0.0  0.2 -0.5 -0.1 
 0.6  1.4  1.1 -0.3 -0.3  0.7 -0.8  0.2  0.9  0.6 -1.2  0.7 -0.7 -1.2 -0.3 -0.0  0.1  0.0 -0.5  0.0 
 0.7  1.2 -0.4 -1.0 -0.0 -0.1  0.4 -0.8  0.2  0.6 -2.4  0.8  0.2 -1.7  0.1  0.1  0.1  0.5 -1.1 -0.2 
Minimum distance of calculation. 
true answer: 8 
indices: 4 
distance: 4.1541085
---
Target calculation: 2+7-2
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.4  0.5  0.1 -0.3 -0.2  0.2  0.4  0.6  0.1 -0.7 -0.7  0.1  0.7  0.1  0.4  0.5 -0.3  0.3 -0.3 
-0.3 -0.1 -0.4  0.4 -0.5 -0.2 -2.0  0.2  0.1  0.2 -0.2 -0.1 -0.3 -0.5 -0.1  0.2 -0.4 -0.8  0.2 -0.1 
 0.3  0.3  1.5  0.1 -0.6  0.8 -0.7 -0.2  1.4  0.4  0.1  0.3 -1.0 -0.7 -0.3  0.1  0.1 -0.7  0.1 -0.0 
 0.3  1.0 -1.3 -0.6  0.0 -0.2 -0.1 -0.9  0.1  0.4 -1.7  0.6  0.2 -1.6  0.3  0.1  0.1  0.3 -0.8 -0.1 
 0.3  0.8  0.1 -0.3 -0.3  0.6 -0.5  0.3  1.0  0.3 -0.4  0.3 -0.7 -0.9 -0.1  0.0  0.2 -0.3 -0.2  0.0 
-0.3  0.5 -0.9  0.2 -0.5 -0.4 -2.7 -0.1 -0.1  0.4 -1.1  0.2 -0.1 -1.1 -0.0  0.1 -0.5 -0.5 -0.3  0.1 
 0.5  1.2 -0.3 -0.6 -0.0  0.1  1.7  0.1  0.2  0.5 -1.3  0.5  0.1 -1.1  0.0  0.1 -0.0  0.2 -0.5 -0.1 
 0.6  1.4  1.1 -0.3 -0.3  0.7 -0.8  0.2  0.9  0.6 -1.2  0.7 -0.7 -1.2 -0.3 -0.0  0.1  0.0 -0.5  0.0 
 0.7  1.2 -0.4 -1.0 -0.0 -0.1  0.4 -0.8  0.2  0.6 -2.4  0.8  0.2 -1.7  0.1  0.1  0.1  0.5 -1.1 -0.2 
Minimum distance of calculation. 
true answer: 7 
indices: 7 
distance: 7.396836e-08
---
Target calculation: 3+3-3
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.4  0.5  0.1 -0.3 -0.2  0.2  0.4  0.6  0.1 -0.7 -0.7  0.1  0.7  0.1  0.4  0.5 -0.3  0.3 -0.3 
-0.3 -0.1 -0.4  0.4 -0.5 -0.2 -2.0  0.2  0.1  0.2 -0.2 -0.1 -0.3 -0.5 -0.1  0.2 -0.4 -0.8  0.2 -0.1 
 0.3  0.3  1.5  0.1 -0.6  0.8 -0.7 -0.2  1.4  0.4  0.1  0.3 -1.0 -0.7 -0.3  0.1  0.1 -0.7  0.1 -0.0 
 0.3  1.0 -1.3 -0.6  0.0 -0.2 -0.1 -0.9  0.1  0.4 -1.7  0.6  0.2 -1.6  0.3  0.1  0.1  0.3 -0.8 -0.1 
 0.3  0.8  0.1 -0.3 -0.3  0.6 -0.5  0.3  1.0  0.3 -0.4  0.3 -0.7 -0.9 -0.1  0.0  0.2 -0.3 -0.2  0.0 
-0.3  0.5 -0.9  0.2 -0.5 -0.4 -2.7 -0.1 -0.1  0.4 -1.1  0.2 -0.1 -1.1 -0.0  0.1 -0.5 -0.5 -0.3  0.1 
 0.5  1.2 -0.3 -0.6 -0.0  0.1  1.7  0.1  0.2  0.5 -1.3  0.5  0.1 -1.1  0.0  0.1 -0.0  0.2 -0.5 -0.1 
 0.6  1.4  1.1 -0.3 -0.3  0.7 -0.8  0.2  0.9  0.6 -1.2  0.7 -0.7 -1.2 -0.3 -0.0  0.1  0.0 -0.5  0.0 
 0.7  1.2 -0.4 -1.0 -0.0 -0.1  0.4 -0.8  0.2  0.6 -2.4  0.8  0.2 -1.7  0.1  0.1  0.1  0.5 -1.1 -0.2 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 0.0
---
Target calculation: 3+5-2
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.4  0.5  0.1 -0.3 -0.2  0.2  0.4  0.6  0.1 -0.7 -0.7  0.1  0.7  0.1  0.4  0.5 -0.3  0.3 -0.3 
-0.3 -0.1 -0.4  0.4 -0.5 -0.2 -2.0  0.2  0.1  0.2 -0.2 -0.1 -0.3 -0.5 -0.1  0.2 -0.4 -0.8  0.2 -0.1 
 0.3  0.3  1.5  0.1 -0.6  0.8 -0.7 -0.2  1.4  0.4  0.1  0.3 -1.0 -0.7 -0.3  0.1  0.1 -0.7  0.1 -0.0 
 0.3  1.0 -1.3 -0.6  0.0 -0.2 -0.1 -0.9  0.1  0.4 -1.7  0.6  0.2 -1.6  0.3  0.1  0.1  0.3 -0.8 -0.1 
 0.3  0.8  0.1 -0.3 -0.3  0.6 -0.5  0.3  1.0  0.3 -0.4  0.3 -0.7 -0.9 -0.1  0.0  0.2 -0.3 -0.2  0.0 
-0.3  0.5 -0.9  0.2 -0.5 -0.4 -2.7 -0.1 -0.1  0.4 -1.1  0.2 -0.1 -1.1 -0.0  0.1 -0.5 -0.5 -0.3  0.1 
 0.5  1.2 -0.3 -0.6 -0.0  0.1  1.7  0.1  0.2  0.5 -1.3  0.5  0.1 -1.1  0.0  0.1 -0.0  0.2 -0.5 -0.1 
 0.6  1.4  1.1 -0.3 -0.3  0.7 -0.8  0.2  0.9  0.6 -1.2  0.7 -0.7 -1.2 -0.3 -0.0  0.1  0.0 -0.5  0.0 
 0.7  1.2 -0.4 -1.0 -0.0 -0.1  0.4 -0.8  0.2  0.6 -2.4  0.8  0.2 -1.7  0.1  0.1  0.1  0.5 -1.1 -0.2 
Minimum distance of calculation. 
true answer: 6 
indices: 3 
distance: 2.6781332
---
Target calculation: 3+6-3
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.4  0.5  0.1 -0.3 -0.2  0.2  0.4  0.6  0.1 -0.7 -0.7  0.1  0.7  0.1  0.4  0.5 -0.3  0.3 -0.3 
-0.3 -0.1 -0.4  0.4 -0.5 -0.2 -2.0  0.2  0.1  0.2 -0.2 -0.1 -0.3 -0.5 -0.1  0.2 -0.4 -0.8  0.2 -0.1 
 0.3  0.3  1.5  0.1 -0.6  0.8 -0.7 -0.2  1.4  0.4  0.1  0.3 -1.0 -0.7 -0.3  0.1  0.1 -0.7  0.1 -0.0 
 0.3  1.0 -1.3 -0.6  0.0 -0.2 -0.1 -0.9  0.1  0.4 -1.7  0.6  0.2 -1.6  0.3  0.1  0.1  0.3 -0.8 -0.1 
 0.3  0.8  0.1 -0.3 -0.3  0.6 -0.5  0.3  1.0  0.3 -0.4  0.3 -0.7 -0.9 -0.1  0.0  0.2 -0.3 -0.2  0.0 
-0.3  0.5 -0.9  0.2 -0.5 -0.4 -2.7 -0.1 -0.1  0.4 -1.1  0.2 -0.1 -1.1 -0.0  0.1 -0.5 -0.5 -0.3  0.1 
 0.5  1.2 -0.3 -0.6 -0.0  0.1  1.7  0.1  0.2  0.5 -1.3  0.5  0.1 -1.1  0.0  0.1 -0.0  0.2 -0.5 -0.1 
 0.6  1.4  1.1 -0.3 -0.3  0.7 -0.8  0.2  0.9  0.6 -1.2  0.7 -0.7 -1.2 -0.3 -0.0  0.1  0.0 -0.5  0.0 
 0.7  1.2 -0.4 -1.0 -0.0 -0.1  0.4 -0.8  0.2  0.6 -2.4  0.8  0.2 -1.7  0.1  0.1  0.1  0.5 -1.1 -0.2 
Minimum distance of calculation. 
true answer: 6 
indices: 6 
distance: 7.376286e-08
---
Target calculation: 5+3-5
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.4  0.5  0.1 -0.3 -0.2  0.2  0.4  0.6  0.1 -0.7 -0.7  0.1  0.7  0.1  0.4  0.5 -0.3  0.3 -0.3 
-0.3 -0.1 -0.4  0.4 -0.5 -0.2 -2.0  0.2  0.1  0.2 -0.2 -0.1 -0.3 -0.5 -0.1  0.2 -0.4 -0.8  0.2 -0.1 
 0.3  0.3  1.5  0.1 -0.6  0.8 -0.7 -0.2  1.4  0.4  0.1  0.3 -1.0 -0.7 -0.3  0.1  0.1 -0.7  0.1 -0.0 
 0.3  1.0 -1.3 -0.6  0.0 -0.2 -0.1 -0.9  0.1  0.4 -1.7  0.6  0.2 -1.6  0.3  0.1  0.1  0.3 -0.8 -0.1 
 0.3  0.8  0.1 -0.3 -0.3  0.6 -0.5  0.3  1.0  0.3 -0.4  0.3 -0.7 -0.9 -0.1  0.0  0.2 -0.3 -0.2  0.0 
-0.3  0.5 -0.9  0.2 -0.5 -0.4 -2.7 -0.1 -0.1  0.4 -1.1  0.2 -0.1 -1.1 -0.0  0.1 -0.5 -0.5 -0.3  0.1 
 0.5  1.2 -0.3 -0.6 -0.0  0.1  1.7  0.1  0.2  0.5 -1.3  0.5  0.1 -1.1  0.0  0.1 -0.0  0.2 -0.5 -0.1 
 0.6  1.4  1.1 -0.3 -0.3  0.7 -0.8  0.2  0.9  0.6 -1.2  0.7 -0.7 -1.2 -0.3 -0.0  0.1  0.0 -0.5  0.0 
 0.7  1.2 -0.4 -1.0 -0.0 -0.1  0.4 -0.8  0.2  0.6 -2.4  0.8  0.2 -1.7  0.1  0.1  0.1  0.5 -1.1 -0.2 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 9.685755e-08
---
Target calculation: 9+7-8
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.4  0.5  0.1 -0.3 -0.2  0.2  0.4  0.6  0.1 -0.7 -0.7  0.1  0.7  0.1  0.4  0.5 -0.3  0.3 -0.3 
-0.3 -0.1 -0.4  0.4 -0.5 -0.2 -2.0  0.2  0.1  0.2 -0.2 -0.1 -0.3 -0.5 -0.1  0.2 -0.4 -0.8  0.2 -0.1 
 0.3  0.3  1.5  0.1 -0.6  0.8 -0.7 -0.2  1.4  0.4  0.1  0.3 -1.0 -0.7 -0.3  0.1  0.1 -0.7  0.1 -0.0 
 0.3  1.0 -1.3 -0.6  0.0 -0.2 -0.1 -0.9  0.1  0.4 -1.7  0.6  0.2 -1.6  0.3  0.1  0.1  0.3 -0.8 -0.1 
 0.3  0.8  0.1 -0.3 -0.3  0.6 -0.5  0.3  1.0  0.3 -0.4  0.3 -0.7 -0.9 -0.1  0.0  0.2 -0.3 -0.2  0.0 
-0.3  0.5 -0.9  0.2 -0.5 -0.4 -2.7 -0.1 -0.1  0.4 -1.1  0.2 -0.1 -1.1 -0.0  0.1 -0.5 -0.5 -0.3  0.1 
 0.5  1.2 -0.3 -0.6 -0.0  0.1  1.7  0.1  0.2  0.5 -1.3  0.5  0.1 -1.1  0.0  0.1 -0.0  0.2 -0.5 -0.1 
 0.6  1.4  1.1 -0.3 -0.3  0.7 -0.8  0.2  0.9  0.6 -1.2  0.7 -0.7 -1.2 -0.3 -0.0  0.1  0.0 -0.5  0.0 
 0.7  1.2 -0.4 -1.0 -0.0 -0.1  0.4 -0.8  0.2  0.6 -2.4  0.8  0.2 -1.7  0.1  0.1  0.1  0.5 -1.1 -0.2 
Minimum distance of calculation. 
true answer: 8 
indices: 7 
distance: 3.168463
---
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 7, 6, 5,
        4, 3, 2, 1, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1, 4, 2, 1, 5, 3, 2, 1, 6, 4,
        3, 2, 1, 7, 5, 4, 3, 2, 1, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3, 2, 1,
        8, 7, 6, 5, 4, 3, 2, 3, 2, 4, 3, 1, 5, 4, 2, 1, 6, 5, 3, 2, 1, 7, 6, 4,
        3, 2, 1, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3,
        2, 8, 7, 6, 5, 4, 3, 4, 3, 2, 5, 4, 3, 1, 6, 5, 4, 2, 1, 7, 6, 5, 3, 2,
        1, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 9,
        7, 6, 5, 4, 3, 8, 7, 6, 5, 4, 5, 4, 3, 2, 6, 5, 4, 3, 1, 7, 6, 5, 4, 2,
        1, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 9,
        8, 6, 5, 4, 3, 9, 7, 6, 5, 4, 8, 7, 6, 5, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3,
        1, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 9,
        8, 7, 5, 4, 3, 9, 8, 6, 5, 4, 9, 7, 6, 5, 8, 7, 6, 7, 6, 5, 4, 3, 2, 8,
        7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 9, 8, 7,
        6, 4, 3, 9, 8, 7, 5, 4, 9, 8, 6, 5, 9, 7, 6, 8, 7, 8, 7, 6, 5, 4, 3, 2,
        9, 8, 7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 9, 8, 7, 6, 5, 3, 9, 8, 7,
        6, 4, 9, 8, 7, 5, 9, 8, 6, 9, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 9, 8, 7, 6,
        5, 4, 3, 9, 8, 7, 6, 5, 4, 9, 8, 7, 6, 5, 9, 8, 7, 6, 9, 8, 7, 9, 8, 9])
Accuracy (count): tensor(36) 
Accuracy (ratio) tensor(0.0882)
Accuracy:
 [[36  0  0  0  0  0  0  0  0]
 [43  0  0  0  0  0  0  0  0]
 [48  0  0  0  0  0  0  0  0]
 [51  0  0  0  0  0  0  0  0]
 [52  0  0  0  0  0  0  0  0]
 [51  0  0  0  0  0  0  0  0]
 [48  0  0  0  0  0  0  0  0]
 [43  0  0  0  0  0  0  0  0]
 [36  0  0  0  0  0  0  0  0]]
Accuracy:
 [[1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]]
results (all): {'reconst_0x0_avg': 0.109375, 'reconst_0x0_all': nan, 'cross_1x0_avg': 0.140625, 'cross_1x0_all': nan, 'cluster_avg': 0.04718832, 'cluster_all': array([0.08826704, 0.16999437, 0.00923043, ..., 0.12000931, 0.0657832 ,
       0.03680053], dtype=float32), 'magnitude_avg': 0.38721512169389055, 'magnitude_all': 0.38721512169389055, 'tsne-2d_avg': nan, 'tsne-2d_all': nan, 'mathematics_1+1-1_avg': 1.0, 'mathematics_1+1-1_all': nan, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+9-8_all': nan, 'mathematics_1+8-4_avg': 0.0, 'mathematics_1+8-4_all': nan, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-1_all': nan, 'mathematics_2+7-2_avg': 0.0, 'mathematics_2+7-2_all': nan, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+3-3_all': nan, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+5-2_all': nan, 'mathematics_3+6-3_avg': 0.0, 'mathematics_3+6-3_all': nan, 'mathematics_5+3-5_avg': 0.0, 'mathematics_5+3-5_all': nan, 'mathematics_9+7-8_avg': 0.0, 'mathematics_9+7-8_all': nan, 'mathematics_avg': 0.0882352963089943, 'mathematics_all': nan}
results (only averages): {'id': 'test_mmvae_cmnist_oscn', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 0, 'target_property': 1, 'reconst_0x0_avg': 0.109375, 'cross_1x0_avg': 0.140625, 'cluster_avg': 0.04718832, 'magnitude_avg': 0.38721512169389055, 'tsne-2d_avg': nan, 'mathematics_1+1-1_avg': 1.0, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+8-4_avg': 0.0, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-2_avg': 0.0, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+6-3_avg': 0.0, 'mathematics_5+3-5_avg': 0.0, 'mathematics_9+7-8_avg': 0.0, 'mathematics_avg': 0.0882352963089943}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([6, 2, 7, 8, 8, 4, 5, 1, 8, 1, 8, 9, 1, 7, 3, 1, 4, 8, 4, 5, 4, 7, 5, 4,
        5, 5, 6, 1, 2, 4, 9, 9, 4, 5, 6, 6, 7, 3, 7, 4, 3, 4, 2, 8, 2, 9, 4, 4,
        3, 1, 6, 8, 9, 8, 9, 2, 2, 3, 7, 3, 9, 7, 9, 1, 3, 7, 6, 6, 7, 8, 6, 4,
        3, 8, 1, 8, 5, 5, 8, 8, 5, 3, 9, 8, 9, 7, 1, 3, 8, 2, 8, 5, 7, 9, 2, 7,
        3, 6, 7, 3, 8, 6, 5, 8, 5, 7, 9, 3, 1, 9, 6, 7, 4, 9, 2, 4, 6, 2, 2, 1,
        9, 8, 2, 4, 9, 1, 4, 7]), ['r6j', 'b2j', 'r7s', 'w8t', 'g8s', 'g4t', 'b5j', 'g1t', 'r8t', 'r1s', 'g8s', 'g9s', 'g1t', 'b7j', 'g3t', 'b1t', 'g4j', 'w8s', 'r4j', 'r5t', 'w4s', 'b7t', 'w5t', 'g4j', 'g5s', 'b5s', 'w6s', 'w1j', 'w2t', 'b4s', 'w9t', 'w9t', 'g4s', 'r5s', 'w6j', 'g6j', 'g7j', 'r3s', 'g7s', 'g4s', 'r3t', 'g4t', 'b2s', 'b8j', 'r2t', 'w9t', 'b4s', 'r4s', 'g3j', 'g1t', 'w6j', 'r8t', 'w9t', 'g8t', 'r9j', 'b2t', 'g2s', 'g3t', 'w7t', 'r3t', 'b9j', 'g7j', 'w9t', 'w1j', 'w3t', 'w7s', 'r6t', 'r6s', 'r7j', 'r8t', 'w6t', 'w4t', 'g3s', 'w8j', 'w1t', 'w8t', 'w5s', 'r5s', 'b8j', 'r8j', 'r5s', 'r3t', 'w9t', 'r8j', 'w9t', 'b7s', 'r1s', 'g3s', 'r8t', 'r2s', 'g8s', 'r5j', 'b7t', 'b9t', 'w2s', 'b7j', 'w3t', 'r6j', 'w7t', 'w3j', 'b8j', 'r6s', 'b5t', 'g8t', 'r5j', 'w7s', 'w9s', 'b3t', 'r1j', 'r9t', 'b6j', 'r7s', 'b4j', 'g9s', 'g2j', 'b4t', 'w6s', 'r2t', 'b2j', 'r1s', 'g9j', 'r8t', 'w2j', 'r4s', 'r9t', 'g1s', 'g4s', 'g7t']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 0 
Target property: 2 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/analyse/0_2 
Number of category 3 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2} 
Start index: 0 
End index: 3 
withzero: False
---
Silhouette values: [-0.01065649  0.00951969 -0.00129297 ...  0.00058156 -0.03517619
  0.01154375]
Average of silhouette coef: -0.0048953686
---

Distance matrix between labels.
  0   1   2
0 0.0 0.2 0.3 
1 0.2 0.0 0.4 
2 0.3 0.4 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 1] 
Latent embbeding: [0.21624553, 0.26908445, 0.37875146] 
Flatten array: [[0.         0.        ]
 [1.         0.21624553]
 [2.         0.26908445]
 [0.         0.        ]
 [1.         0.37875146]
 [0.         0.        ]]
Correlation: [[ 1.         -0.19790522]
 [-0.19790522  1.        ]]
---
[[], [], []] [0 0 1 ... 1 1 1] [[-34.087646  -7.323266]
 [ 23.879559  61.85593 ]
 [-59.461475 -28.124336]
 ...
 [ 40.393097   3.292888]
 [-12.00873  -56.83159 ]
 [-25.383747  51.75567 ]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/analyse/0_2/latent__0_2.svg
results (all): {'cluster_avg': -0.0048953686, 'cluster_all': array([-0.01065649,  0.00951969, -0.00129297, ...,  0.00058156,
       -0.03517619,  0.01154375], dtype=float32), 'magnitude_avg': 0.19790521697501803, 'magnitude_all': -0.19790521697501803, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'test_mmvae_cmnist_oscn', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 0, 'target_property': 2, 'cluster_avg': -0.0048953686, 'magnitude_avg': 0.19790521697501803, 'tsne-2d_avg': nan}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn',
 'run_id': 'test_classifier_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]       1,229,200
              ReLU-2                  [-1, 400]               0
            Linear-3                   [-1, 20]           8,020
            Linear-4                   [-1, 20]           8,020
            EncMLP-5       [[-1, 20], [-1, 20]]               0
            Linear-6                    [-1, 9]             189
================================================================
Total params: 1,245,429
Trainable params: 1,245,429
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.00
Params size (MB): 4.75
Estimated Total Size (MB): 4.77
----------------------------------------------------------------
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: cross 
t_objectives: cross


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([7, 5, 9, 6, 5, 4, 1, 8, 1, 3, 7, 9, 6, 9, 2, 6, 2, 9, 2, 7, 7, 6, 6, 2,
        4, 2, 2, 1, 9, 4, 1, 5, 4, 3, 6, 7, 7, 1, 1, 9, 2, 2, 8, 5, 2, 6, 4, 8,
        1, 6, 9, 4, 2, 6, 3, 8, 4, 7, 4, 8, 2, 8, 5, 3, 2, 2, 8, 6, 4, 4, 4, 6,
        7, 5, 8, 6, 2, 2, 4, 8, 2, 3, 5, 7, 3, 1, 1, 8, 7, 7, 3, 6, 8, 6, 8, 5,
        4, 6, 7, 4, 9, 7, 1, 5, 7, 6, 1, 9, 2, 2, 8, 5, 5, 7, 1, 9, 3, 4, 8, 8,
        2, 8, 1, 3, 5, 1, 3, 1]), ['r7s', 'b5t', 'g9t', 'g6s', 'b5s', 'b4t', 'b1t', 'g8s', 'r1s', 'w3s', 'b7j', 'w9s', 'r6s', 'b9j', 'r2t', 'g6s', 'w2j', 'r9t', 'b2s', 'g7t', 'r7t', 'r6s', 'r6j', 'b2j', 'g4s', 'w2j', 'w2t', 'b1s', 'w9s', 'r4t', 'r1j', 'w5j', 'w4s', 'b3s', 'r6t', 'g7t', 'r7j', 'b1j', 'w1t', 'r9t', 'b2j', 'w2s', 'r8s', 'g5s', 'g2t', 'r6j', 'b4t', 'w8j', 'g1t', 'r6j', 'b9s', 'w4t', 'r2j', 'w6s', 'b3t', 'b8j', 'r4s', 'g7j', 'g4s', 'r8j', 'w2t', 'b8s', 'g5s', 'b3j', 'r2t', 'b2t', 'b8t', 'w6s', 'r4t', 'g4s', 'w4j', 'w6s', 'w7j', 'r5j', 'b8s', 'g6s', 'w2t', 'g2t', 'w4s', 'r8s', 'b2j', 'w3t', 'b5t', 'b7j', 'g3j', 'b1j', 'r1j', 'w8s', 'r7s', 'b7j', 'g3j', 'b6s', 'w8t', 'b6t', 'g8t', 'w5s', 'b4j', 'r6t', 'r7t', 'b4t', 'r9t', 'b7t', 'b1s', 'b5j', 'g7j', 'g6j', 'w1t', 'w9t', 'b2s', 'r2s', 'r8t', 'r5s', 'b5t', 'r7t', 'g1s', 'w9s', 'r3j', 'b4j', 'r8t', 'r8s', 'g2j', 'b8j', 'r1s', 'g3t', 'w5s', 'r1s', 'r3s', 'r1t']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 1 
Target property: 0 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/analyse/1_0 
Number of category 4 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2, 3} 
Start index: 0 
End index: 4 
withzero: False
---
Silhouette values: [0.19888958 0.17258433 0.166723   ... 0.06543053 0.10717307 0.09748668]
Average of silhouette coef: 0.101228714
---

Distance matrix between labels.
  0   1   2   3
0 0.0 3.4 3.1 3.1 
1 3.4 0.0 3.5 4.0 
2 3.1 3.5 0.0 4.0 
3 3.1 4.0 4.0 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 1, 2, 1] 
Latent embbeding: [3.3781486, 3.1026833, 3.147606, 3.4571042, 3.99153, 3.9532113] 
Flatten array: [[0.         0.        ]
 [1.         3.37814856]
 [2.         3.10268331]
 [3.         3.1476059 ]
 [0.         0.        ]
 [1.         3.45710421]
 [2.         3.99152994]
 [0.         0.        ]
 [1.         3.95321131]
 [0.         0.        ]]
Correlation: [[ 1.         -0.40011096]
 [-0.40011096  1.        ]]
---
[[], [], [], []] [3 1 2 ... 3 3 2] [[-47.018448   16.405115 ]
 [ 20.836248  -31.778788 ]
 [ 12.953966   59.002697 ]
 ...
 [-32.130863   -7.3456774]
 [-38.020813   -9.359249 ]
 [  6.512217   -4.7957497]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/analyse/1_0/latent__1_0.svg
results (all): {'cluster_avg': 0.101228714, 'cluster_all': array([0.19888958, 0.17258433, 0.166723  , ..., 0.06543053, 0.10717307,
       0.09748668], dtype=float32), 'magnitude_avg': 0.4001109553641568, 'magnitude_all': -0.4001109553641568, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'test_mmvae_cmnist_oscn', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 1, 'target_property': 0, 'cluster_avg': 0.101228714, 'magnitude_avg': 0.4001109553641568, 'tsne-2d_avg': nan}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([3, 6, 6, 6, 2, 4, 1, 6, 3, 6, 3, 5, 7, 1, 7, 5, 9, 4, 7, 1, 2, 7, 8, 7,
        6, 9, 7, 6, 1, 7, 2, 5, 8, 1, 2, 2, 1, 5, 6, 6, 8, 5, 3, 1, 5, 3, 7, 8,
        9, 3, 2, 4, 4, 8, 1, 4, 8, 7, 7, 7, 7, 2, 9, 9, 5, 1, 3, 2, 6, 1, 4, 9,
        2, 3, 6, 8, 7, 5, 5, 4, 3, 3, 5, 8, 2, 9, 1, 7, 8, 6, 7, 1, 4, 1, 1, 1,
        6, 4, 8, 7, 9, 2, 6, 8, 7, 6, 2, 7, 7, 6, 8, 1, 9, 4, 3, 2, 4, 6, 8, 3,
        9, 2, 3, 9, 9, 2, 1, 7]), ['g3j', 'w6s', 'b6t', 'b6t', 'g2t', 'g4j', 'r1t', 'r6j', 'w3j', 'b6t', 'b3j', 'b5t', 'r7s', 'r1s', 'b7j', 'g5j', 'g9t', 'w4t', 'g7j', 'r1t', 'b2j', 'g7s', 'w8s', 'w7j', 'g6j', 'b9s', 'g7t', 'g6s', 'b1t', 'g7s', 'g2s', 'w5j', 'b8s', 'r1s', 'g2t', 'g2t', 'g1t', 'b5j', 'w6j', 'g6s', 'b8t', 'g5s', 'b3s', 'w1t', 'r5j', 'r3j', 'g7t', 'r8j', 'b9j', 'g3s', 'w2j', 'w4s', 'b4j', 'b8j', 'b1s', 'g4s', 'g8j', 'r7s', 'g7s', 'r7t', 'r7j', 'r2t', 'g9s', 'w9t', 'b5t', 'w1j', 'w3s', 'w2s', 'b6s', 'r1j', 'r4t', 'r9t', 'b2t', 'b3j', 'r6s', 'w8t', 'g7t', 'w5t', 'r5j', 'g4t', 'b3j', 'b3j', 'r5s', 'g8j', 'g2s', 'r9j', 'r1s', 'r7j', 'w8t', 'r6j', 'w7s', 'w1t', 'r4s', 'b1j', 'r1t', 'g1t', 'g6s', 'g4t', 'r8s', 'r7t', 'b9s', 'g2s', 'w6j', 'w8j', 'g7t', 'g6s', 'g2t', 'r7t', 'g7j', 'b6t', 'r8j', 'w1s', 'g9j', 'b4j', 'g3j', 'b2j', 'w4t', 'g6s', 'r8s', 'b3s', 'r9s', 'b2j', 'b3t', 'r9t', 'b9s', 'r2s', 'b1t', 'w7t']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 1 
Target property: 1 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/analyse/1_1 
Number of category 10 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {1, 2, 3, 4, 5, 6, 7, 8, 9} 
Start index: 1 
End index: 10 
withzero: False
---
size of extracted recon in MMVAE: <class 'list'>
size of extracted recon in MMVAE: torch.Size([1, 128, 3, 32, 32])
size of extracted recon in MMVAE: torch.Size([128, 3, 32, 32])
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([7, 6, 4, 9, 9, 3, 3, 4, 3, 3, 6, 9, 9, 3, 4, 3, 4, 1, 8, 8, 7, 5, 4, 8,
        6, 9, 5, 4, 4, 2, 7, 3, 4, 7, 9, 9, 6, 5, 1, 4, 2, 8, 7, 5, 8, 1, 4, 9,
        5, 2, 4, 5, 7, 6, 7, 2, 3, 4, 2, 5, 9, 9, 4, 1, 4, 4, 1, 1, 1, 5, 9, 1,
        2, 6, 7, 1, 2, 7, 2, 5, 1, 8, 9, 4, 9, 7, 6, 5, 3, 4, 7, 3, 8, 1, 2, 4,
        2, 6, 9, 8, 3, 1, 6, 2, 6, 4, 2, 2, 8, 2, 9, 1, 8, 9, 1, 2, 1, 9, 1, 7,
        4, 2, 1, 8, 5, 7, 3, 2])
Accuracy (count): tensor(13) 
Accuracy (ratio) tensor(0.1016)
Accuracy:
 [[ 0  0  0  0  0  0 17  0  0]
 [ 0  0  0  0  0  0 17  0  0]
 [ 0  0  0  0  0  0 12  0  0]
 [ 0  0  0  0  0  0 20  0  0]
 [ 0  0  0  0  0  0 11  0  0]
 [ 0  0  0  0  0  0 10  0  0]
 [ 0  0  0  0  0  0 13  0  0]
 [ 0  0  0  0  0  0 11  0  0]
 [ 0  0  0  0  0  0 17  0  0]]
Accuracy:
 [[0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]]
---
size of extracted recon in MMVAE: <class 'list'>
size of extracted recon in MMVAE: torch.Size([1, 128, 3, 32, 32])
size of extracted recon in MMVAE: torch.Size([128, 3, 32, 32])
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([7, 7, 2, 2, 1, 6, 3, 1, 8, 5, 3, 5, 3, 2, 7, 3, 5, 8, 5, 8, 3, 4, 4, 2,
        2, 7, 2, 4, 8, 8, 4, 5, 1, 2, 1, 7, 9, 3, 1, 5, 4, 6, 5, 9, 3, 7, 8, 7,
        9, 4, 9, 4, 2, 2, 7, 1, 4, 8, 1, 2, 2, 5, 2, 7, 9, 4, 2, 4, 2, 9, 7, 8,
        5, 6, 8, 3, 6, 9, 6, 6, 6, 5, 5, 1, 6, 3, 2, 5, 7, 1, 1, 8, 4, 2, 4, 2,
        2, 1, 9, 9, 4, 1, 5, 5, 9, 3, 3, 7, 6, 9, 3, 4, 4, 1, 8, 5, 1, 4, 1, 7,
        4, 3, 6, 9, 9, 6, 2, 4])
Accuracy (count): tensor(13) 
Accuracy (ratio) tensor(0.1016)
Accuracy:
 [[ 0  0  0  0  0  0 15  0  0]
 [ 0  0  0  0  0  0 19  0  0]
 [ 0  0  0  0  0  0 13  0  0]
 [ 0  0  0  0  0  0 18  0  0]
 [ 0  0  0  0  0  0 15  0  0]
 [ 0  0  0  0  0  0 11  0  0]
 [ 0  0  0  0  0  0 13  0  0]
 [ 0  0  0  0  0  0 11  0  0]
 [ 0  0  0  0  0  0 13  0  0]]
Accuracy:
 [[0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]]
---
Silhouette values: [-0.01048063 -0.00758996 -0.01514463 ...  0.05286874  0.17879868
 -0.00507671]
Average of silhouette coef: 0.04382989
---

Distance matrix between labels.
  1   2   3   4   5   6   7   8   9
1 0.0 2.7 3.4 3.7 4.0 4.4 4.8 5.4 6.7 
2 2.7 0.0 1.3 1.8 2.6 3.4 4.1 5.0 6.6 
3 3.4 1.3 0.0 0.9 1.6 2.5 3.2 4.1 5.8 
4 3.7 1.8 0.9 0.0 0.9 1.8 2.5 3.5 5.4 
5 4.0 2.6 1.6 0.9 0.0 1.0 1.7 2.9 5.1 
6 4.4 3.4 2.5 1.8 1.0 0.0 0.8 2.4 4.8 
7 4.8 4.1 3.2 2.5 1.7 0.8 0.0 2.0 4.4 
8 5.4 5.0 4.1 3.5 2.9 2.4 2.0 0.0 2.5 
9 6.7 6.6 5.8 5.4 5.1 4.8 4.4 2.5 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
Latent embbeding: [2.681855, 3.4192803, 3.6772864, 4.031304, 4.403067, 4.791949, 5.3584886, 6.7331123, 1.2648313, 1.8488238, 2.6046948, 3.3962874, 4.0609484, 4.965373, 6.618513, 0.89864826, 1.6397995, 2.484213, 3.1801238, 4.0797195, 5.7990313, 0.9439594, 1.8100088, 2.4869914, 3.4849465, 5.395286, 1.0300149, 1.6928915, 2.9290936, 5.0604935, 0.7937485, 2.4365807, 4.754598, 1.9642123, 4.362369, 2.4639945] 
Flatten array: [[0.         0.        ]
 [1.         2.68185496]
 [2.         3.41928029]
 [3.         3.67728639]
 [4.         4.03130388]
 [5.         4.40306711]
 [6.         4.7919488 ]
 [7.         5.35848856]
 [8.         6.73311234]
 [0.         0.        ]
 [1.         1.2648313 ]
 [2.         1.84882379]
 [3.         2.60469484]
 [4.         3.39628744]
 [5.         4.06094837]
 [6.         4.96537304]
 [7.         6.61851311]
 [0.         0.        ]
 [1.         0.89864826]
 [2.         1.63979948]
 [3.         2.48421311]
 [4.         3.18012381]
 [5.         4.07971954]
 [6.         5.79903126]
 [0.         0.        ]
 [1.         0.94395941]
 [2.         1.81000876]
 [3.         2.48699141]
 [4.         3.48494649]
 [5.         5.39528608]
 [0.         0.        ]
 [1.         1.03001487]
 [2.         1.69289148]
 [3.         2.9290936 ]
 [4.         5.06049347]
 [0.         0.        ]
 [1.         0.7937485 ]
 [2.         2.43658066]
 [3.         4.75459814]
 [0.         0.        ]
 [1.         1.9642123 ]
 [2.         4.36236906]
 [0.         0.        ]
 [1.         2.4639945 ]
 [0.         0.        ]]
Correlation: [[1.         0.88902935]
 [0.88902935 1.        ]]
---
[[], [], [], [], [], [], [], [], [], []] [3 6 6 ... 2 1 6] [[ -4.101778  -15.209747 ]
 [-25.354284    3.5359259]
 [ 49.016613   24.105696 ]
 ...
 [ -5.1232452 -13.707982 ]
 [ 35.49648   -34.177315 ]
 [ -1.2881572 -10.299479 ]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/analyse/1_1/latent__1_1.svg
---
length of elements: 408 408
length of 1: 36
length of 2: 43
length of 3: 48
length of 4: 51
length of 5: 52
length of 6: 51
length of 7: 48
length of 8: 43
length of 9: 36
all elements:

[(1, (1, 2, 2)),
 (2, (1, 3, 2)),
 (1, (1, 3, 3)),
 (3, (1, 4, 2)),
 (2, (1, 4, 3)),
 (1, (1, 4, 4)),
 (4, (1, 5, 2)),
 (3, (1, 5, 3)),
 (2, (1, 5, 4)),
 (1, (1, 5, 5)),
 (5, (1, 6, 2)),
 (4, (1, 6, 3)),
 (3, (1, 6, 4)),
 (2, (1, 6, 5)),
 (1, (1, 6, 6)),
 (6, (1, 7, 2)),
 (5, (1, 7, 3)),
 (4, (1, 7, 4)),
 (3, (1, 7, 5)),
 (2, (1, 7, 6)),
 (1, (1, 7, 7)),
 (7, (1, 8, 2)),
 (6, (1, 8, 3)),
 (5, (1, 8, 4)),
 (4, (1, 8, 5)),
 (3, (1, 8, 6)),
 (2, (1, 8, 7)),
 (1, (1, 8, 8)),
 (8, (1, 9, 2)),
 (7, (1, 9, 3)),
 (6, (1, 9, 4)),
 (5, (1, 9, 5)),
 (4, (1, 9, 6)),
 (3, (1, 9, 7)),
 (2, (1, 9, 8)),
 (1, (1, 9, 9)),
 (2, (2, 1, 1)),
 (3, (2, 2, 1)),
 (1, (2, 2, 3)),
 (4, (2, 3, 1)),
 (2, (2, 3, 3)),
 (1, (2, 3, 4)),
 (5, (2, 4, 1)),
 (3, (2, 4, 3)),
 (2, (2, 4, 4)),
 (1, (2, 4, 5)),
 (6, (2, 5, 1)),
 (4, (2, 5, 3)),
 (3, (2, 5, 4)),
 (2, (2, 5, 5)),
 (1, (2, 5, 6)),
 (7, (2, 6, 1)),
 (5, (2, 6, 3)),
 (4, (2, 6, 4)),
 (3, (2, 6, 5)),
 (2, (2, 6, 6)),
 (1, (2, 6, 7)),
 (8, (2, 7, 1)),
 (6, (2, 7, 3)),
 (5, (2, 7, 4)),
 (4, (2, 7, 5)),
 (3, (2, 7, 6)),
 (2, (2, 7, 7)),
 (1, (2, 7, 8)),
 (9, (2, 8, 1)),
 (7, (2, 8, 3)),
 (6, (2, 8, 4)),
 (5, (2, 8, 5)),
 (4, (2, 8, 6)),
 (3, (2, 8, 7)),
 (2, (2, 8, 8)),
 (1, (2, 8, 9)),
 (8, (2, 9, 3)),
 (7, (2, 9, 4)),
 (6, (2, 9, 5)),
 (5, (2, 9, 6)),
 (4, (2, 9, 7)),
 (3, (2, 9, 8)),
 (2, (2, 9, 9)),
 (3, (3, 1, 1)),
 (2, (3, 1, 2)),
 (4, (3, 2, 1)),
 (3, (3, 2, 2)),
 (1, (3, 2, 4)),
 (5, (3, 3, 1)),
 (4, (3, 3, 2)),
 (2, (3, 3, 4)),
 (1, (3, 3, 5)),
 (6, (3, 4, 1)),
 (5, (3, 4, 2)),
 (3, (3, 4, 4)),
 (2, (3, 4, 5)),
 (1, (3, 4, 6)),
 (7, (3, 5, 1)),
 (6, (3, 5, 2)),
 (4, (3, 5, 4)),
 (3, (3, 5, 5)),
 (2, (3, 5, 6)),
 (1, (3, 5, 7)),
 (8, (3, 6, 1)),
 (7, (3, 6, 2)),
 (5, (3, 6, 4)),
 (4, (3, 6, 5)),
 (3, (3, 6, 6)),
 (2, (3, 6, 7)),
 (1, (3, 6, 8)),
 (9, (3, 7, 1)),
 (8, (3, 7, 2)),
 (6, (3, 7, 4)),
 (5, (3, 7, 5)),
 (4, (3, 7, 6)),
 (3, (3, 7, 7)),
 (2, (3, 7, 8)),
 (1, (3, 7, 9)),
 (9, (3, 8, 2)),
 (7, (3, 8, 4)),
 (6, (3, 8, 5)),
 (5, (3, 8, 6)),
 (4, (3, 8, 7)),
 (3, (3, 8, 8)),
 (2, (3, 8, 9)),
 (8, (3, 9, 4)),
 (7, (3, 9, 5)),
 (6, (3, 9, 6)),
 (5, (3, 9, 7)),
 (4, (3, 9, 8)),
 (3, (3, 9, 9)),
 (4, (4, 1, 1)),
 (3, (4, 1, 2)),
 (2, (4, 1, 3)),
 (5, (4, 2, 1)),
 (4, (4, 2, 2)),
 (3, (4, 2, 3)),
 (1, (4, 2, 5)),
 (6, (4, 3, 1)),
 (5, (4, 3, 2)),
 (4, (4, 3, 3)),
 (2, (4, 3, 5)),
 (1, (4, 3, 6)),
 (7, (4, 4, 1)),
 (6, (4, 4, 2)),
 (5, (4, 4, 3)),
 (3, (4, 4, 5)),
 (2, (4, 4, 6)),
 (1, (4, 4, 7)),
 (8, (4, 5, 1)),
 (7, (4, 5, 2)),
 (6, (4, 5, 3)),
 (4, (4, 5, 5)),
 (3, (4, 5, 6)),
 (2, (4, 5, 7)),
 (1, (4, 5, 8)),
 (9, (4, 6, 1)),
 (8, (4, 6, 2)),
 (7, (4, 6, 3)),
 (5, (4, 6, 5)),
 (4, (4, 6, 6)),
 (3, (4, 6, 7)),
 (2, (4, 6, 8)),
 (1, (4, 6, 9)),
 (9, (4, 7, 2)),
 (8, (4, 7, 3)),
 (6, (4, 7, 5)),
 (5, (4, 7, 6)),
 (4, (4, 7, 7)),
 (3, (4, 7, 8)),
 (2, (4, 7, 9)),
 (9, (4, 8, 3)),
 (7, (4, 8, 5)),
 (6, (4, 8, 6)),
 (5, (4, 8, 7)),
 (4, (4, 8, 8)),
 (3, (4, 8, 9)),
 (8, (4, 9, 5)),
 (7, (4, 9, 6)),
 (6, (4, 9, 7)),
 (5, (4, 9, 8)),
 (4, (4, 9, 9)),
 (5, (5, 1, 1)),
 (4, (5, 1, 2)),
 (3, (5, 1, 3)),
 (2, (5, 1, 4)),
 (6, (5, 2, 1)),
 (5, (5, 2, 2)),
 (4, (5, 2, 3)),
 (3, (5, 2, 4)),
 (1, (5, 2, 6)),
 (7, (5, 3, 1)),
 (6, (5, 3, 2)),
 (5, (5, 3, 3)),
 (4, (5, 3, 4)),
 (2, (5, 3, 6)),
 (1, (5, 3, 7)),
 (8, (5, 4, 1)),
 (7, (5, 4, 2)),
 (6, (5, 4, 3)),
 (5, (5, 4, 4)),
 (3, (5, 4, 6)),
 (2, (5, 4, 7)),
 (1, (5, 4, 8)),
 (9, (5, 5, 1)),
 (8, (5, 5, 2)),
 (7, (5, 5, 3)),
 (6, (5, 5, 4)),
 (4, (5, 5, 6)),
 (3, (5, 5, 7)),
 (2, (5, 5, 8)),
 (1, (5, 5, 9)),
 (9, (5, 6, 2)),
 (8, (5, 6, 3)),
 (7, (5, 6, 4)),
 (5, (5, 6, 6)),
 (4, (5, 6, 7)),
 (3, (5, 6, 8)),
 (2, (5, 6, 9)),
 (9, (5, 7, 3)),
 (8, (5, 7, 4)),
 (6, (5, 7, 6)),
 (5, (5, 7, 7)),
 (4, (5, 7, 8)),
 (3, (5, 7, 9)),
 (9, (5, 8, 4)),
 (7, (5, 8, 6)),
 (6, (5, 8, 7)),
 (5, (5, 8, 8)),
 (4, (5, 8, 9)),
 (8, (5, 9, 6)),
 (7, (5, 9, 7)),
 (6, (5, 9, 8)),
 (5, (5, 9, 9)),
 (6, (6, 1, 1)),
 (5, (6, 1, 2)),
 (4, (6, 1, 3)),
 (3, (6, 1, 4)),
 (2, (6, 1, 5)),
 (7, (6, 2, 1)),
 (6, (6, 2, 2)),
 (5, (6, 2, 3)),
 (4, (6, 2, 4)),
 (3, (6, 2, 5)),
 (1, (6, 2, 7)),
 (8, (6, 3, 1)),
 (7, (6, 3, 2)),
 (6, (6, 3, 3)),
 (5, (6, 3, 4)),
 (4, (6, 3, 5)),
 (2, (6, 3, 7)),
 (1, (6, 3, 8)),
 (9, (6, 4, 1)),
 (8, (6, 4, 2)),
 (7, (6, 4, 3)),
 (6, (6, 4, 4)),
 (5, (6, 4, 5)),
 (3, (6, 4, 7)),
 (2, (6, 4, 8)),
 (1, (6, 4, 9)),
 (9, (6, 5, 2)),
 (8, (6, 5, 3)),
 (7, (6, 5, 4)),
 (6, (6, 5, 5)),
 (4, (6, 5, 7)),
 (3, (6, 5, 8)),
 (2, (6, 5, 9)),
 (9, (6, 6, 3)),
 (8, (6, 6, 4)),
 (7, (6, 6, 5)),
 (5, (6, 6, 7)),
 (4, (6, 6, 8)),
 (3, (6, 6, 9)),
 (9, (6, 7, 4)),
 (8, (6, 7, 5)),
 (6, (6, 7, 7)),
 (5, (6, 7, 8)),
 (4, (6, 7, 9)),
 (9, (6, 8, 5)),
 (7, (6, 8, 7)),
 (6, (6, 8, 8)),
 (5, (6, 8, 9)),
 (8, (6, 9, 7)),
 (7, (6, 9, 8)),
 (6, (6, 9, 9)),
 (7, (7, 1, 1)),
 (6, (7, 1, 2)),
 (5, (7, 1, 3)),
 (4, (7, 1, 4)),
 (3, (7, 1, 5)),
 (2, (7, 1, 6)),
 (8, (7, 2, 1)),
 (7, (7, 2, 2)),
 (6, (7, 2, 3)),
 (5, (7, 2, 4)),
 (4, (7, 2, 5)),
 (3, (7, 2, 6)),
 (1, (7, 2, 8)),
 (9, (7, 3, 1)),
 (8, (7, 3, 2)),
 (7, (7, 3, 3)),
 (6, (7, 3, 4)),
 (5, (7, 3, 5)),
 (4, (7, 3, 6)),
 (2, (7, 3, 8)),
 (1, (7, 3, 9)),
 (9, (7, 4, 2)),
 (8, (7, 4, 3)),
 (7, (7, 4, 4)),
 (6, (7, 4, 5)),
 (5, (7, 4, 6)),
 (3, (7, 4, 8)),
 (2, (7, 4, 9)),
 (9, (7, 5, 3)),
 (8, (7, 5, 4)),
 (7, (7, 5, 5)),
 (6, (7, 5, 6)),
 (4, (7, 5, 8)),
 (3, (7, 5, 9)),
 (9, (7, 6, 4)),
 (8, (7, 6, 5)),
 (7, (7, 6, 6)),
 (5, (7, 6, 8)),
 (4, (7, 6, 9)),
 (9, (7, 7, 5)),
 (8, (7, 7, 6)),
 (6, (7, 7, 8)),
 (5, (7, 7, 9)),
 (9, (7, 8, 6)),
 (7, (7, 8, 8)),
 (6, (7, 8, 9)),
 (8, (7, 9, 8)),
 (7, (7, 9, 9)),
 (8, (8, 1, 1)),
 (7, (8, 1, 2)),
 (6, (8, 1, 3)),
 (5, (8, 1, 4)),
 (4, (8, 1, 5)),
 (3, (8, 1, 6)),
 (2, (8, 1, 7)),
 (9, (8, 2, 1)),
 (8, (8, 2, 2)),
 (7, (8, 2, 3)),
 (6, (8, 2, 4)),
 (5, (8, 2, 5)),
 (4, (8, 2, 6)),
 (3, (8, 2, 7)),
 (1, (8, 2, 9)),
 (9, (8, 3, 2)),
 (8, (8, 3, 3)),
 (7, (8, 3, 4)),
 (6, (8, 3, 5)),
 (5, (8, 3, 6)),
 (4, (8, 3, 7)),
 (2, (8, 3, 9)),
 (9, (8, 4, 3)),
 (8, (8, 4, 4)),
 (7, (8, 4, 5)),
 (6, (8, 4, 6)),
 (5, (8, 4, 7)),
 (3, (8, 4, 9)),
 (9, (8, 5, 4)),
 (8, (8, 5, 5)),
 (7, (8, 5, 6)),
 (6, (8, 5, 7)),
 (4, (8, 5, 9)),
 (9, (8, 6, 5)),
 (8, (8, 6, 6)),
 (7, (8, 6, 7)),
 (5, (8, 6, 9)),
 (9, (8, 7, 6)),
 (8, (8, 7, 7)),
 (6, (8, 7, 9)),
 (9, (8, 8, 7)),
 (7, (8, 8, 9)),
 (8, (8, 9, 9)),
 (9, (9, 1, 1)),
 (8, (9, 1, 2)),
 (7, (9, 1, 3)),
 (6, (9, 1, 4)),
 (5, (9, 1, 5)),
 (4, (9, 1, 6)),
 (3, (9, 1, 7)),
 (2, (9, 1, 8)),
 (9, (9, 2, 2)),
 (8, (9, 2, 3)),
 (7, (9, 2, 4)),
 (6, (9, 2, 5)),
 (5, (9, 2, 6)),
 (4, (9, 2, 7)),
 (3, (9, 2, 8)),
 (9, (9, 3, 3)),
 (8, (9, 3, 4)),
 (7, (9, 3, 5)),
 (6, (9, 3, 6)),
 (5, (9, 3, 7)),
 (4, (9, 3, 8)),
 (9, (9, 4, 4)),
 (8, (9, 4, 5)),
 (7, (9, 4, 6)),
 (6, (9, 4, 7)),
 (5, (9, 4, 8)),
 (9, (9, 5, 5)),
 (8, (9, 5, 6)),
 (7, (9, 5, 7)),
 (6, (9, 5, 8)),
 (9, (9, 6, 6)),
 (8, (9, 6, 7)),
 (7, (9, 6, 8)),
 (9, (9, 7, 7)),
 (8, (9, 7, 8)),
 (9, (9, 8, 8))]
i: 1
shape (20,)
i: 2
shape (20,)
i: 3
shape (20,)
i: 4
shape (20,)
i: 5
shape (20,)
i: 6
shape (20,)
i: 7
shape (20,)
i: 8
shape (20,)
i: 9
shape (20,)
mean_all: [None, array([-0.18067895, -2.9562092 ,  0.28372127,  0.43249092,  0.06013045,
       -0.2362379 , -0.03941776,  0.25394988,  0.40672806, -0.43828693,
       -0.67079085, -1.0552717 , -0.04459651,  0.25586164, -0.023298  ,
        0.4714189 ,  0.3275185 , -0.6337628 ,  0.6798839 , -0.11334158],
      dtype=float32), array([-0.74628973, -1.6031001 , -0.28607094,  0.29235968,  0.01186165,
        0.20320359,  0.01190697, -0.13757038, -0.05117816, -0.811527  ,
        1.1888813 , -0.7498902 , -0.05979781,  0.73709524, -0.07713094,
        0.24531727, -0.03367858, -0.58907825,  0.82321054, -0.03333453],
      dtype=float32), array([-0.53520495, -0.61547434, -0.2166044 ,  0.23576355, -0.24127105,
        0.3773419 , -0.01577133, -0.19337443,  0.04571682, -0.6007926 ,
        1.2177948 , -0.18459219, -0.10973644,  0.6493718 , -0.02526597,
        0.11358827, -0.19547561, -0.47127926,  0.7540852 ,  0.12244448],
      dtype=float32), array([-0.3667445 , -0.33093596, -0.12328585, -0.06892098, -0.20803466,
        0.17869423, -0.06212827, -0.10633361, -0.08359025, -0.4377757 ,
        1.177811  , -0.04230629, -0.07970764,  0.49342954, -0.00887225,
       -0.01726889, -0.18676059, -0.13245459,  0.18530203,  0.1383449 ],
      dtype=float32), array([-0.32248062,  0.21128705, -0.03855298, -0.00990452, -0.32495388,
       -0.06988992, -0.11764279,  0.02203464, -0.26252508, -0.2019157 ,
        0.75923526,  0.22584185, -0.05570417,  0.30719694, -0.03187079,
        0.05877527, -0.15592138,  0.19611613,  0.1207798 ,  0.14104973],
      dtype=float32), array([-7.1056046e-02,  5.2280211e-01, -1.7723404e-02, -3.9650577e-01,
       -4.8605022e-01, -2.3982362e-01, -1.8031617e-01,  1.4832151e-01,
       -4.5800957e-01, -4.0873885e-04,  2.2936857e-01,  5.2890623e-01,
       -4.7787402e-02, -6.1712638e-02, -9.2886291e-02, -2.0241022e-01,
       -1.6581799e-01,  1.3346890e-01,  8.9253122e-03,  1.3695003e-01],
      dtype=float32), array([ 0.09039406,  0.7850681 ,  0.14173783, -0.6305814 , -0.34150952,
       -0.23926508, -0.23904888,  0.2744591 , -0.4070197 ,  0.1761374 ,
       -0.14678408,  0.8322952 , -0.03028766, -0.2240783 , -0.13266084,
       -0.14260119, -0.10037729,  0.36484298, -0.22674419,  0.08976338],
      dtype=float32), array([ 0.561743  ,  1.1213408 ,  0.84064764, -0.7379262 , -0.3145283 ,
        0.7906005 , -0.46116966,  0.4469023 ,  0.7722951 ,  0.22637992,
       -0.44625407,  0.81589264, -0.28315595, -0.5449942 , -0.20385113,
       -0.11199337,  0.09161308,  0.6190322 , -0.57972646,  0.07579885],
      dtype=float32), array([ 0.913801  ,  1.4012599 ,  1.6548947 , -0.9218616 , -0.4271235 ,
        2.0787766 , -0.6973788 ,  0.5757206 ,  2.464768  ,  0.5745497 ,
       -0.72349423,  1.1964839 , -0.53858423, -0.71495795, -0.26299503,
       -0.1280441 ,  0.40428954,  0.5540181 , -0.7095254 ,  0.01623149],
      dtype=float32)]
---
Target calculation: 1+1-1
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0 64  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[ 0.  0.  0.  0.  0.  0.  1.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.1 -0.2 -0.0  0.3  0.4 -0.4 -0.7 -1.1 -0.0  0.3 -0.0  0.5  0.3 -0.6  0.7 -0.1 
-0.7 -1.6 -0.3  0.3  0.0  0.2  0.0 -0.1 -0.1 -0.8  1.2 -0.7 -0.1  0.7 -0.1  0.2 -0.0 -0.6  0.8 -0.0 
-0.5 -0.6 -0.2  0.2 -0.2  0.4 -0.0 -0.2  0.0 -0.6  1.2 -0.2 -0.1  0.6 -0.0  0.1 -0.2 -0.5  0.8  0.1 
-0.4 -0.3 -0.1 -0.1 -0.2  0.2 -0.1 -0.1 -0.1 -0.4  1.2 -0.0 -0.1  0.5 -0.0 -0.0 -0.2 -0.1  0.2  0.1 
-0.3  0.2 -0.0 -0.0 -0.3 -0.1 -0.1  0.0 -0.3 -0.2  0.8  0.2 -0.1  0.3 -0.0  0.1 -0.2  0.2  0.1  0.1 
-0.1  0.5 -0.0 -0.4 -0.5 -0.2 -0.2  0.1 -0.5 -0.0  0.2  0.5 -0.0 -0.1 -0.1 -0.2 -0.2  0.1  0.0  0.1 
 0.1  0.8  0.1 -0.6 -0.3 -0.2 -0.2  0.3 -0.4  0.2 -0.1  0.8 -0.0 -0.2 -0.1 -0.1 -0.1  0.4 -0.2  0.1 
 0.6  1.1  0.8 -0.7 -0.3  0.8 -0.5  0.4  0.8  0.2 -0.4  0.8 -0.3 -0.5 -0.2 -0.1  0.1  0.6 -0.6  0.1 
 0.9  1.4  1.7 -0.9 -0.4  2.1 -0.7  0.6  2.5  0.6 -0.7  1.2 -0.5 -0.7 -0.3 -0.1  0.4  0.6 -0.7  0.0 
Minimum distance of calculation. 
true answer: 1 
indices: 1 
distance: 0.0
---
Target calculation: 1+9-8
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0 64  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  1.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.1 -0.2 -0.0  0.3  0.4 -0.4 -0.7 -1.1 -0.0  0.3 -0.0  0.5  0.3 -0.6  0.7 -0.1 
-0.7 -1.6 -0.3  0.3  0.0  0.2  0.0 -0.1 -0.1 -0.8  1.2 -0.7 -0.1  0.7 -0.1  0.2 -0.0 -0.6  0.8 -0.0 
-0.5 -0.6 -0.2  0.2 -0.2  0.4 -0.0 -0.2  0.0 -0.6  1.2 -0.2 -0.1  0.6 -0.0  0.1 -0.2 -0.5  0.8  0.1 
-0.4 -0.3 -0.1 -0.1 -0.2  0.2 -0.1 -0.1 -0.1 -0.4  1.2 -0.0 -0.1  0.5 -0.0 -0.0 -0.2 -0.1  0.2  0.1 
-0.3  0.2 -0.0 -0.0 -0.3 -0.1 -0.1  0.0 -0.3 -0.2  0.8  0.2 -0.1  0.3 -0.0  0.1 -0.2  0.2  0.1  0.1 
-0.1  0.5 -0.0 -0.4 -0.5 -0.2 -0.2  0.1 -0.5 -0.0  0.2  0.5 -0.0 -0.1 -0.1 -0.2 -0.2  0.1  0.0  0.1 
 0.1  0.8  0.1 -0.6 -0.3 -0.2 -0.2  0.3 -0.4  0.2 -0.1  0.8 -0.0 -0.2 -0.1 -0.1 -0.1  0.4 -0.2  0.1 
 0.6  1.1  0.8 -0.7 -0.3  0.8 -0.5  0.4  0.8  0.2 -0.4  0.8 -0.3 -0.5 -0.2 -0.1  0.1  0.6 -0.6  0.1 
 0.9  1.4  1.7 -0.9 -0.4  2.1 -0.7  0.6  2.5  0.6 -0.7  1.2 -0.5 -0.7 -0.3 -0.1  0.4  0.6 -0.7  0.0 
Minimum distance of calculation. 
true answer: 2 
indices: 1 
distance: 2.4639945
---
Target calculation: 1+8-4
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0 64  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  1.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.1 -0.2 -0.0  0.3  0.4 -0.4 -0.7 -1.1 -0.0  0.3 -0.0  0.5  0.3 -0.6  0.7 -0.1 
-0.7 -1.6 -0.3  0.3  0.0  0.2  0.0 -0.1 -0.1 -0.8  1.2 -0.7 -0.1  0.7 -0.1  0.2 -0.0 -0.6  0.8 -0.0 
-0.5 -0.6 -0.2  0.2 -0.2  0.4 -0.0 -0.2  0.0 -0.6  1.2 -0.2 -0.1  0.6 -0.0  0.1 -0.2 -0.5  0.8  0.1 
-0.4 -0.3 -0.1 -0.1 -0.2  0.2 -0.1 -0.1 -0.1 -0.4  1.2 -0.0 -0.1  0.5 -0.0 -0.0 -0.2 -0.1  0.2  0.1 
-0.3  0.2 -0.0 -0.0 -0.3 -0.1 -0.1  0.0 -0.3 -0.2  0.8  0.2 -0.1  0.3 -0.0  0.1 -0.2  0.2  0.1  0.1 
-0.1  0.5 -0.0 -0.4 -0.5 -0.2 -0.2  0.1 -0.5 -0.0  0.2  0.5 -0.0 -0.1 -0.1 -0.2 -0.2  0.1  0.0  0.1 
 0.1  0.8  0.1 -0.6 -0.3 -0.2 -0.2  0.3 -0.4  0.2 -0.1  0.8 -0.0 -0.2 -0.1 -0.1 -0.1  0.4 -0.2  0.1 
 0.6  1.1  0.8 -0.7 -0.3  0.8 -0.5  0.4  0.8  0.2 -0.4  0.8 -0.3 -0.5 -0.2 -0.1  0.1  0.6 -0.6  0.1 
 0.9  1.4  1.7 -0.9 -0.4  2.1 -0.7  0.6  2.5  0.6 -0.7  1.2 -0.5 -0.7 -0.3 -0.1  0.4  0.6 -0.7  0.0 
Minimum distance of calculation. 
true answer: 5 
indices: 1 
distance: 3.4849465
---
Target calculation: 2+7-1
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0 64  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  1.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.1 -0.2 -0.0  0.3  0.4 -0.4 -0.7 -1.1 -0.0  0.3 -0.0  0.5  0.3 -0.6  0.7 -0.1 
-0.7 -1.6 -0.3  0.3  0.0  0.2  0.0 -0.1 -0.1 -0.8  1.2 -0.7 -0.1  0.7 -0.1  0.2 -0.0 -0.6  0.8 -0.0 
-0.5 -0.6 -0.2  0.2 -0.2  0.4 -0.0 -0.2  0.0 -0.6  1.2 -0.2 -0.1  0.6 -0.0  0.1 -0.2 -0.5  0.8  0.1 
-0.4 -0.3 -0.1 -0.1 -0.2  0.2 -0.1 -0.1 -0.1 -0.4  1.2 -0.0 -0.1  0.5 -0.0 -0.0 -0.2 -0.1  0.2  0.1 
-0.3  0.2 -0.0 -0.0 -0.3 -0.1 -0.1  0.0 -0.3 -0.2  0.8  0.2 -0.1  0.3 -0.0  0.1 -0.2  0.2  0.1  0.1 
-0.1  0.5 -0.0 -0.4 -0.5 -0.2 -0.2  0.1 -0.5 -0.0  0.2  0.5 -0.0 -0.1 -0.1 -0.2 -0.2  0.1  0.0  0.1 
 0.1  0.8  0.1 -0.6 -0.3 -0.2 -0.2  0.3 -0.4  0.2 -0.1  0.8 -0.0 -0.2 -0.1 -0.1 -0.1  0.4 -0.2  0.1 
 0.6  1.1  0.8 -0.7 -0.3  0.8 -0.5  0.4  0.8  0.2 -0.4  0.8 -0.3 -0.5 -0.2 -0.1  0.1  0.6 -0.6  0.1 
 0.9  1.4  1.7 -0.9 -0.4  2.1 -0.7  0.6  2.5  0.6 -0.7  1.2 -0.5 -0.7 -0.3 -0.1  0.4  0.6 -0.7  0.0 
Minimum distance of calculation. 
true answer: 8 
indices: 6 
distance: 2.5380344
---
Target calculation: 2+7-2
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])
Accuracy (count): tensor(64) 
Accuracy (ratio) tensor(1.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0 64  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  1.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.1 -0.2 -0.0  0.3  0.4 -0.4 -0.7 -1.1 -0.0  0.3 -0.0  0.5  0.3 -0.6  0.7 -0.1 
-0.7 -1.6 -0.3  0.3  0.0  0.2  0.0 -0.1 -0.1 -0.8  1.2 -0.7 -0.1  0.7 -0.1  0.2 -0.0 -0.6  0.8 -0.0 
-0.5 -0.6 -0.2  0.2 -0.2  0.4 -0.0 -0.2  0.0 -0.6  1.2 -0.2 -0.1  0.6 -0.0  0.1 -0.2 -0.5  0.8  0.1 
-0.4 -0.3 -0.1 -0.1 -0.2  0.2 -0.1 -0.1 -0.1 -0.4  1.2 -0.0 -0.1  0.5 -0.0 -0.0 -0.2 -0.1  0.2  0.1 
-0.3  0.2 -0.0 -0.0 -0.3 -0.1 -0.1  0.0 -0.3 -0.2  0.8  0.2 -0.1  0.3 -0.0  0.1 -0.2  0.2  0.1  0.1 
-0.1  0.5 -0.0 -0.4 -0.5 -0.2 -0.2  0.1 -0.5 -0.0  0.2  0.5 -0.0 -0.1 -0.1 -0.2 -0.2  0.1  0.0  0.1 
 0.1  0.8  0.1 -0.6 -0.3 -0.2 -0.2  0.3 -0.4  0.2 -0.1  0.8 -0.0 -0.2 -0.1 -0.1 -0.1  0.4 -0.2  0.1 
 0.6  1.1  0.8 -0.7 -0.3  0.8 -0.5  0.4  0.8  0.2 -0.4  0.8 -0.3 -0.5 -0.2 -0.1  0.1  0.6 -0.6  0.1 
 0.9  1.4  1.7 -0.9 -0.4  2.1 -0.7  0.6  2.5  0.6 -0.7  1.2 -0.5 -0.7 -0.3 -0.1  0.4  0.6 -0.7  0.0 
Minimum distance of calculation. 
true answer: 7 
indices: 7 
distance: 3.414285e-08
---
Target calculation: 3+3-3
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0 64  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  1.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.1 -0.2 -0.0  0.3  0.4 -0.4 -0.7 -1.1 -0.0  0.3 -0.0  0.5  0.3 -0.6  0.7 -0.1 
-0.7 -1.6 -0.3  0.3  0.0  0.2  0.0 -0.1 -0.1 -0.8  1.2 -0.7 -0.1  0.7 -0.1  0.2 -0.0 -0.6  0.8 -0.0 
-0.5 -0.6 -0.2  0.2 -0.2  0.4 -0.0 -0.2  0.0 -0.6  1.2 -0.2 -0.1  0.6 -0.0  0.1 -0.2 -0.5  0.8  0.1 
-0.4 -0.3 -0.1 -0.1 -0.2  0.2 -0.1 -0.1 -0.1 -0.4  1.2 -0.0 -0.1  0.5 -0.0 -0.0 -0.2 -0.1  0.2  0.1 
-0.3  0.2 -0.0 -0.0 -0.3 -0.1 -0.1  0.0 -0.3 -0.2  0.8  0.2 -0.1  0.3 -0.0  0.1 -0.2  0.2  0.1  0.1 
-0.1  0.5 -0.0 -0.4 -0.5 -0.2 -0.2  0.1 -0.5 -0.0  0.2  0.5 -0.0 -0.1 -0.1 -0.2 -0.2  0.1  0.0  0.1 
 0.1  0.8  0.1 -0.6 -0.3 -0.2 -0.2  0.3 -0.4  0.2 -0.1  0.8 -0.0 -0.2 -0.1 -0.1 -0.1  0.4 -0.2  0.1 
 0.6  1.1  0.8 -0.7 -0.3  0.8 -0.5  0.4  0.8  0.2 -0.4  0.8 -0.3 -0.5 -0.2 -0.1  0.1  0.6 -0.6  0.1 
 0.9  1.4  1.7 -0.9 -0.4  2.1 -0.7  0.6  2.5  0.6 -0.7  1.2 -0.5 -0.7 -0.3 -0.1  0.4  0.6 -0.7  0.0 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 0.0
---
Target calculation: 3+5-2
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0 64  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  1.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.1 -0.2 -0.0  0.3  0.4 -0.4 -0.7 -1.1 -0.0  0.3 -0.0  0.5  0.3 -0.6  0.7 -0.1 
-0.7 -1.6 -0.3  0.3  0.0  0.2  0.0 -0.1 -0.1 -0.8  1.2 -0.7 -0.1  0.7 -0.1  0.2 -0.0 -0.6  0.8 -0.0 
-0.5 -0.6 -0.2  0.2 -0.2  0.4 -0.0 -0.2  0.0 -0.6  1.2 -0.2 -0.1  0.6 -0.0  0.1 -0.2 -0.5  0.8  0.1 
-0.4 -0.3 -0.1 -0.1 -0.2  0.2 -0.1 -0.1 -0.1 -0.4  1.2 -0.0 -0.1  0.5 -0.0 -0.0 -0.2 -0.1  0.2  0.1 
-0.3  0.2 -0.0 -0.0 -0.3 -0.1 -0.1  0.0 -0.3 -0.2  0.8  0.2 -0.1  0.3 -0.0  0.1 -0.2  0.2  0.1  0.1 
-0.1  0.5 -0.0 -0.4 -0.5 -0.2 -0.2  0.1 -0.5 -0.0  0.2  0.5 -0.0 -0.1 -0.1 -0.2 -0.2  0.1  0.0  0.1 
 0.1  0.8  0.1 -0.6 -0.3 -0.2 -0.2  0.3 -0.4  0.2 -0.1  0.8 -0.0 -0.2 -0.1 -0.1 -0.1  0.4 -0.2  0.1 
 0.6  1.1  0.8 -0.7 -0.3  0.8 -0.5  0.4  0.8  0.2 -0.4  0.8 -0.3 -0.5 -0.2 -0.1  0.1  0.6 -0.6  0.1 
 0.9  1.4  1.7 -0.9 -0.4  2.1 -0.7  0.6  2.5  0.6 -0.7  1.2 -0.5 -0.7 -0.3 -0.1  0.4  0.6 -0.7  0.0 
Minimum distance of calculation. 
true answer: 6 
indices: 6 
distance: 1.1801559
---
Target calculation: 3+6-3
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0 64  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  1.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.1 -0.2 -0.0  0.3  0.4 -0.4 -0.7 -1.1 -0.0  0.3 -0.0  0.5  0.3 -0.6  0.7 -0.1 
-0.7 -1.6 -0.3  0.3  0.0  0.2  0.0 -0.1 -0.1 -0.8  1.2 -0.7 -0.1  0.7 -0.1  0.2 -0.0 -0.6  0.8 -0.0 
-0.5 -0.6 -0.2  0.2 -0.2  0.4 -0.0 -0.2  0.0 -0.6  1.2 -0.2 -0.1  0.6 -0.0  0.1 -0.2 -0.5  0.8  0.1 
-0.4 -0.3 -0.1 -0.1 -0.2  0.2 -0.1 -0.1 -0.1 -0.4  1.2 -0.0 -0.1  0.5 -0.0 -0.0 -0.2 -0.1  0.2  0.1 
-0.3  0.2 -0.0 -0.0 -0.3 -0.1 -0.1  0.0 -0.3 -0.2  0.8  0.2 -0.1  0.3 -0.0  0.1 -0.2  0.2  0.1  0.1 
-0.1  0.5 -0.0 -0.4 -0.5 -0.2 -0.2  0.1 -0.5 -0.0  0.2  0.5 -0.0 -0.1 -0.1 -0.2 -0.2  0.1  0.0  0.1 
 0.1  0.8  0.1 -0.6 -0.3 -0.2 -0.2  0.3 -0.4  0.2 -0.1  0.8 -0.0 -0.2 -0.1 -0.1 -0.1  0.4 -0.2  0.1 
 0.6  1.1  0.8 -0.7 -0.3  0.8 -0.5  0.4  0.8  0.2 -0.4  0.8 -0.3 -0.5 -0.2 -0.1  0.1  0.6 -0.6  0.1 
 0.9  1.4  1.7 -0.9 -0.4  2.1 -0.7  0.6  2.5  0.6 -0.7  1.2 -0.5 -0.7 -0.3 -0.1  0.4  0.6 -0.7  0.0 
Minimum distance of calculation. 
true answer: 6 
indices: 6 
distance: 4.653818e-08
---
Target calculation: 5+3-5
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0 64  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  1.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.1 -0.2 -0.0  0.3  0.4 -0.4 -0.7 -1.1 -0.0  0.3 -0.0  0.5  0.3 -0.6  0.7 -0.1 
-0.7 -1.6 -0.3  0.3  0.0  0.2  0.0 -0.1 -0.1 -0.8  1.2 -0.7 -0.1  0.7 -0.1  0.2 -0.0 -0.6  0.8 -0.0 
-0.5 -0.6 -0.2  0.2 -0.2  0.4 -0.0 -0.2  0.0 -0.6  1.2 -0.2 -0.1  0.6 -0.0  0.1 -0.2 -0.5  0.8  0.1 
-0.4 -0.3 -0.1 -0.1 -0.2  0.2 -0.1 -0.1 -0.1 -0.4  1.2 -0.0 -0.1  0.5 -0.0 -0.0 -0.2 -0.1  0.2  0.1 
-0.3  0.2 -0.0 -0.0 -0.3 -0.1 -0.1  0.0 -0.3 -0.2  0.8  0.2 -0.1  0.3 -0.0  0.1 -0.2  0.2  0.1  0.1 
-0.1  0.5 -0.0 -0.4 -0.5 -0.2 -0.2  0.1 -0.5 -0.0  0.2  0.5 -0.0 -0.1 -0.1 -0.2 -0.2  0.1  0.0  0.1 
 0.1  0.8  0.1 -0.6 -0.3 -0.2 -0.2  0.3 -0.4  0.2 -0.1  0.8 -0.0 -0.2 -0.1 -0.1 -0.1  0.4 -0.2  0.1 
 0.6  1.1  0.8 -0.7 -0.3  0.8 -0.5  0.4  0.8  0.2 -0.4  0.8 -0.3 -0.5 -0.2 -0.1  0.1  0.6 -0.6  0.1 
 0.9  1.4  1.7 -0.9 -0.4  2.1 -0.7  0.6  2.5  0.6 -0.7  1.2 -0.5 -0.7 -0.3 -0.1  0.4  0.6 -0.7  0.0 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 7.00414e-08
---
Target calculation: 9+7-8
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0 64  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  1.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.1 -0.2 -0.0  0.3  0.4 -0.4 -0.7 -1.1 -0.0  0.3 -0.0  0.5  0.3 -0.6  0.7 -0.1 
-0.7 -1.6 -0.3  0.3  0.0  0.2  0.0 -0.1 -0.1 -0.8  1.2 -0.7 -0.1  0.7 -0.1  0.2 -0.0 -0.6  0.8 -0.0 
-0.5 -0.6 -0.2  0.2 -0.2  0.4 -0.0 -0.2  0.0 -0.6  1.2 -0.2 -0.1  0.6 -0.0  0.1 -0.2 -0.5  0.8  0.1 
-0.4 -0.3 -0.1 -0.1 -0.2  0.2 -0.1 -0.1 -0.1 -0.4  1.2 -0.0 -0.1  0.5 -0.0 -0.0 -0.2 -0.1  0.2  0.1 
-0.3  0.2 -0.0 -0.0 -0.3 -0.1 -0.1  0.0 -0.3 -0.2  0.8  0.2 -0.1  0.3 -0.0  0.1 -0.2  0.2  0.1  0.1 
-0.1  0.5 -0.0 -0.4 -0.5 -0.2 -0.2  0.1 -0.5 -0.0  0.2  0.5 -0.0 -0.1 -0.1 -0.2 -0.2  0.1  0.0  0.1 
 0.1  0.8  0.1 -0.6 -0.3 -0.2 -0.2  0.3 -0.4  0.2 -0.1  0.8 -0.0 -0.2 -0.1 -0.1 -0.1  0.4 -0.2  0.1 
 0.6  1.1  0.8 -0.7 -0.3  0.8 -0.5  0.4  0.8  0.2 -0.4  0.8 -0.3 -0.5 -0.2 -0.1  0.1  0.6 -0.6  0.1 
 0.9  1.4  1.7 -0.9 -0.4  2.1 -0.7  0.6  2.5  0.6 -0.7  1.2 -0.5 -0.7 -0.3 -0.1  0.4  0.6 -0.7  0.0 
Minimum distance of calculation. 
true answer: 8 
indices: 8 
distance: 0.91023844
---
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 7, 6, 5,
        4, 3, 2, 1, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1, 4, 2, 1, 5, 3, 2, 1, 6, 4,
        3, 2, 1, 7, 5, 4, 3, 2, 1, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3, 2, 1,
        8, 7, 6, 5, 4, 3, 2, 3, 2, 4, 3, 1, 5, 4, 2, 1, 6, 5, 3, 2, 1, 7, 6, 4,
        3, 2, 1, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3,
        2, 8, 7, 6, 5, 4, 3, 4, 3, 2, 5, 4, 3, 1, 6, 5, 4, 2, 1, 7, 6, 5, 3, 2,
        1, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 9,
        7, 6, 5, 4, 3, 8, 7, 6, 5, 4, 5, 4, 3, 2, 6, 5, 4, 3, 1, 7, 6, 5, 4, 2,
        1, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 9,
        8, 6, 5, 4, 3, 9, 7, 6, 5, 4, 8, 7, 6, 5, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3,
        1, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 9,
        8, 7, 5, 4, 3, 9, 8, 6, 5, 4, 9, 7, 6, 5, 8, 7, 6, 7, 6, 5, 4, 3, 2, 8,
        7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 9, 8, 7,
        6, 4, 3, 9, 8, 7, 5, 4, 9, 8, 6, 5, 9, 7, 6, 8, 7, 8, 7, 6, 5, 4, 3, 2,
        9, 8, 7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 9, 8, 7, 6, 5, 3, 9, 8, 7,
        6, 4, 9, 8, 7, 5, 9, 8, 6, 9, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 9, 8, 7, 6,
        5, 4, 3, 9, 8, 7, 6, 5, 4, 9, 8, 7, 6, 5, 9, 8, 7, 6, 9, 8, 7, 9, 8, 9])
Accuracy (count): tensor(48) 
Accuracy (ratio) tensor(0.1176)
Accuracy:
 [[ 0  0  0  0  0  0 36  0  0]
 [ 0  0  0  0  0  0 43  0  0]
 [ 0  0  0  0  0  0 48  0  0]
 [ 0  0  0  0  0  0 51  0  0]
 [ 0  0  0  0  0  0 52  0  0]
 [ 0  0  0  0  0  0 51  0  0]
 [ 0  0  0  0  0  0 48  0  0]
 [ 0  0  0  0  0  0 43  0  0]
 [ 0  0  0  0  0  0 36  0  0]]
Accuracy:
 [[0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0.]]
results (all): {'reconst_1x1_avg': 0.1015625, 'reconst_1x1_all': nan, 'cross_0x1_avg': 0.1015625, 'cross_0x1_all': nan, 'cluster_avg': 0.04382989, 'cluster_all': array([-0.01048063, -0.00758996, -0.01514463, ...,  0.05286874,
        0.17879868, -0.00507671], dtype=float32), 'magnitude_avg': 0.8890293505789011, 'magnitude_all': 0.8890293505789011, 'tsne-2d_avg': nan, 'tsne-2d_all': nan, 'mathematics_1+1-1_avg': 0.0, 'mathematics_1+1-1_all': nan, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+9-8_all': nan, 'mathematics_1+8-4_avg': 0.0, 'mathematics_1+8-4_all': nan, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-1_all': nan, 'mathematics_2+7-2_avg': 1.0, 'mathematics_2+7-2_all': nan, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+3-3_all': nan, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+5-2_all': nan, 'mathematics_3+6-3_avg': 0.0, 'mathematics_3+6-3_all': nan, 'mathematics_5+3-5_avg': 0.0, 'mathematics_5+3-5_all': nan, 'mathematics_9+7-8_avg': 0.0, 'mathematics_9+7-8_all': nan, 'mathematics_avg': 0.11764705926179886, 'mathematics_all': nan}
results (only averages): {'id': 'test_mmvae_cmnist_oscn', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 1, 'target_property': 1, 'reconst_1x1_avg': 0.1015625, 'cross_0x1_avg': 0.1015625, 'cluster_avg': 0.04382989, 'magnitude_avg': 0.8890293505789011, 'tsne-2d_avg': nan, 'mathematics_1+1-1_avg': 0.0, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+8-4_avg': 0.0, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-2_avg': 1.0, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+6-3_avg': 0.0, 'mathematics_5+3-5_avg': 0.0, 'mathematics_9+7-8_avg': 0.0, 'mathematics_avg': 0.11764705926179886}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([8, 8, 9, 1, 1, 8, 4, 4, 7, 2, 4, 1, 1, 1, 2, 8, 9, 7, 9, 8, 7, 4, 5, 9,
        1, 3, 1, 7, 1, 5, 4, 6, 6, 6, 6, 2, 2, 9, 1, 6, 1, 4, 5, 2, 8, 5, 8, 5,
        8, 1, 3, 5, 4, 9, 1, 1, 7, 5, 3, 2, 5, 4, 8, 2, 3, 2, 9, 9, 7, 8, 9, 8,
        8, 7, 4, 5, 5, 2, 9, 1, 3, 1, 7, 7, 9, 9, 1, 2, 9, 4, 9, 4, 6, 5, 8, 1,
        5, 3, 2, 5, 2, 9, 3, 7, 4, 5, 3, 9, 2, 8, 7, 3, 7, 7, 7, 7, 7, 1, 3, 4,
        7, 3, 9, 3, 1, 9, 4, 3]), ['r8j', 'w8j', 'b9j', 'w1t', 'g1j', 'g8t', 'b4j', 'r4t', 'b7s', 'g2t', 'r4s', 'w1j', 'w1t', 'r1t', 'w2t', 'w8s', 'b9j', 'w7j', 'r9s', 'b8t', 'g7j', 'w4t', 'w5t', 'w9t', 'g1j', 'g3t', 'b1j', 'b7j', 'b1s', 'g5j', 'r4s', 'b6s', 'g6s', 'r6s', 'w6t', 'b2s', 'g2s', 'g9j', 'b1s', 'r6j', 'g1j', 'b4j', 'w5s', 'w2s', 'w8s', 'r5s', 'b8t', 'g5t', 'w8j', 'w1t', 'r3t', 'g5s', 'g4s', 'b9t', 'r1t', 'g1s', 'w7s', 'b5s', 'r3s', 'g2t', 'r5j', 'g4t', 'b8t', 'g2t', 'r3t', 'g2s', 'w9j', 'g9t', 'b7t', 'b8j', 'b9j', 'r8s', 'b8t', 'b7t', 'g4s', 'b5j', 'g5j', 'r2s', 'b9t', 'g1j', 'r3s', 'g1j', 'w7t', 'b7t', 'r9s', 'g9s', 'g1j', 'w2s', 'b9t', 'g4t', 'g9j', 'g4j', 'b6s', 'b5j', 'w8t', 'g1s', 'w5j', 'w3t', 'g2j', 'g5s', 'w2j', 'g9t', 'r3j', 'r7j', 'w4j', 'g5t', 'g3j', 'w9j', 'r2t', 'g8s', 'b7j', 'b3j', 'g7j', 'r7j', 'w7s', 'b7t', 'r7s', 'g1t', 'r3t', 'b4j', 'g7j', 'w3j', 'r9j', 'g3j', 'g1s', 'w9s', 'r4j', 'g3s']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 1 
Target property: 2 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/analyse/1_2 
Number of category 3 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2} 
Start index: 0 
End index: 3 
withzero: False
---
Silhouette values: [0.2303487  0.21393816 0.17880413 ... 0.1483532  0.07498226 0.01724675]
Average of silhouette coef: 0.09049657
---

Distance matrix between labels.
  0   1   2
0 0.0 3.1 3.3 
1 3.1 0.0 3.2 
2 3.3 3.2 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 1] 
Latent embbeding: [3.143038, 3.2726147, 3.1792753] 
Flatten array: [[0.         0.        ]
 [1.         3.14303803]
 [2.         3.27261472]
 [0.         0.        ]
 [1.         3.17927527]
 [0.         0.        ]]
Correlation: [[1.         0.96257259]
 [0.96257259 1.        ]]
---
[[], [], []] [0 0 0 ... 1 2 1] [[-56.513393   -18.802855  ]
 [-21.491571   -30.023153  ]
 [ 51.30311     -9.667743  ]
 ...
 [ 31.352827   -32.852234  ]
 [ 73.045845     0.54534185]
 [ 13.395403    -1.9129536 ]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/analyse/1_2/latent__1_2.svg
results (all): {'cluster_avg': 0.09049657, 'cluster_all': array([0.2303487 , 0.21393816, 0.17880413, ..., 0.1483532 , 0.07498226,
       0.01724675], dtype=float32), 'magnitude_avg': 0.9625725917786846, 'magnitude_all': 0.9625725917786846, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'test_mmvae_cmnist_oscn', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 1, 'target_property': 2, 'cluster_avg': 0.09049657, 'magnitude_avg': 0.9625725917786846, 'tsne-2d_avg': nan}
Arguments (initial):
{'device': 'cuda',
 'experiment': 'test_loop_1',
 'no_cuda': False,
 'pretrained_path': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'synthesize'}
args are updated using pretrained_path:
 {'experiment': 'test_loop_1', 'model': 'VAE_OSCN', 'run_type': 'train', 'seed': 4, 'num_hidden_layers': 2, 'use_conditional': False, 'use_cnn': False, 'latent_dim': 20, 'obj': 'elbo', 'batch_size': 128, 'epochs': 3, 'K': 20, 'learn_prior': False, 'llik_scaling': 0.0, 'logp': False, 'looser': False, 'print_freq': 100, 'no_analytics': False, 'no_cuda': False, 'run_id': 'test_vae_oscn', 'pretrained_path': '', 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn', 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train'}
Parameters were loaded for classifier
Run ID:
 test_vae_oscn
Run Directory:
 ./rslt/test_loop_1/VAE_OSCN/test_vae_oscn
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
run_ids_dict was automatically constructed.
run_ids_dict for synthesized: {'VAE_CMNIST': ['test_vae_cmnist', 'vae_cmnist_seed_3', 'vae_cmnist_seed_4'], 'VAE_OSCN': ['vae_oscn_seed_4', 'vae_oscn_seed_3', 'test_vae_oscn'], 'MMVAE_CMNIST_OSCN': ['test_mmvae_cmnist_oscn', 'mmvae_cmnist_oscn_seed_3', 'mmvae_cmnist_oscn_seed_4']}
{'VAE_CMNIST': ['test_vae_cmnist', 'vae_cmnist_seed_3', 'vae_cmnist_seed_4'], 'VAE_OSCN': ['vae_oscn_seed_4', 'vae_oscn_seed_3', 'test_vae_oscn'], 'MMVAE_CMNIST_OSCN': ['test_mmvae_cmnist_oscn', 'mmvae_cmnist_oscn_seed_3', 'mmvae_cmnist_oscn_seed_4']}
./rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_3/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_4/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_4/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_3/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/VAE_OSCN/test_vae_oscn/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/analyse/1_1/analyse_result.csv was loaded.
./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3/analyse/1_1/analyse_result.csv was loaded.
./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4/analyse/1_1/analyse_result.csv was loaded.
Before converting:
                           id  ... reconst_1x1_avg
0            test_vae_cmnist  ...             NaN
1          vae_cmnist_seed_3  ...             NaN
2          vae_cmnist_seed_4  ...             NaN
3            vae_oscn_seed_4  ...             NaN
4            vae_oscn_seed_3  ...             NaN
5              test_vae_oscn  ...             NaN
6     test_mmvae_cmnist_oscn  ...             NaN
7     test_mmvae_cmnist_oscn  ...        0.101562
8   mmvae_cmnist_oscn_seed_3  ...             NaN
9   mmvae_cmnist_oscn_seed_3  ...        0.109375
10  mmvae_cmnist_oscn_seed_4  ...             NaN
11  mmvae_cmnist_oscn_seed_4  ...        0.125000

[12 rows x 4 columns]
After converting:
                           id  ... reconst_1x1_avg
0            test_vae_cmnist  ...             NaN
1          vae_cmnist_seed_3  ...             NaN
2          vae_cmnist_seed_4  ...             NaN
3            vae_oscn_seed_4  ...        0.062500
4            vae_oscn_seed_3  ...        0.101562
5              test_vae_oscn  ...        0.062500
6     test_mmvae_cmnist_oscn  ...             NaN
7     test_mmvae_cmnist_oscn  ...        0.101562
8   mmvae_cmnist_oscn_seed_3  ...             NaN
9   mmvae_cmnist_oscn_seed_3  ...        0.109375
10  mmvae_cmnist_oscn_seed_4  ...             NaN
11  mmvae_cmnist_oscn_seed_4  ...        0.125000

[12 rows x 4 columns]
===
analyzed data (all):
                          id         model_name  ...  reconst_1x1_avg  cross_0x1_avg
0            test_vae_cmnist         VAE_CMNIST  ...              NaN            NaN
1          vae_cmnist_seed_3         VAE_CMNIST  ...              NaN            NaN
2          vae_cmnist_seed_4         VAE_CMNIST  ...              NaN            NaN
3            vae_oscn_seed_4           VAE_OSCN  ...         0.062500            NaN
4            vae_oscn_seed_3           VAE_OSCN  ...         0.101562            NaN
5              test_vae_oscn           VAE_OSCN  ...         0.062500            NaN
6     test_mmvae_cmnist_oscn  MMVAE_CMNIST_OSCN  ...              NaN            NaN
7     test_mmvae_cmnist_oscn  MMVAE_CMNIST_OSCN  ...         0.101562       0.101562
8   mmvae_cmnist_oscn_seed_3  MMVAE_CMNIST_OSCN  ...              NaN            NaN
9   mmvae_cmnist_oscn_seed_3  MMVAE_CMNIST_OSCN  ...         0.109375       0.109375
10  mmvae_cmnist_oscn_seed_4  MMVAE_CMNIST_OSCN  ...              NaN            NaN
11  mmvae_cmnist_oscn_seed_4  MMVAE_CMNIST_OSCN  ...         0.125000       0.085938

[12 rows x 22 columns]
===
---
Start ANOVA. 
target_modality: 0 
target_column: magnitude_avg
((model_name in [@mmvae_name]) and (target_modality == @target_modality)) or (model_name in [@vae_name])
                 id         model_name  magnitude_avg
0   test_vae_cmnist         VAE_CMNIST       0.315776
1            seed_3         VAE_CMNIST       0.136109
2            seed_4         VAE_CMNIST       0.308191
6       test_mmoscn  MMVAE_CMNIST_OSCN       0.387215
8            seed_3  MMVAE_CMNIST_OSCN       0.623625
10           seed_4  MMVAE_CMNIST_OSCN       0.369093
model_name       MMVAE_CMNIST_OSCN  VAE_CMNIST
id                                            
seed_3                    0.623625    0.136109
seed_4                    0.369093    0.308191
test_mmoscn               0.387215         NaN
test_vae_cmnist                NaN    0.315776

--- 
F-value: nan 
p-value: nan
                 sum_sq   df         F   PR(>F)
C(model_name)  0.064037  1.0  4.200205  0.10976
Residual       0.060985  4.0       NaN      NaN
---
Start ANOVA. 
target_modality: 0 
target_column: cluster_avg
((model_name in [@mmvae_name]) and (target_modality == @target_modality)) or (model_name in [@vae_name])
                 id         model_name  cluster_avg
0   test_vae_cmnist         VAE_CMNIST     0.038583
1            seed_3         VAE_CMNIST     0.023741
2            seed_4         VAE_CMNIST     0.035507
6       test_mmoscn  MMVAE_CMNIST_OSCN     0.047188
8            seed_3  MMVAE_CMNIST_OSCN     0.083077
10           seed_4  MMVAE_CMNIST_OSCN     0.057691
model_name       MMVAE_CMNIST_OSCN  VAE_CMNIST
id                                            
seed_3                    0.083077    0.023741
seed_4                    0.057691    0.035507
test_mmoscn               0.047188         NaN
test_vae_cmnist                NaN    0.038583

--- 
F-value: nan 
p-value: nan
                 sum_sq   df         F    PR(>F)
C(model_name)  0.001354  1.0  6.738136  0.060315
Residual       0.000804  4.0       NaN       NaN
---
Start ANOVA. 
target_modality: 0 
target_column: mathematics_avg
((model_name in [@mmvae_name]) and (target_modality == @target_modality)) or (model_name in [@vae_name])
                 id         model_name  mathematics_avg
0   test_vae_cmnist         VAE_CMNIST         0.110294
1            seed_3         VAE_CMNIST         0.134804
2            seed_4         VAE_CMNIST         0.105392
6       test_mmoscn  MMVAE_CMNIST_OSCN         0.088235
8            seed_3  MMVAE_CMNIST_OSCN         0.098039
10           seed_4  MMVAE_CMNIST_OSCN         0.105392
model_name       MMVAE_CMNIST_OSCN  VAE_CMNIST
id                                            
seed_3                    0.098039    0.134804
seed_4                    0.105392    0.105392
test_mmoscn               0.088235         NaN
test_vae_cmnist                NaN    0.110294

--- 
F-value: nan 
p-value: nan
                 sum_sq   df        F    PR(>F)
C(model_name)  0.000577  1.0  3.57764  0.131528
Residual       0.000645  4.0      NaN       NaN
---
Start ANOVA. 
target_modality: 0 
target_column: reconst_0x0_avg
((model_name in [@mmvae_name]) and (target_modality == @target_modality)) or (model_name in [@vae_name])
                 id         model_name  reconst_0x0_avg
0   test_vae_cmnist         VAE_CMNIST         0.093750
1            seed_3         VAE_CMNIST         0.109375
2            seed_4         VAE_CMNIST         0.125000
6       test_mmoscn  MMVAE_CMNIST_OSCN         0.109375
8            seed_3  MMVAE_CMNIST_OSCN         0.140625
10           seed_4  MMVAE_CMNIST_OSCN         0.085938
model_name       MMVAE_CMNIST_OSCN  VAE_CMNIST
id                                            
seed_3                    0.140625    0.109375
seed_4                    0.085938    0.125000
test_mmoscn               0.109375         NaN
test_vae_cmnist                NaN    0.093750

--- 
F-value: nan 
p-value: nan
                 sum_sq   df         F   PR(>F)
C(model_name)  0.000010  1.0  0.020408  0.89331
Residual       0.001994  4.0       NaN      NaN
===
scatter bettween cluster and magnitude
===
pairplot
===
analyzed data (all):
                          id         model_name  ...  reconst_1x1_avg  cross_0x1_avg
0            test_vae_cmnist         VAE_CMNIST  ...              NaN            NaN
1          vae_cmnist_seed_3         VAE_CMNIST  ...              NaN            NaN
2          vae_cmnist_seed_4         VAE_CMNIST  ...              NaN            NaN
3            vae_oscn_seed_4           VAE_OSCN  ...         0.062500            NaN
4            vae_oscn_seed_3           VAE_OSCN  ...         0.101562            NaN
5              test_vae_oscn           VAE_OSCN  ...         0.062500            NaN
6     test_mmvae_cmnist_oscn  MMVAE_CMNIST_OSCN  ...              NaN            NaN
7     test_mmvae_cmnist_oscn  MMVAE_CMNIST_OSCN  ...         0.101562       0.101562
8   mmvae_cmnist_oscn_seed_3  MMVAE_CMNIST_OSCN  ...              NaN            NaN
9   mmvae_cmnist_oscn_seed_3  MMVAE_CMNIST_OSCN  ...         0.109375       0.109375
10  mmvae_cmnist_oscn_seed_4  MMVAE_CMNIST_OSCN  ...              NaN            NaN
11  mmvae_cmnist_oscn_seed_4  MMVAE_CMNIST_OSCN  ...         0.125000       0.085938

[12 rows x 22 columns]
===
---
Start ANOVA. 
target_modality: 1 
target_column: magnitude_avg
((model_name in [@mmvae_name]) and (target_modality == @target_modality)) or (model_name in [@vae_name])
               id         model_name  magnitude_avg
3          seed_4           VAE_OSCN       0.892806
4          seed_3           VAE_OSCN       0.968198
5   test_vae_oscn           VAE_OSCN       0.893638
7     test_mmoscn  MMVAE_CMNIST_OSCN       0.889029
9          seed_3  MMVAE_CMNIST_OSCN       0.985458
11         seed_4  MMVAE_CMNIST_OSCN       0.887926
model_name     MMVAE_CMNIST_OSCN  VAE_OSCN
id                                        
seed_3                  0.985458  0.968198
seed_4                  0.887926  0.892806
test_mmoscn             0.889029       NaN
test_vae_oscn                NaN  0.893638

--- 
F-value: nan 
p-value: nan
                 sum_sq   df         F    PR(>F)
C(model_name)  0.000010  1.0  0.004019  0.952495
Residual       0.010019  4.0       NaN       NaN
---
Start ANOVA. 
target_modality: 1 
target_column: cluster_avg
((model_name in [@mmvae_name]) and (target_modality == @target_modality)) or (model_name in [@vae_name])
               id         model_name  cluster_avg
3          seed_4           VAE_OSCN    -0.092761
4          seed_3           VAE_OSCN    -0.080811
5   test_vae_oscn           VAE_OSCN    -0.103293
7     test_mmoscn  MMVAE_CMNIST_OSCN     0.043830
9          seed_3  MMVAE_CMNIST_OSCN    -0.291361
11         seed_4  MMVAE_CMNIST_OSCN     0.045337
model_name     MMVAE_CMNIST_OSCN  VAE_OSCN
id                                        
seed_3                 -0.291361 -0.080811
seed_4                  0.045337 -0.092761
test_mmoscn             0.043830       NaN
test_vae_oscn                NaN -0.103293

--- 
F-value: nan 
p-value: nan
                 sum_sq   df         F    PR(>F)
C(model_name)  0.000929  1.0  0.049238  0.835263
Residual       0.075493  4.0       NaN       NaN
---
Start ANOVA. 
target_modality: 1 
target_column: mathematics_avg
((model_name in [@mmvae_name]) and (target_modality == @target_modality)) or (model_name in [@vae_name])
               id         model_name  mathematics_avg
3          seed_4           VAE_OSCN         0.088235
4          seed_3           VAE_OSCN         0.117647
5   test_vae_oscn           VAE_OSCN         0.110294
7     test_mmoscn  MMVAE_CMNIST_OSCN         0.117647
9          seed_3  MMVAE_CMNIST_OSCN         0.110294
11         seed_4  MMVAE_CMNIST_OSCN         0.125000
model_name     MMVAE_CMNIST_OSCN  VAE_OSCN
id                                        
seed_3                  0.110294  0.117647
seed_4                  0.125000  0.088235
test_mmoscn             0.117647       NaN
test_vae_oscn                NaN  0.110294

--- 
F-value: nan 
p-value: nan
                 sum_sq   df       F   PR(>F)
C(model_name)  0.000225  1.0  1.5625  0.27944
Residual       0.000577  4.0     NaN      NaN
---
Start ANOVA. 
target_modality: 1 
target_column: reconst_1x1_avg
((model_name in [@mmvae_name]) and (target_modality == @target_modality)) or (model_name in [@vae_name])
               id         model_name  reconst_1x1_avg
3          seed_4           VAE_OSCN         0.062500
4          seed_3           VAE_OSCN         0.101562
5   test_vae_oscn           VAE_OSCN         0.062500
7     test_mmoscn  MMVAE_CMNIST_OSCN         0.101562
9          seed_3  MMVAE_CMNIST_OSCN         0.109375
11         seed_4  MMVAE_CMNIST_OSCN         0.125000
model_name     MMVAE_CMNIST_OSCN  VAE_OSCN
id                                        
seed_3                  0.109375  0.101562
seed_4                  0.125000  0.062500
test_mmoscn             0.101562       NaN
test_vae_oscn                NaN  0.062500

--- 
F-value: nan 
p-value: nan
                 sum_sq   df      F    PR(>F)
C(model_name)  0.001994  1.0  6.125  0.068587
Residual       0.001302  4.0    NaN       NaN
===
scatter bettween cluster and magnitude
===
pairplot
Arguments (initial):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist',
 'run_id': 'test_classifier_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Parameters were loaded for classifier
Run ID:
 test_classifier_cmnist
Run Directory:
 ./rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist',
 'run_id': 'test_classifier_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist',
 'run_id': 'test_classifier_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]         941,200
              ReLU-2                  [-1, 400]               0
            Linear-3                   [-1, 20]           8,020
            Linear-4                   [-1, 20]           8,020
            EncMLP-5       [[-1, 20], [-1, 20]]               0
            Linear-6                    [-1, 9]             189
================================================================
Total params: 957,429
Trainable params: 957,429
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.00
Params size (MB): 3.65
Estimated Total Size (MB): 3.66
----------------------------------------------------------------
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: cross 
t_objectives: cross
iteration 0000: loss:  0.017
iteration 0100: loss:  0.006
iteration 0200: loss:  0.004
iteration 0300: loss:  0.004
iteration 0400: loss:  0.003
iteration 0500: loss:  0.001
iteration 0600: loss:  0.001
iteration 0700: loss:  0.001
iteration 0800: loss:  0.001
iteration 0900: loss:  0.001
====> Epoch: 001 Train loss: 0.0024  took : 2.121047019958496
====> Test loss: -0.0013, Test accuracy: 0.9567
iteration 0000: loss:  0.000
iteration 0100: loss:  0.001
iteration 0200: loss:  0.001
iteration 0300: loss:  0.001
iteration 0400: loss:  0.001
iteration 0500: loss:  0.000
iteration 0600: loss:  0.001
iteration 0700: loss:  0.001
iteration 0800: loss:  0.001
iteration 0900: loss:  0.000
====> Epoch: 002 Train loss: 0.0008  took : 2.0987327098846436
====> Test loss: -0.0009, Test accuracy: 0.9698
iteration 0000: loss:  0.001
iteration 0100: loss:  0.000
iteration 0200: loss:  0.000
iteration 0300: loss:  0.000
iteration 0400: loss:  0.001
iteration 0500: loss:  0.000
iteration 0600: loss:  0.000
iteration 0700: loss:  0.001
iteration 0800: loss:  0.000
iteration 0900: loss:  0.001
====> Epoch: 003 Train loss: 0.0004  took : 2.1389122009277344
====> Test loss: -0.0008, Test accuracy: 0.9728
====> [MM-VAE] Time:   9.121s or 00:00:09
Arguments (initial):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn',
 'run_id': 'test_classifier_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Parameters were loaded for classifier
Run ID:
 test_classifier_oscn
Run Directory:
 ./rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn',
 'run_id': 'test_classifier_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn',
 'run_id': 'test_classifier_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]       1,229,200
              ReLU-2                  [-1, 400]               0
            Linear-3                   [-1, 20]           8,020
            Linear-4                   [-1, 20]           8,020
            EncMLP-5       [[-1, 20], [-1, 20]]               0
            Linear-6                    [-1, 9]             189
================================================================
Total params: 1,245,429
Trainable params: 1,245,429
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.00
Params size (MB): 4.75
Estimated Total Size (MB): 4.77
----------------------------------------------------------------
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: cross 
t_objectives: cross
iteration 0000: loss:  0.017
iteration 0100: loss:  0.008
iteration 0200: loss:  0.003
iteration 0300: loss:  0.001
iteration 0400: loss:  0.001
iteration 0500: loss:  0.000
iteration 0600: loss:  0.000
iteration 0700: loss:  0.000
iteration 0800: loss:  0.000
iteration 0900: loss:  0.000
====> Epoch: 001 Train loss: 0.0024  took : 2.0948054790496826
====> Test loss: -0.0001, Test accuracy: 1.0000
iteration 0000: loss:  0.000
iteration 0100: loss:  0.000
iteration 0200: loss:  0.000
iteration 0300: loss:  0.000
iteration 0400: loss:  0.000
iteration 0500: loss:  0.000
iteration 0600: loss:  0.000
iteration 0700: loss:  0.000
iteration 0800: loss:  0.000
iteration 0900: loss:  0.000
====> Epoch: 002 Train loss: 0.0000  took : 2.090834617614746
====> Test loss: -0.0000, Test accuracy: 1.0000
iteration 0000: loss:  0.000
iteration 0100: loss:  0.000
iteration 0200: loss:  0.000
iteration 0300: loss:  0.000
iteration 0400: loss:  0.000
iteration 0500: loss:  0.000
iteration 0600: loss:  0.000
iteration 0700: loss:  0.000
iteration 0800: loss:  0.000
iteration 0900: loss:  0.000
====> Epoch: 003 Train loss: 0.0000  took : 2.0476369857788086
====> Test loss: -0.0000, Test accuracy: 1.0000
====> [MM-VAE] Time:   7.665s or 00:00:07
Arguments (initial):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist',
 'run_id': 'test_vae_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Parameters were loaded for classifier
Run ID:
 vae_cmnist_seed_3
Run Directory:
 ./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_3
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist',
 'run_id': 'test_vae_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist',
 'run_id': 'test_vae_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]         941,200
              ReLU-2                  [-1, 400]               0
            Linear-3                  [-1, 400]         160,400
              ReLU-4                  [-1, 400]               0
            Linear-5                   [-1, 20]           8,020
            Linear-6                   [-1, 20]           8,020
            EncMLP-7       [[-1, 20], [-1, 20]]               0
            Linear-8               [-1, 2, 400]           8,400
              ReLU-9               [-1, 2, 400]               0
           Linear-10               [-1, 2, 400]         160,400
             ReLU-11               [-1, 2, 400]               0
           Linear-12              [-1, 2, 2352]         943,152
Print of model summary was skipped because can't multiply sequence by non-int of type 'list'
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: elbo 
t_objectives: iwae
iteration 0000: loss: 1992.506
iteration 0100: loss: 1571.926
iteration 0200: loss: 1553.596
iteration 0300: loss: 1556.989
iteration 0400: loss: 1563.116
iteration 0500: loss: 1550.459
iteration 0600: loss: 1554.655
iteration 0700: loss: 1555.395
iteration 0800: loss: 1541.566
iteration 0900: loss: 1541.519
====> Epoch: 001 Train loss: 1556.7908  took : 4.345556259155273
====> Test loss: 1536.2896
iteration 0000: loss: 1536.391
iteration 0100: loss: 1536.497
iteration 0200: loss: 1540.257
iteration 0300: loss: 1534.911
iteration 0400: loss: 1536.186
iteration 0500: loss: 1533.378
iteration 0600: loss: 1536.573
iteration 0700: loss: 1531.234
iteration 0800: loss: 1538.807
iteration 0900: loss: 1526.212
====> Epoch: 002 Train loss: 1535.3190  took : 4.3496105670928955
====> Test loss: 1529.5111
iteration 0000: loss: 1536.067
iteration 0100: loss: 1532.292
iteration 0200: loss: 1532.708
iteration 0300: loss: 1527.674
iteration 0400: loss: 1528.042
iteration 0500: loss: 1535.742
iteration 0600: loss: 1531.262
iteration 0700: loss: 1533.201
iteration 0800: loss: 1527.506
iteration 0900: loss: 1532.210
====> Epoch: 003 Train loss: 1531.1637  took : 4.334301471710205
====> Test loss: 1526.8603
====> [MM-VAE] Time:  23.860s or 00:00:23
Arguments (initial):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Parameters were loaded for classifier
Run ID:
 vae_oscn_seed_3
Run Directory:
 ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_3
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]       1,229,200
              ReLU-2                  [-1, 400]               0
            Linear-3                  [-1, 400]         160,400
              ReLU-4                  [-1, 400]               0
            Linear-5                   [-1, 20]           8,020
            Linear-6                   [-1, 20]           8,020
            EncMLP-7       [[-1, 20], [-1, 20]]               0
            Linear-8               [-1, 2, 400]           8,400
              ReLU-9               [-1, 2, 400]               0
           Linear-10               [-1, 2, 400]         160,400
             ReLU-11               [-1, 2, 400]               0
           Linear-12              [-1, 2, 3072]       1,231,872
Print of model summary was skipped because can't multiply sequence by non-int of type 'list'
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: elbo 
t_objectives: iwae
iteration 0000: loss: 2624.958
iteration 0100: loss: 2084.909
iteration 0200: loss: 2050.564
iteration 0300: loss: 2012.778
iteration 0400: loss: 1999.319
iteration 0500: loss: 2002.562
iteration 0600: loss: 1998.127
iteration 0700: loss: 1997.823
iteration 0800: loss: 1999.615
iteration 0900: loss: 1981.613
====> Epoch: 001 Train loss: 2020.5134  took : 4.283585071563721
====> Test loss: 1977.3842
iteration 0000: loss: 1985.884
iteration 0100: loss: 1975.012
iteration 0200: loss: 1973.391
iteration 0300: loss: 1973.421
iteration 0400: loss: 1971.809
iteration 0500: loss: 1968.242
iteration 0600: loss: 1966.347
iteration 0700: loss: 1966.173
iteration 0800: loss: 1965.911
iteration 0900: loss: 1963.736
====> Epoch: 002 Train loss: 1971.3660  took : 4.3241095542907715
====> Test loss: 1959.2359
iteration 0000: loss: 1964.799
iteration 0100: loss: 1963.630
iteration 0200: loss: 1961.436
iteration 0300: loss: 1963.733
iteration 0400: loss: 1960.755
iteration 0500: loss: 1962.340
iteration 0600: loss: 1961.962
iteration 0700: loss: 1960.840
iteration 0800: loss: 1958.644
iteration 0900: loss: 1959.955
====> Epoch: 003 Train loss: 1962.0665  took : 4.306777238845825
====> Test loss: 1954.5649
====> [MM-VAE] Time:  21.384s or 00:00:21
Arguments (initial):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'MMVAE_CMNIST_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'dreg',
 'output_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn',
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Parameters were loaded for classifier
Run ID:
 mmvae_cmnist_oscn_seed_3
Run Directory:
 ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'MMVAE_CMNIST_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'dreg',
 'output_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn',
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'MMVAE_CMNIST_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'dreg',
 'output_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn',
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
Print of model summary was skipped because 'MMVAE_CMNIST_OSCN' object has no attribute 'data_size'
Model is initialized without loading.

length of cmnist and oscn dataset (train): 240000 
length of cmnist and oscn dataset (test): 8000

length of dataset (train): 240000 
length of dataset (test): 8000
objectives: m_dreg 
t_objectives: m_iwae
iteration 0000: loss: 5224.342
iteration 0100: loss: 4066.092
iteration 0200: loss: 4022.789
iteration 0300: loss: 4012.915
iteration 0400: loss: 4026.296
iteration 0500: loss: 4004.138
iteration 0600: loss: 4006.654
iteration 0700: loss: 3986.686
iteration 0800: loss: 3994.735
iteration 0900: loss: 3980.854
iteration 1000: loss: 3987.545
iteration 1100: loss: 3983.366
iteration 1200: loss: 3982.326
iteration 1300: loss: 3988.600
iteration 1400: loss: 3993.068
iteration 1500: loss: 3991.974
iteration 1600: loss: 3987.259
iteration 1700: loss: 3981.374
iteration 1800: loss: 3966.368
====> Epoch: 001 Train loss: 4003.6188  took : 72.66083312034607
====> Test loss: 3981.9355
iteration 0000: loss: 3986.436
iteration 0100: loss: 3971.581
iteration 0200: loss: 3966.029
iteration 0300: loss: 3976.295
iteration 0400: loss: 3979.159
iteration 0500: loss: 3976.821
iteration 0600: loss: 3976.283
iteration 0700: loss: 3970.284
iteration 0800: loss: 3966.677
iteration 0900: loss: 3975.950
iteration 1000: loss: 3975.741
iteration 1100: loss: 3978.928
iteration 1200: loss: 3965.085
iteration 1300: loss: 3971.214
iteration 1400: loss: 3968.574
iteration 1500: loss: 3959.185
iteration 1600: loss: 3980.808
iteration 1700: loss: 3981.338
iteration 1800: loss: 3975.300
====> Epoch: 002 Train loss: 3972.8893  took : 72.76402306556702
====> Test loss: 3973.7038
iteration 0000: loss: 3959.586
iteration 0100: loss: 3968.328
iteration 0200: loss: 3964.811
iteration 0300: loss: 3976.748
iteration 0400: loss: 3975.100
iteration 0500: loss: 3968.841
iteration 0600: loss: 3963.757
iteration 0700: loss: 3965.403
iteration 0800: loss: 3967.116
iteration 0900: loss: 3965.524
iteration 1000: loss: 3968.078
iteration 1100: loss: 3967.994
iteration 1200: loss: 3966.407
iteration 1300: loss: 3962.655
iteration 1400: loss: 3966.189
iteration 1500: loss: 3970.864
iteration 1600: loss: 3964.886
iteration 1700: loss: 3968.661
iteration 1800: loss: 3966.091
====> Epoch: 003 Train loss: 3966.7940  took : 72.76935052871704
====> Test loss: 3969.1590
====> [MM-VAE] Time: 275.650s or 00:04:35
Arguments (initial):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist',
 'run_id': 'test_vae_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Parameters were loaded for classifier
Run ID:
 vae_cmnist_seed_4
Run Directory:
 ./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_4
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist',
 'run_id': 'test_vae_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist',
 'run_id': 'test_vae_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]         941,200
              ReLU-2                  [-1, 400]               0
            Linear-3                  [-1, 400]         160,400
              ReLU-4                  [-1, 400]               0
            Linear-5                   [-1, 20]           8,020
            Linear-6                   [-1, 20]           8,020
            EncMLP-7       [[-1, 20], [-1, 20]]               0
            Linear-8               [-1, 2, 400]           8,400
              ReLU-9               [-1, 2, 400]               0
           Linear-10               [-1, 2, 400]         160,400
             ReLU-11               [-1, 2, 400]               0
           Linear-12              [-1, 2, 2352]         943,152
Print of model summary was skipped because can't multiply sequence by non-int of type 'list'
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: elbo 
t_objectives: iwae
iteration 0000: loss: 1988.914
iteration 0100: loss: 1578.974
iteration 0200: loss: 1559.500
iteration 0300: loss: 1553.893
iteration 0400: loss: 1562.954
iteration 0500: loss: 1554.055
iteration 0600: loss: 1553.323
iteration 0700: loss: 1550.284
iteration 0800: loss: 1547.038
iteration 0900: loss: 1542.038
====> Epoch: 001 Train loss: 1558.1929  took : 4.313858270645142
====> Test loss: 1539.5223
iteration 0000: loss: 1539.567
iteration 0100: loss: 1539.123
iteration 0200: loss: 1535.745
iteration 0300: loss: 1535.846
iteration 0400: loss: 1537.809
iteration 0500: loss: 1532.685
iteration 0600: loss: 1537.420
iteration 0700: loss: 1533.834
iteration 0800: loss: 1536.385
iteration 0900: loss: 1533.733
====> Epoch: 002 Train loss: 1537.5548  took : 4.376209259033203
====> Test loss: 1530.9750
iteration 0000: loss: 1534.170
iteration 0100: loss: 1534.759
iteration 0200: loss: 1529.186
iteration 0300: loss: 1531.567
iteration 0400: loss: 1532.904
iteration 0500: loss: 1532.557
iteration 0600: loss: 1537.596
iteration 0700: loss: 1528.411
iteration 0800: loss: 1535.578
iteration 0900: loss: 1532.253
====> Epoch: 003 Train loss: 1532.6653  took : 4.3998777866363525
====> Test loss: 1528.5628
====> [MM-VAE] Time:  23.424s or 00:00:23
Arguments (initial):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Parameters were loaded for classifier
Run ID:
 vae_oscn_seed_4
Run Directory:
 ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_4
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]       1,229,200
              ReLU-2                  [-1, 400]               0
            Linear-3                  [-1, 400]         160,400
              ReLU-4                  [-1, 400]               0
            Linear-5                   [-1, 20]           8,020
            Linear-6                   [-1, 20]           8,020
            EncMLP-7       [[-1, 20], [-1, 20]]               0
            Linear-8               [-1, 2, 400]           8,400
              ReLU-9               [-1, 2, 400]               0
           Linear-10               [-1, 2, 400]         160,400
             ReLU-11               [-1, 2, 400]               0
           Linear-12              [-1, 2, 3072]       1,231,872
Print of model summary was skipped because can't multiply sequence by non-int of type 'list'
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: elbo 
t_objectives: iwae
iteration 0000: loss: 2623.431
iteration 0100: loss: 2059.112
iteration 0200: loss: 2047.400
iteration 0300: loss: 2015.349
iteration 0400: loss: 2004.040
iteration 0500: loss: 1993.961
iteration 0600: loss: 1999.939
iteration 0700: loss: 2003.457
iteration 0800: loss: 2001.210
iteration 0900: loss: 1985.305
====> Epoch: 001 Train loss: 2021.2928  took : 4.340327739715576
====> Test loss: 1982.7863
iteration 0000: loss: 1986.973
iteration 0100: loss: 1976.044
iteration 0200: loss: 1972.700
iteration 0300: loss: 1972.387
iteration 0400: loss: 1967.269
iteration 0500: loss: 1969.025
iteration 0600: loss: 1970.425
iteration 0700: loss: 1970.162
iteration 0800: loss: 1965.693
iteration 0900: loss: 1964.280
====> Epoch: 002 Train loss: 1971.2538  took : 4.349151849746704
====> Test loss: 1958.9120
iteration 0000: loss: 1964.889
iteration 0100: loss: 1963.298
iteration 0200: loss: 1962.056
iteration 0300: loss: 1961.672
iteration 0400: loss: 1964.242
iteration 0500: loss: 1959.736
iteration 0600: loss: 1960.828
iteration 0700: loss: 1960.373
iteration 0800: loss: 1961.012
iteration 0900: loss: 1960.984
====> Epoch: 003 Train loss: 1962.1836  took : 4.294662952423096
====> Test loss: 1955.4885
====> [MM-VAE] Time:  22.151s or 00:00:22
Arguments (initial):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'MMVAE_CMNIST_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'dreg',
 'output_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn',
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Parameters were loaded for classifier
Run ID:
 mmvae_cmnist_oscn_seed_4
Run Directory:
 ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'MMVAE_CMNIST_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'dreg',
 'output_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn',
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'MMVAE_CMNIST_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'dreg',
 'output_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn',
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
Print of model summary was skipped because 'MMVAE_CMNIST_OSCN' object has no attribute 'data_size'
Model is initialized without loading.

length of cmnist and oscn dataset (train): 240000 
length of cmnist and oscn dataset (test): 8000

length of dataset (train): 240000 
length of dataset (test): 8000
objectives: m_dreg 
t_objectives: m_iwae
iteration 0000: loss: 5220.303
iteration 0100: loss: 4085.569
iteration 0200: loss: 4022.843
iteration 0300: loss: 4016.805
iteration 0400: loss: 4006.044
iteration 0500: loss: 3996.404
iteration 0600: loss: 4008.400
iteration 0700: loss: 4006.768
iteration 0800: loss: 3989.343
iteration 0900: loss: 3985.730
iteration 1000: loss: 3984.987
iteration 1100: loss: 3990.149
iteration 1200: loss: 3972.079
iteration 1300: loss: 3973.423
iteration 1400: loss: 3976.450
iteration 1500: loss: 3970.845
iteration 1600: loss: 3957.879
iteration 1700: loss: 3957.302
iteration 1800: loss: 3956.553
====> Epoch: 001 Train loss: 3998.1360  took : 72.73408055305481
====> Test loss: 3961.6309
iteration 0000: loss: 3958.169
iteration 0100: loss: 3954.396
iteration 0200: loss: 3950.640
iteration 0300: loss: 3961.999
iteration 0400: loss: 3955.456
iteration 0500: loss: 3956.045
iteration 0600: loss: 3956.968
iteration 0700: loss: 3953.495
iteration 0800: loss: 3948.280
iteration 0900: loss: 3955.931
iteration 1000: loss: 3950.078
iteration 1100: loss: 3952.650
iteration 1200: loss: 3955.724
iteration 1300: loss: 3948.317
iteration 1400: loss: 3951.948
iteration 1500: loss: 3947.037
iteration 1600: loss: 3951.003
iteration 1700: loss: 3950.405
iteration 1800: loss: 3952.407
====> Epoch: 002 Train loss: 3952.8451  took : 72.74344801902771
====> Test loss: 3952.2179
iteration 0000: loss: 3951.839
iteration 0100: loss: 3953.129
iteration 0200: loss: 3949.148
iteration 0300: loss: 3946.405
iteration 0400: loss: 3947.302
iteration 0500: loss: 3949.239
iteration 0600: loss: 3948.035
iteration 0700: loss: 3949.104
iteration 0800: loss: 3946.552
iteration 0900: loss: 3942.814
iteration 1000: loss: 3945.355
iteration 1100: loss: 3949.566
iteration 1200: loss: 3945.712
iteration 1300: loss: 3949.938
iteration 1400: loss: 3950.350
iteration 1500: loss: 3951.622
iteration 1600: loss: 3942.989
iteration 1700: loss: 3947.589
iteration 1800: loss: 3948.556
====> Epoch: 003 Train loss: 3948.5297  took : 72.73146772384644
====> Test loss: 3950.5496
====> [MM-VAE] Time: 268.698s or 00:04:28
Arguments (initial):
{'pretrained_path': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist',
 'run_id': 'test_vae_cmnist',
 'run_type': 'analyse'}
args are updated using pretrained_path:
 {'experiment': 'test_loop_1', 'model': 'VAE_CMNIST', 'run_type': 'train', 'seed': 4, 'num_hidden_layers': 2, 'use_conditional': False, 'use_cnn': False, 'latent_dim': 20, 'obj': 'elbo', 'batch_size': 128, 'epochs': 3, 'K': 20, 'learn_prior': False, 'llik_scaling': 0.0, 'logp': False, 'looser': False, 'print_freq': 100, 'no_analytics': False, 'no_cuda': False, 'run_id': 'test_vae_cmnist', 'pretrained_path': '', 'run_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist', 'output_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/train', 'device': 'cuda'}
Parameters were loaded for classifier
Run ID:
 vae_cmnist_seed_3
Run Directory:
 ./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_3
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist',
 'run_id': 'test_vae_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist',
 'run_id': 'test_vae_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]         941,200
              ReLU-2                  [-1, 400]               0
            Linear-3                  [-1, 400]         160,400
              ReLU-4                  [-1, 400]               0
            Linear-5                   [-1, 20]           8,020
            Linear-6                   [-1, 20]           8,020
            EncMLP-7       [[-1, 20], [-1, 20]]               0
            Linear-8               [-1, 2, 400]           8,400
              ReLU-9               [-1, 2, 400]               0
           Linear-10               [-1, 2, 400]         160,400
             ReLU-11               [-1, 2, 400]               0
           Linear-12              [-1, 2, 2352]         943,152
Print of model summary was skipped because can't multiply sequence by non-int of type 'list'
Loading model VAE_CMNIST from ./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_3

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: elbo 
t_objectives: iwae


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist',
 'run_id': 'test_classifier_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]         941,200
              ReLU-2                  [-1, 400]               0
            Linear-3                   [-1, 20]           8,020
            Linear-4                   [-1, 20]           8,020
            EncMLP-5       [[-1, 20], [-1, 20]]               0
            Linear-6                    [-1, 9]             189
================================================================
Total params: 957,429
Trainable params: 957,429
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.00
Params size (MB): 3.65
Estimated Total Size (MB): 3.66
----------------------------------------------------------------
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: cross 
t_objectives: cross


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'torch.Tensor'> 
label: tensor([4, 3, 6, 9, 5, 4, 6, 3, 3, 3, 1, 6, 5, 2, 6, 4, 1, 5, 3, 9, 5, 9, 1, 6,
        8, 5, 9, 7, 2, 4, 8, 8, 5, 6, 7, 5, 9, 9, 8, 7, 1, 3, 5, 1, 9, 9, 5, 7,
        8, 2, 6, 5, 1, 6, 8, 5, 2, 9, 5, 9, 6, 8, 2, 7, 6, 4, 9, 4, 9, 2, 8, 7,
        7, 1, 2, 8, 5, 8, 9, 9, 3, 7, 4, 7, 5, 1, 2, 3, 9, 9, 4, 6, 8, 2, 2, 1,
        7, 8, 7, 3, 4, 9, 8, 6, 9, 3, 8, 4, 6, 2, 5, 2, 1, 9, 2, 3, 8, 3, 5, 9,
        4, 2, 4, 6, 8, 9, 1, 1], device='cuda:0') 
type(data): <class 'torch.Tensor'> 
data[0].shape: torch.Size([3, 28, 28])

===
Setting info... 
Target modality: 0 
Target property: 0 
Output directory: ./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_3/analyse/0_0 
Number of category 4 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2, 3} 
Start index: 0 
End index: 4 
withzero: False
---
Silhouette values: [0.1135971  0.19756776 0.25194418 ... 0.09502973 0.2598499  0.1141272 ]
Average of silhouette coef: 0.1503143
---

Distance matrix between labels.
  0   1   2   3
0 0.0 2.5 2.5 2.3 
1 2.5 0.0 2.9 2.1 
2 2.5 2.9 0.0 1.9 
3 2.3 2.1 1.9 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 1, 2, 1] 
Latent embbeding: [2.46889, 2.5090199, 2.2608025, 2.9271245, 2.119742, 1.8892533] 
Flatten array: [[0.         0.        ]
 [1.         2.46888995]
 [2.         2.50901985]
 [3.         2.26080251]
 [0.         0.        ]
 [1.         2.9271245 ]
 [2.         2.11974192]
 [0.         0.        ]
 [1.         1.88925326]
 [0.         0.        ]]
Correlation: [[ 1.         -0.20429963]
 [-0.20429963  1.        ]]
---
[[], [], [], []] [3 1 2 ... 0 1 1] [[-28.812656    2.2084272]
 [ -1.2866551  54.202778 ]
 [ 47.56552   -25.667295 ]
 ...
 [-30.56053   -35.988316 ]
 [ -9.492267   45.626293 ]
 [-12.948499   13.338436 ]]
saved ./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_3/analyse/0_0/latent__0_0.svg
results (all): {'cluster_avg': 0.1503143, 'cluster_all': array([0.1135971 , 0.19756776, 0.25194418, ..., 0.09502973, 0.2598499 ,
       0.1141272 ], dtype=float32), 'magnitude_avg': 0.2042996348199867, 'magnitude_all': -0.2042996348199867, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'vae_cmnist_seed_3', 'model_name': 'VAE_CMNIST', 'target_modality': 0, 'target_property': 0, 'cluster_avg': 0.1503143, 'magnitude_avg': 0.2042996348199867, 'tsne-2d_avg': nan}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'torch.Tensor'> 
label: tensor([5, 7, 6, 6, 6, 1, 5, 9, 3, 6, 8, 6, 6, 2, 8, 3, 3, 9, 5, 1, 5, 5, 7, 8,
        4, 5, 9, 3, 8, 3, 2, 1, 1, 9, 3, 1, 6, 3, 5, 3, 6, 9, 9, 5, 2, 6, 4, 8,
        4, 8, 7, 3, 8, 5, 1, 3, 8, 9, 4, 7, 9, 3, 7, 2, 8, 6, 2, 7, 9, 5, 5, 1,
        7, 5, 5, 8, 7, 6, 1, 3, 1, 7, 7, 6, 3, 2, 9, 6, 6, 1, 6, 1, 7, 1, 5, 3,
        8, 9, 2, 7, 4, 6, 6, 3, 4, 5, 7, 7, 3, 4, 2, 3, 4, 7, 4, 1, 5, 7, 9, 9,
        5, 7, 3, 7, 9, 3, 7, 9], device='cuda:0') 
type(data): <class 'torch.Tensor'> 
data[0].shape: torch.Size([3, 28, 28])

===
Setting info... 
Target modality: 0 
Target property: 1 
Output directory: ./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_3/analyse/0_1 
Number of category 10 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {1, 2, 3, 4, 5, 6, 7, 8, 9} 
Start index: 1 
End index: 10 
withzero: False
---
pred: tensor([7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 1, 7, 1,
        7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7,
        7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7,
        3, 1, 7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 1, 7, 7, 7, 7, 1, 7, 7, 7, 7, 1, 7, 7, 1, 7, 1, 7, 7, 7, 7, 7,
        7, 1, 7, 1, 7, 7, 1, 7]) 
tar: tensor([6, 1, 2, 1, 8, 3, 7, 9, 8, 3, 7, 7, 3, 7, 2, 3, 3, 6, 1, 2, 9, 7, 7, 2,
        2, 1, 3, 4, 3, 2, 4, 8, 5, 4, 7, 4, 2, 1, 4, 1, 3, 9, 8, 3, 8, 8, 8, 1,
        8, 4, 3, 4, 1, 7, 4, 8, 6, 5, 1, 1, 4, 1, 9, 8, 5, 4, 6, 2, 8, 5, 2, 4,
        8, 7, 2, 8, 2, 5, 1, 6, 8, 4, 8, 9, 6, 4, 4, 2, 8, 3, 5, 7, 6, 8, 6, 8,
        6, 6, 2, 2, 7, 7, 4, 3, 2, 5, 7, 2, 4, 2, 7, 1, 7, 2, 8, 4, 8, 7, 2, 5,
        9, 7, 6, 9, 3, 2, 9, 3])
Accuracy (count): tensor(12) 
Accuracy (ratio) tensor(0.0938)
Accuracy:
 [[ 0  0  0  0  0  0 13  0  0]
 [ 5  0  0  0  0  0 15  0  0]
 [ 1  0  0  0  0  0 13  0  0]
 [ 1  0  0  0  0  0 16  0  0]
 [ 0  0  0  0  0  0  8  0  0]
 [ 2  0  0  0  0  0  9  0  0]
 [ 5  0  0  0  0  0 12  0  0]
 [ 3  0  1  0  0  0 16  0  0]
 [ 4  0  0  0  0  0  4  0  0]]
Accuracy:
 [[0.    0.    0.    0.    0.    0.    1.    0.    0.   ]
 [0.25  0.    0.    0.    0.    0.    0.75  0.    0.   ]
 [0.071 0.    0.    0.    0.    0.    0.929 0.    0.   ]
 [0.059 0.    0.    0.    0.    0.    0.941 0.    0.   ]
 [0.    0.    0.    0.    0.    0.    1.    0.    0.   ]
 [0.182 0.    0.    0.    0.    0.    0.818 0.    0.   ]
 [0.294 0.    0.    0.    0.    0.    0.706 0.    0.   ]
 [0.15  0.    0.05  0.    0.    0.    0.8   0.    0.   ]
 [0.5   0.    0.    0.    0.    0.    0.5   0.    0.   ]]
---
Silhouette values: [-0.13153575 -0.00699704 -0.17094555 ... -0.11840829  0.00766488
  0.0844696 ]
Average of silhouette coef: 0.017404612
---

Distance matrix between labels.
  1   2   3   4   5   6   7   8   9
1 0.0 2.0 2.1 2.6 2.5 2.4 2.0 1.8 2.2 
2 2.0 0.0 1.3 2.3 2.4 2.4 2.4 1.1 2.3 
3 2.1 1.3 0.0 1.7 1.4 1.3 2.1 1.0 1.7 
4 2.6 2.3 1.7 0.0 1.5 1.6 1.2 1.5 0.7 
5 2.5 2.4 1.4 1.5 0.0 1.1 1.9 1.8 1.7 
6 2.4 2.4 1.3 1.6 1.1 0.0 2.2 1.6 1.4 
7 2.0 2.4 2.1 1.2 1.9 2.2 0.0 1.6 1.2 
8 1.8 1.1 1.0 1.5 1.8 1.6 1.6 0.0 1.4 
9 2.2 2.3 1.7 0.7 1.7 1.4 1.2 1.4 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
Latent embbeding: [2.0372689, 2.054725, 2.560947, 2.5320978, 2.4319053, 1.9918791, 1.753635, 2.2339928, 1.3175994, 2.274887, 2.4477425, 2.395215, 2.3955336, 1.0965235, 2.320203, 1.6805522, 1.3980422, 1.3158418, 2.1051214, 1.006786, 1.6648589, 1.528998, 1.569521, 1.1971596, 1.4866145, 0.7269515, 1.142321, 1.9288446, 1.8479826, 1.726001, 2.2070935, 1.6455426, 1.4221057, 1.6381525, 1.2132003, 1.3615259] 
Flatten array: [[0.         0.        ]
 [1.         2.03726888]
 [2.         2.05472493]
 [3.         2.56094694]
 [4.         2.53209782]
 [5.         2.43190527]
 [6.         1.99187911]
 [7.         1.75363505]
 [8.         2.23399282]
 [0.         0.        ]
 [1.         1.31759942]
 [2.         2.27488708]
 [3.         2.44774246]
 [4.         2.39521503]
 [5.         2.39553356]
 [6.         1.09652352]
 [7.         2.32020307]
 [0.         0.        ]
 [1.         1.68055224]
 [2.         1.3980422 ]
 [3.         1.31584179]
 [4.         2.10512137]
 [5.         1.00678599]
 [6.         1.66485894]
 [0.         0.        ]
 [1.         1.52899802]
 [2.         1.56952095]
 [3.         1.19715965]
 [4.         1.48661447]
 [5.         0.72695148]
 [0.         0.        ]
 [1.         1.14232099]
 [2.         1.92884457]
 [3.         1.84798265]
 [4.         1.72600102]
 [0.         0.        ]
 [1.         2.20709348]
 [2.         1.64554262]
 [3.         1.42210567]
 [0.         0.        ]
 [1.         1.63815248]
 [2.         1.21320033]
 [0.         0.        ]
 [1.         1.36152589]
 [0.         0.        ]]
Correlation: [[1.         0.17362374]
 [0.17362374 1.        ]]
---
[[], [], [], [], [], [], [], [], [], []] [5 7 6 ... 8 9 4] [[  3.6700768   35.233093  ]
 [ 23.080881     7.8287683 ]
 [  7.8966203  -28.74488   ]
 ...
 [-49.917538     4.382764  ]
 [ 24.350676   -23.950754  ]
 [  3.9410965   -0.99476504]]
saved ./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_3/analyse/0_1/latent__0_1.svg
---
length of elements: 408 408
length of 1: 36
length of 2: 43
length of 3: 48
length of 4: 51
length of 5: 52
length of 6: 51
length of 7: 48
length of 8: 43
length of 9: 36
all elements:

[(1, (1, 2, 2)),
 (2, (1, 3, 2)),
 (1, (1, 3, 3)),
 (3, (1, 4, 2)),
 (2, (1, 4, 3)),
 (1, (1, 4, 4)),
 (4, (1, 5, 2)),
 (3, (1, 5, 3)),
 (2, (1, 5, 4)),
 (1, (1, 5, 5)),
 (5, (1, 6, 2)),
 (4, (1, 6, 3)),
 (3, (1, 6, 4)),
 (2, (1, 6, 5)),
 (1, (1, 6, 6)),
 (6, (1, 7, 2)),
 (5, (1, 7, 3)),
 (4, (1, 7, 4)),
 (3, (1, 7, 5)),
 (2, (1, 7, 6)),
 (1, (1, 7, 7)),
 (7, (1, 8, 2)),
 (6, (1, 8, 3)),
 (5, (1, 8, 4)),
 (4, (1, 8, 5)),
 (3, (1, 8, 6)),
 (2, (1, 8, 7)),
 (1, (1, 8, 8)),
 (8, (1, 9, 2)),
 (7, (1, 9, 3)),
 (6, (1, 9, 4)),
 (5, (1, 9, 5)),
 (4, (1, 9, 6)),
 (3, (1, 9, 7)),
 (2, (1, 9, 8)),
 (1, (1, 9, 9)),
 (2, (2, 1, 1)),
 (3, (2, 2, 1)),
 (1, (2, 2, 3)),
 (4, (2, 3, 1)),
 (2, (2, 3, 3)),
 (1, (2, 3, 4)),
 (5, (2, 4, 1)),
 (3, (2, 4, 3)),
 (2, (2, 4, 4)),
 (1, (2, 4, 5)),
 (6, (2, 5, 1)),
 (4, (2, 5, 3)),
 (3, (2, 5, 4)),
 (2, (2, 5, 5)),
 (1, (2, 5, 6)),
 (7, (2, 6, 1)),
 (5, (2, 6, 3)),
 (4, (2, 6, 4)),
 (3, (2, 6, 5)),
 (2, (2, 6, 6)),
 (1, (2, 6, 7)),
 (8, (2, 7, 1)),
 (6, (2, 7, 3)),
 (5, (2, 7, 4)),
 (4, (2, 7, 5)),
 (3, (2, 7, 6)),
 (2, (2, 7, 7)),
 (1, (2, 7, 8)),
 (9, (2, 8, 1)),
 (7, (2, 8, 3)),
 (6, (2, 8, 4)),
 (5, (2, 8, 5)),
 (4, (2, 8, 6)),
 (3, (2, 8, 7)),
 (2, (2, 8, 8)),
 (1, (2, 8, 9)),
 (8, (2, 9, 3)),
 (7, (2, 9, 4)),
 (6, (2, 9, 5)),
 (5, (2, 9, 6)),
 (4, (2, 9, 7)),
 (3, (2, 9, 8)),
 (2, (2, 9, 9)),
 (3, (3, 1, 1)),
 (2, (3, 1, 2)),
 (4, (3, 2, 1)),
 (3, (3, 2, 2)),
 (1, (3, 2, 4)),
 (5, (3, 3, 1)),
 (4, (3, 3, 2)),
 (2, (3, 3, 4)),
 (1, (3, 3, 5)),
 (6, (3, 4, 1)),
 (5, (3, 4, 2)),
 (3, (3, 4, 4)),
 (2, (3, 4, 5)),
 (1, (3, 4, 6)),
 (7, (3, 5, 1)),
 (6, (3, 5, 2)),
 (4, (3, 5, 4)),
 (3, (3, 5, 5)),
 (2, (3, 5, 6)),
 (1, (3, 5, 7)),
 (8, (3, 6, 1)),
 (7, (3, 6, 2)),
 (5, (3, 6, 4)),
 (4, (3, 6, 5)),
 (3, (3, 6, 6)),
 (2, (3, 6, 7)),
 (1, (3, 6, 8)),
 (9, (3, 7, 1)),
 (8, (3, 7, 2)),
 (6, (3, 7, 4)),
 (5, (3, 7, 5)),
 (4, (3, 7, 6)),
 (3, (3, 7, 7)),
 (2, (3, 7, 8)),
 (1, (3, 7, 9)),
 (9, (3, 8, 2)),
 (7, (3, 8, 4)),
 (6, (3, 8, 5)),
 (5, (3, 8, 6)),
 (4, (3, 8, 7)),
 (3, (3, 8, 8)),
 (2, (3, 8, 9)),
 (8, (3, 9, 4)),
 (7, (3, 9, 5)),
 (6, (3, 9, 6)),
 (5, (3, 9, 7)),
 (4, (3, 9, 8)),
 (3, (3, 9, 9)),
 (4, (4, 1, 1)),
 (3, (4, 1, 2)),
 (2, (4, 1, 3)),
 (5, (4, 2, 1)),
 (4, (4, 2, 2)),
 (3, (4, 2, 3)),
 (1, (4, 2, 5)),
 (6, (4, 3, 1)),
 (5, (4, 3, 2)),
 (4, (4, 3, 3)),
 (2, (4, 3, 5)),
 (1, (4, 3, 6)),
 (7, (4, 4, 1)),
 (6, (4, 4, 2)),
 (5, (4, 4, 3)),
 (3, (4, 4, 5)),
 (2, (4, 4, 6)),
 (1, (4, 4, 7)),
 (8, (4, 5, 1)),
 (7, (4, 5, 2)),
 (6, (4, 5, 3)),
 (4, (4, 5, 5)),
 (3, (4, 5, 6)),
 (2, (4, 5, 7)),
 (1, (4, 5, 8)),
 (9, (4, 6, 1)),
 (8, (4, 6, 2)),
 (7, (4, 6, 3)),
 (5, (4, 6, 5)),
 (4, (4, 6, 6)),
 (3, (4, 6, 7)),
 (2, (4, 6, 8)),
 (1, (4, 6, 9)),
 (9, (4, 7, 2)),
 (8, (4, 7, 3)),
 (6, (4, 7, 5)),
 (5, (4, 7, 6)),
 (4, (4, 7, 7)),
 (3, (4, 7, 8)),
 (2, (4, 7, 9)),
 (9, (4, 8, 3)),
 (7, (4, 8, 5)),
 (6, (4, 8, 6)),
 (5, (4, 8, 7)),
 (4, (4, 8, 8)),
 (3, (4, 8, 9)),
 (8, (4, 9, 5)),
 (7, (4, 9, 6)),
 (6, (4, 9, 7)),
 (5, (4, 9, 8)),
 (4, (4, 9, 9)),
 (5, (5, 1, 1)),
 (4, (5, 1, 2)),
 (3, (5, 1, 3)),
 (2, (5, 1, 4)),
 (6, (5, 2, 1)),
 (5, (5, 2, 2)),
 (4, (5, 2, 3)),
 (3, (5, 2, 4)),
 (1, (5, 2, 6)),
 (7, (5, 3, 1)),
 (6, (5, 3, 2)),
 (5, (5, 3, 3)),
 (4, (5, 3, 4)),
 (2, (5, 3, 6)),
 (1, (5, 3, 7)),
 (8, (5, 4, 1)),
 (7, (5, 4, 2)),
 (6, (5, 4, 3)),
 (5, (5, 4, 4)),
 (3, (5, 4, 6)),
 (2, (5, 4, 7)),
 (1, (5, 4, 8)),
 (9, (5, 5, 1)),
 (8, (5, 5, 2)),
 (7, (5, 5, 3)),
 (6, (5, 5, 4)),
 (4, (5, 5, 6)),
 (3, (5, 5, 7)),
 (2, (5, 5, 8)),
 (1, (5, 5, 9)),
 (9, (5, 6, 2)),
 (8, (5, 6, 3)),
 (7, (5, 6, 4)),
 (5, (5, 6, 6)),
 (4, (5, 6, 7)),
 (3, (5, 6, 8)),
 (2, (5, 6, 9)),
 (9, (5, 7, 3)),
 (8, (5, 7, 4)),
 (6, (5, 7, 6)),
 (5, (5, 7, 7)),
 (4, (5, 7, 8)),
 (3, (5, 7, 9)),
 (9, (5, 8, 4)),
 (7, (5, 8, 6)),
 (6, (5, 8, 7)),
 (5, (5, 8, 8)),
 (4, (5, 8, 9)),
 (8, (5, 9, 6)),
 (7, (5, 9, 7)),
 (6, (5, 9, 8)),
 (5, (5, 9, 9)),
 (6, (6, 1, 1)),
 (5, (6, 1, 2)),
 (4, (6, 1, 3)),
 (3, (6, 1, 4)),
 (2, (6, 1, 5)),
 (7, (6, 2, 1)),
 (6, (6, 2, 2)),
 (5, (6, 2, 3)),
 (4, (6, 2, 4)),
 (3, (6, 2, 5)),
 (1, (6, 2, 7)),
 (8, (6, 3, 1)),
 (7, (6, 3, 2)),
 (6, (6, 3, 3)),
 (5, (6, 3, 4)),
 (4, (6, 3, 5)),
 (2, (6, 3, 7)),
 (1, (6, 3, 8)),
 (9, (6, 4, 1)),
 (8, (6, 4, 2)),
 (7, (6, 4, 3)),
 (6, (6, 4, 4)),
 (5, (6, 4, 5)),
 (3, (6, 4, 7)),
 (2, (6, 4, 8)),
 (1, (6, 4, 9)),
 (9, (6, 5, 2)),
 (8, (6, 5, 3)),
 (7, (6, 5, 4)),
 (6, (6, 5, 5)),
 (4, (6, 5, 7)),
 (3, (6, 5, 8)),
 (2, (6, 5, 9)),
 (9, (6, 6, 3)),
 (8, (6, 6, 4)),
 (7, (6, 6, 5)),
 (5, (6, 6, 7)),
 (4, (6, 6, 8)),
 (3, (6, 6, 9)),
 (9, (6, 7, 4)),
 (8, (6, 7, 5)),
 (6, (6, 7, 7)),
 (5, (6, 7, 8)),
 (4, (6, 7, 9)),
 (9, (6, 8, 5)),
 (7, (6, 8, 7)),
 (6, (6, 8, 8)),
 (5, (6, 8, 9)),
 (8, (6, 9, 7)),
 (7, (6, 9, 8)),
 (6, (6, 9, 9)),
 (7, (7, 1, 1)),
 (6, (7, 1, 2)),
 (5, (7, 1, 3)),
 (4, (7, 1, 4)),
 (3, (7, 1, 5)),
 (2, (7, 1, 6)),
 (8, (7, 2, 1)),
 (7, (7, 2, 2)),
 (6, (7, 2, 3)),
 (5, (7, 2, 4)),
 (4, (7, 2, 5)),
 (3, (7, 2, 6)),
 (1, (7, 2, 8)),
 (9, (7, 3, 1)),
 (8, (7, 3, 2)),
 (7, (7, 3, 3)),
 (6, (7, 3, 4)),
 (5, (7, 3, 5)),
 (4, (7, 3, 6)),
 (2, (7, 3, 8)),
 (1, (7, 3, 9)),
 (9, (7, 4, 2)),
 (8, (7, 4, 3)),
 (7, (7, 4, 4)),
 (6, (7, 4, 5)),
 (5, (7, 4, 6)),
 (3, (7, 4, 8)),
 (2, (7, 4, 9)),
 (9, (7, 5, 3)),
 (8, (7, 5, 4)),
 (7, (7, 5, 5)),
 (6, (7, 5, 6)),
 (4, (7, 5, 8)),
 (3, (7, 5, 9)),
 (9, (7, 6, 4)),
 (8, (7, 6, 5)),
 (7, (7, 6, 6)),
 (5, (7, 6, 8)),
 (4, (7, 6, 9)),
 (9, (7, 7, 5)),
 (8, (7, 7, 6)),
 (6, (7, 7, 8)),
 (5, (7, 7, 9)),
 (9, (7, 8, 6)),
 (7, (7, 8, 8)),
 (6, (7, 8, 9)),
 (8, (7, 9, 8)),
 (7, (7, 9, 9)),
 (8, (8, 1, 1)),
 (7, (8, 1, 2)),
 (6, (8, 1, 3)),
 (5, (8, 1, 4)),
 (4, (8, 1, 5)),
 (3, (8, 1, 6)),
 (2, (8, 1, 7)),
 (9, (8, 2, 1)),
 (8, (8, 2, 2)),
 (7, (8, 2, 3)),
 (6, (8, 2, 4)),
 (5, (8, 2, 5)),
 (4, (8, 2, 6)),
 (3, (8, 2, 7)),
 (1, (8, 2, 9)),
 (9, (8, 3, 2)),
 (8, (8, 3, 3)),
 (7, (8, 3, 4)),
 (6, (8, 3, 5)),
 (5, (8, 3, 6)),
 (4, (8, 3, 7)),
 (2, (8, 3, 9)),
 (9, (8, 4, 3)),
 (8, (8, 4, 4)),
 (7, (8, 4, 5)),
 (6, (8, 4, 6)),
 (5, (8, 4, 7)),
 (3, (8, 4, 9)),
 (9, (8, 5, 4)),
 (8, (8, 5, 5)),
 (7, (8, 5, 6)),
 (6, (8, 5, 7)),
 (4, (8, 5, 9)),
 (9, (8, 6, 5)),
 (8, (8, 6, 6)),
 (7, (8, 6, 7)),
 (5, (8, 6, 9)),
 (9, (8, 7, 6)),
 (8, (8, 7, 7)),
 (6, (8, 7, 9)),
 (9, (8, 8, 7)),
 (7, (8, 8, 9)),
 (8, (8, 9, 9)),
 (9, (9, 1, 1)),
 (8, (9, 1, 2)),
 (7, (9, 1, 3)),
 (6, (9, 1, 4)),
 (5, (9, 1, 5)),
 (4, (9, 1, 6)),
 (3, (9, 1, 7)),
 (2, (9, 1, 8)),
 (9, (9, 2, 2)),
 (8, (9, 2, 3)),
 (7, (9, 2, 4)),
 (6, (9, 2, 5)),
 (5, (9, 2, 6)),
 (4, (9, 2, 7)),
 (3, (9, 2, 8)),
 (9, (9, 3, 3)),
 (8, (9, 3, 4)),
 (7, (9, 3, 5)),
 (6, (9, 3, 6)),
 (5, (9, 3, 7)),
 (4, (9, 3, 8)),
 (9, (9, 4, 4)),
 (8, (9, 4, 5)),
 (7, (9, 4, 6)),
 (6, (9, 4, 7)),
 (5, (9, 4, 8)),
 (9, (9, 5, 5)),
 (8, (9, 5, 6)),
 (7, (9, 5, 7)),
 (6, (9, 5, 8)),
 (9, (9, 6, 6)),
 (8, (9, 6, 7)),
 (7, (9, 6, 8)),
 (9, (9, 7, 7)),
 (8, (9, 7, 8)),
 (9, (9, 8, 8))]
i: 1
shape (20,)
i: 2
shape (20,)
i: 3
shape (20,)
i: 4
shape (20,)
i: 5
shape (20,)
i: 6
shape (20,)
i: 7
shape (20,)
i: 8
shape (20,)
i: 9
shape (20,)
mean_all: [None, array([ 3.8138524e-01, -5.3348273e-01, -4.0530279e-02, -2.1568920e-02,
       -4.5419887e-02, -3.9922964e-02,  1.4619346e-01, -1.0899709e-03,
       -1.5628593e-02,  1.6619796e-02,  7.5399667e-01,  1.0038687e-02,
       -4.1569476e-03, -1.3463773e-03,  2.6284073e-02, -1.3066486e-01,
        1.6089700e-02,  3.4064485e-03, -7.6916069e-03,  1.3467351e+00],
      dtype=float32), array([ 0.5632997 , -0.23606567,  0.03529728,  0.05637008,  0.08896394,
        0.0098205 ,  0.11907178,  0.02387955,  0.01167488, -0.06603014,
        0.8650148 ,  0.04965711, -0.04710834, -0.02041027, -0.20425291,
        0.8374263 , -0.04731208, -0.00506939, -0.01123512, -0.37868243],
      dtype=float32), array([-0.06308492,  0.01838225, -0.04534565,  0.00333538, -0.02580368,
       -0.03191742,  0.5664756 ,  0.01342527, -0.00085488, -0.0082608 ,
        0.49949518,  0.00438128,  0.00759307, -0.01452809,  0.02505558,
       -0.07829154, -0.00447676, -0.01502543,  0.00237988, -0.51667184],
      dtype=float32), array([-2.50880092e-01,  4.08521175e-01, -1.81819797e-02, -5.89446817e-03,
       -4.32489533e-03,  1.50482291e-02, -2.15851516e-01,  5.84086229e-04,
       -8.29598401e-03, -1.68745161e-03, -8.88453722e-01,  2.58978903e-02,
       -1.43362675e-02, -2.13175407e-03,  8.28797091e-03, -6.37398660e-02,
       -1.66398322e-03,  5.93647128e-03,  5.36587462e-03, -2.12463781e-01],
      dtype=float32), array([-1.2119309 ,  0.14512809, -0.04871553, -0.02711391, -0.04561558,
       -0.00729732,  0.15458587, -0.00841129,  0.007709  ,  0.02456045,
        0.08188199, -0.00572172,  0.0124534 , -0.00745404,  0.09239766,
       -0.55415815,  0.01220031, -0.00583674, -0.01625387, -0.31887743],
      dtype=float32), array([-0.32225934, -0.16319215, -0.09278489, -0.05978573, -0.12276617,
       -0.03863708,  0.11145175, -0.01773277, -0.01252352,  0.0624967 ,
       -0.03837154, -0.00844045,  0.01962946,  0.00715169,  0.2547772 ,
       -1.1065009 ,  0.01841727, -0.01133132,  0.00179882, -0.55971575],
      dtype=float32), array([-0.29701486,  0.5442643 , -0.0045262 , -0.00976586, -0.02285231,
       -0.00664453, -0.41738513,  0.00629855,  0.00292359,  0.00432202,
       -0.5522565 , -0.02327323, -0.01270725,  0.01366973,  0.0033718 ,
        0.18264973,  0.01287993,  0.01923671,  0.00979262,  0.8802266 ],
      dtype=float32), array([ 0.44438323,  0.22243139, -0.02540487,  0.00808726, -0.02186638,
       -0.01411362, -0.16407001,  0.00516614, -0.00808635,  0.00241468,
        0.3986407 ,  0.01008066, -0.00436971, -0.02141126,  0.0063105 ,
        0.09489755, -0.00570899, -0.01588603, -0.00836794, -0.1439578 ],
      dtype=float32), array([ 0.18766601,  0.44192526, -0.05757998, -0.0333101 , -0.08066235,
       -0.01423715, -0.07208412, -0.01906177, -0.01013653,  0.03735772,
       -0.75077677, -0.00234629,  0.00673011,  0.00778805,  0.14532092,
       -0.47159594,  0.0252164 ,  0.00363595,  0.00085887,  0.09943436],
      dtype=float32)]
---
Target calculation: 1+1-1
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7]) 
tar: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
Accuracy (count): tensor(3) 
Accuracy (ratio) tensor(0.0469)
Accuracy:
 [[ 3  0  0  0  0  0 61  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[0.047 0.    0.    0.    0.    0.    0.953 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4 -0.5 -0.0 -0.0 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.8  0.0 -0.0 -0.0  0.0 -0.1  0.0  0.0 -0.0  1.3 
 0.6 -0.2  0.0  0.1  0.1  0.0  0.1  0.0  0.0 -0.1  0.9  0.0 -0.0 -0.0 -0.2  0.8 -0.0 -0.0 -0.0 -0.4 
-0.1  0.0 -0.0  0.0 -0.0 -0.0  0.6  0.0 -0.0 -0.0  0.5  0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0 -0.5 
-0.3  0.4 -0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0 -0.9  0.0 -0.0 -0.0  0.0 -0.1 -0.0  0.0  0.0 -0.2 
-1.2  0.1 -0.0 -0.0 -0.0 -0.0  0.2 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.1 -0.6  0.0 -0.0 -0.0 -0.3 
-0.3 -0.2 -0.1 -0.1 -0.1 -0.0  0.1 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.0  0.3 -1.1  0.0 -0.0  0.0 -0.6 
-0.3  0.5 -0.0 -0.0 -0.0 -0.0 -0.4  0.0  0.0  0.0 -0.6 -0.0 -0.0  0.0  0.0  0.2  0.0  0.0  0.0  0.9 
 0.4  0.2 -0.0  0.0 -0.0 -0.0 -0.2  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.1 -0.0 -0.0 -0.0 -0.1 
 0.2  0.4 -0.1 -0.0 -0.1 -0.0 -0.1 -0.0 -0.0  0.0 -0.8 -0.0  0.0  0.0  0.1 -0.5  0.0  0.0  0.0  0.1 
Minimum distance of calculation. 
true answer: 1 
indices: 1 
distance: 0.0
---
Target calculation: 1+9-8
pred: tensor([7, 1, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 1, 7, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7,
        7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 1, 7, 7, 7]) 
tar: tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 8  0  0  0  0  0 56  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.125 0.    0.    0.    0.    0.    0.875 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4 -0.5 -0.0 -0.0 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.8  0.0 -0.0 -0.0  0.0 -0.1  0.0  0.0 -0.0  1.3 
 0.6 -0.2  0.0  0.1  0.1  0.0  0.1  0.0  0.0 -0.1  0.9  0.0 -0.0 -0.0 -0.2  0.8 -0.0 -0.0 -0.0 -0.4 
-0.1  0.0 -0.0  0.0 -0.0 -0.0  0.6  0.0 -0.0 -0.0  0.5  0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0 -0.5 
-0.3  0.4 -0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0 -0.9  0.0 -0.0 -0.0  0.0 -0.1 -0.0  0.0  0.0 -0.2 
-1.2  0.1 -0.0 -0.0 -0.0 -0.0  0.2 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.1 -0.6  0.0 -0.0 -0.0 -0.3 
-0.3 -0.2 -0.1 -0.1 -0.1 -0.0  0.1 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.0  0.3 -1.1  0.0 -0.0  0.0 -0.6 
-0.3  0.5 -0.0 -0.0 -0.0 -0.0 -0.4  0.0  0.0  0.0 -0.6 -0.0 -0.0  0.0  0.0  0.2  0.0  0.0  0.0  0.9 
 0.4  0.2 -0.0  0.0 -0.0 -0.0 -0.2  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.1 -0.0 -0.0 -0.0 -0.1 
 0.2  0.4 -0.1 -0.0 -0.1 -0.0 -0.1 -0.0 -0.0  0.0 -0.8 -0.0  0.0  0.0  0.1 -0.5  0.0  0.0  0.0  0.1 
Minimum distance of calculation. 
true answer: 2 
indices: 1 
distance: 1.3615258
---
Target calculation: 1+8-4
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0 64  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  1.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
 0.4 -0.5 -0.0 -0.0 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.8  0.0 -0.0 -0.0  0.0 -0.1  0.0  0.0 -0.0  1.3 
 0.6 -0.2  0.0  0.1  0.1  0.0  0.1  0.0  0.0 -0.1  0.9  0.0 -0.0 -0.0 -0.2  0.8 -0.0 -0.0 -0.0 -0.4 
-0.1  0.0 -0.0  0.0 -0.0 -0.0  0.6  0.0 -0.0 -0.0  0.5  0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0 -0.5 
-0.3  0.4 -0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0 -0.9  0.0 -0.0 -0.0  0.0 -0.1 -0.0  0.0  0.0 -0.2 
-1.2  0.1 -0.0 -0.0 -0.0 -0.0  0.2 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.1 -0.6  0.0 -0.0 -0.0 -0.3 
-0.3 -0.2 -0.1 -0.1 -0.1 -0.0  0.1 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.0  0.3 -1.1  0.0 -0.0  0.0 -0.6 
-0.3  0.5 -0.0 -0.0 -0.0 -0.0 -0.4  0.0  0.0  0.0 -0.6 -0.0 -0.0  0.0  0.0  0.2  0.0  0.0  0.0  0.9 
 0.4  0.2 -0.0  0.0 -0.0 -0.0 -0.2  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.1 -0.0 -0.0 -0.0 -0.1 
 0.2  0.4 -0.1 -0.0 -0.1 -0.0 -0.1 -0.0 -0.0  0.0 -0.8 -0.0  0.0  0.0  0.1 -0.5  0.0  0.0  0.0  0.1 
Minimum distance of calculation. 
true answer: 5 
indices: 1 
distance: 1.4866145
---
Target calculation: 2+7-1
pred: tensor([7, 7, 1, 7, 1, 7, 7, 7, 7, 7, 7, 7, 1, 7, 1, 7, 7, 7, 1, 1, 1, 7, 7, 1,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [10  0  0  0  0  0 54  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.156 0.    0.    0.    0.    0.    0.844 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4 -0.5 -0.0 -0.0 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.8  0.0 -0.0 -0.0  0.0 -0.1  0.0  0.0 -0.0  1.3 
 0.6 -0.2  0.0  0.1  0.1  0.0  0.1  0.0  0.0 -0.1  0.9  0.0 -0.0 -0.0 -0.2  0.8 -0.0 -0.0 -0.0 -0.4 
-0.1  0.0 -0.0  0.0 -0.0 -0.0  0.6  0.0 -0.0 -0.0  0.5  0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0 -0.5 
-0.3  0.4 -0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0 -0.9  0.0 -0.0 -0.0  0.0 -0.1 -0.0  0.0  0.0 -0.2 
-1.2  0.1 -0.0 -0.0 -0.0 -0.0  0.2 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.1 -0.6  0.0 -0.0 -0.0 -0.3 
-0.3 -0.2 -0.1 -0.1 -0.1 -0.0  0.1 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.0  0.3 -1.1  0.0 -0.0  0.0 -0.6 
-0.3  0.5 -0.0 -0.0 -0.0 -0.0 -0.4  0.0  0.0  0.0 -0.6 -0.0 -0.0  0.0  0.0  0.2  0.0  0.0  0.0  0.9 
 0.4  0.2 -0.0  0.0 -0.0 -0.0 -0.2  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.1 -0.0 -0.0 -0.0 -0.1 
 0.2  0.4 -0.1 -0.0 -0.1 -0.0 -0.1 -0.0 -0.0  0.0 -0.8 -0.0  0.0  0.0  0.1 -0.5  0.0  0.0  0.0  0.1 
Minimum distance of calculation. 
true answer: 8 
indices: 4 
distance: 1.5586265
---
Target calculation: 2+7-2
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])
Accuracy (count): tensor(60) 
Accuracy (ratio) tensor(0.9375)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 4  0  0  0  0  0 60  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.062 0.    0.    0.    0.    0.    0.938 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4 -0.5 -0.0 -0.0 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.8  0.0 -0.0 -0.0  0.0 -0.1  0.0  0.0 -0.0  1.3 
 0.6 -0.2  0.0  0.1  0.1  0.0  0.1  0.0  0.0 -0.1  0.9  0.0 -0.0 -0.0 -0.2  0.8 -0.0 -0.0 -0.0 -0.4 
-0.1  0.0 -0.0  0.0 -0.0 -0.0  0.6  0.0 -0.0 -0.0  0.5  0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0 -0.5 
-0.3  0.4 -0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0 -0.9  0.0 -0.0 -0.0  0.0 -0.1 -0.0  0.0  0.0 -0.2 
-1.2  0.1 -0.0 -0.0 -0.0 -0.0  0.2 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.1 -0.6  0.0 -0.0 -0.0 -0.3 
-0.3 -0.2 -0.1 -0.1 -0.1 -0.0  0.1 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.0  0.3 -1.1  0.0 -0.0  0.0 -0.6 
-0.3  0.5 -0.0 -0.0 -0.0 -0.0 -0.4  0.0  0.0  0.0 -0.6 -0.0 -0.0  0.0  0.0  0.2  0.0  0.0  0.0  0.9 
 0.4  0.2 -0.0  0.0 -0.0 -0.0 -0.2  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.1 -0.0 -0.0 -0.0 -0.1 
 0.2  0.4 -0.1 -0.0 -0.1 -0.0 -0.1 -0.0 -0.0  0.0 -0.8 -0.0  0.0  0.0  0.1 -0.5  0.0  0.0  0.0  0.1 
Minimum distance of calculation. 
true answer: 7 
indices: 7 
distance: 7.52659e-09
---
Target calculation: 3+3-3
pred: tensor([1, 7, 7, 7, 1, 7, 1, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1,
        7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 6  0  0  0  0  0 58  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.094 0.    0.    0.    0.    0.    0.906 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4 -0.5 -0.0 -0.0 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.8  0.0 -0.0 -0.0  0.0 -0.1  0.0  0.0 -0.0  1.3 
 0.6 -0.2  0.0  0.1  0.1  0.0  0.1  0.0  0.0 -0.1  0.9  0.0 -0.0 -0.0 -0.2  0.8 -0.0 -0.0 -0.0 -0.4 
-0.1  0.0 -0.0  0.0 -0.0 -0.0  0.6  0.0 -0.0 -0.0  0.5  0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0 -0.5 
-0.3  0.4 -0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0 -0.9  0.0 -0.0 -0.0  0.0 -0.1 -0.0  0.0  0.0 -0.2 
-1.2  0.1 -0.0 -0.0 -0.0 -0.0  0.2 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.1 -0.6  0.0 -0.0 -0.0 -0.3 
-0.3 -0.2 -0.1 -0.1 -0.1 -0.0  0.1 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.0  0.3 -1.1  0.0 -0.0  0.0 -0.6 
-0.3  0.5 -0.0 -0.0 -0.0 -0.0 -0.4  0.0  0.0  0.0 -0.6 -0.0 -0.0  0.0  0.0  0.2  0.0  0.0  0.0  0.9 
 0.4  0.2 -0.0  0.0 -0.0 -0.0 -0.2  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.1 -0.0 -0.0 -0.0 -0.1 
 0.2  0.4 -0.1 -0.0 -0.1 -0.0 -0.1 -0.0 -0.0  0.0 -0.8 -0.0  0.0  0.0  0.1 -0.5  0.0  0.0  0.0  0.1 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 0.0
---
Target calculation: 3+5-2
pred: tensor([7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 7, 1, 7, 7, 1,
        7, 7, 7, 7, 7, 7, 7, 1, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [10  0  0  0  0  0 54  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.156 0.    0.    0.    0.    0.    0.844 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4 -0.5 -0.0 -0.0 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.8  0.0 -0.0 -0.0  0.0 -0.1  0.0  0.0 -0.0  1.3 
 0.6 -0.2  0.0  0.1  0.1  0.0  0.1  0.0  0.0 -0.1  0.9  0.0 -0.0 -0.0 -0.2  0.8 -0.0 -0.0 -0.0 -0.4 
-0.1  0.0 -0.0  0.0 -0.0 -0.0  0.6  0.0 -0.0 -0.0  0.5  0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0 -0.5 
-0.3  0.4 -0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0 -0.9  0.0 -0.0 -0.0  0.0 -0.1 -0.0  0.0  0.0 -0.2 
-1.2  0.1 -0.0 -0.0 -0.0 -0.0  0.2 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.1 -0.6  0.0 -0.0 -0.0 -0.3 
-0.3 -0.2 -0.1 -0.1 -0.1 -0.0  0.1 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.0  0.3 -1.1  0.0 -0.0  0.0 -0.6 
-0.3  0.5 -0.0 -0.0 -0.0 -0.0 -0.4  0.0  0.0  0.0 -0.6 -0.0 -0.0  0.0  0.0  0.2  0.0  0.0  0.0  0.9 
 0.4  0.2 -0.0  0.0 -0.0 -0.0 -0.2  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.1 -0.0 -0.0 -0.0 -0.1 
 0.2  0.4 -0.1 -0.0 -0.1 -0.0 -0.1 -0.0 -0.0  0.0 -0.8 -0.0  0.0  0.0  0.1 -0.5  0.0  0.0  0.0  0.1 
Minimum distance of calculation. 
true answer: 6 
indices: 5 
distance: 1.3175994
---
Target calculation: 3+6-3
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 2  0  0  0  0  0 62  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.031 0.    0.    0.    0.    0.    0.969 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4 -0.5 -0.0 -0.0 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.8  0.0 -0.0 -0.0  0.0 -0.1  0.0  0.0 -0.0  1.3 
 0.6 -0.2  0.0  0.1  0.1  0.0  0.1  0.0  0.0 -0.1  0.9  0.0 -0.0 -0.0 -0.2  0.8 -0.0 -0.0 -0.0 -0.4 
-0.1  0.0 -0.0  0.0 -0.0 -0.0  0.6  0.0 -0.0 -0.0  0.5  0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0 -0.5 
-0.3  0.4 -0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0 -0.9  0.0 -0.0 -0.0  0.0 -0.1 -0.0  0.0  0.0 -0.2 
-1.2  0.1 -0.0 -0.0 -0.0 -0.0  0.2 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.1 -0.6  0.0 -0.0 -0.0 -0.3 
-0.3 -0.2 -0.1 -0.1 -0.1 -0.0  0.1 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.0  0.3 -1.1  0.0 -0.0  0.0 -0.6 
-0.3  0.5 -0.0 -0.0 -0.0 -0.0 -0.4  0.0  0.0  0.0 -0.6 -0.0 -0.0  0.0  0.0  0.2  0.0  0.0  0.0  0.9 
 0.4  0.2 -0.0  0.0 -0.0 -0.0 -0.2  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.1 -0.0 -0.0 -0.0 -0.1 
 0.2  0.4 -0.1 -0.0 -0.1 -0.0 -0.1 -0.0 -0.0  0.0 -0.8 -0.0  0.0  0.0  0.1 -0.5  0.0  0.0  0.0  0.1 
Minimum distance of calculation. 
true answer: 6 
indices: 6 
distance: 6.716518e-08
---
Target calculation: 5+3-5
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7,
        7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 5  0  0  0  0  0 59  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.078 0.    0.    0.    0.    0.    0.922 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4 -0.5 -0.0 -0.0 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.8  0.0 -0.0 -0.0  0.0 -0.1  0.0  0.0 -0.0  1.3 
 0.6 -0.2  0.0  0.1  0.1  0.0  0.1  0.0  0.0 -0.1  0.9  0.0 -0.0 -0.0 -0.2  0.8 -0.0 -0.0 -0.0 -0.4 
-0.1  0.0 -0.0  0.0 -0.0 -0.0  0.6  0.0 -0.0 -0.0  0.5  0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0 -0.5 
-0.3  0.4 -0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0 -0.9  0.0 -0.0 -0.0  0.0 -0.1 -0.0  0.0  0.0 -0.2 
-1.2  0.1 -0.0 -0.0 -0.0 -0.0  0.2 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.1 -0.6  0.0 -0.0 -0.0 -0.3 
-0.3 -0.2 -0.1 -0.1 -0.1 -0.0  0.1 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.0  0.3 -1.1  0.0 -0.0  0.0 -0.6 
-0.3  0.5 -0.0 -0.0 -0.0 -0.0 -0.4  0.0  0.0  0.0 -0.6 -0.0 -0.0  0.0  0.0  0.2  0.0  0.0  0.0  0.9 
 0.4  0.2 -0.0  0.0 -0.0 -0.0 -0.2  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.1 -0.0 -0.0 -0.0 -0.1 
 0.2  0.4 -0.1 -0.0 -0.1 -0.0 -0.1 -0.0 -0.0  0.0 -0.8 -0.0  0.0  0.0  0.1 -0.5  0.0  0.0  0.0  0.1 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 1.0039895e-07
---
Target calculation: 9+7-8
pred: tensor([7, 7, 7, 7, 1, 1, 7, 1, 7, 7, 1, 7, 7, 1, 7, 7, 1, 7, 7, 7, 1, 1, 1, 7,
        7, 1, 1, 7, 1, 1, 7, 1, 7, 7, 1, 7, 7, 7, 1, 1, 7, 1, 7, 7, 1, 7, 7, 7,
        1, 1, 1, 7, 7, 1, 1, 7, 1, 1, 7, 7, 7, 7, 7, 7]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [26  0  0  0  0  0 38  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.406 0.    0.    0.    0.    0.    0.594 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4 -0.5 -0.0 -0.0 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.8  0.0 -0.0 -0.0  0.0 -0.1  0.0  0.0 -0.0  1.3 
 0.6 -0.2  0.0  0.1  0.1  0.0  0.1  0.0  0.0 -0.1  0.9  0.0 -0.0 -0.0 -0.2  0.8 -0.0 -0.0 -0.0 -0.4 
-0.1  0.0 -0.0  0.0 -0.0 -0.0  0.6  0.0 -0.0 -0.0  0.5  0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0 -0.5 
-0.3  0.4 -0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0 -0.9  0.0 -0.0 -0.0  0.0 -0.1 -0.0  0.0  0.0 -0.2 
-1.2  0.1 -0.0 -0.0 -0.0 -0.0  0.2 -0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.1 -0.6  0.0 -0.0 -0.0 -0.3 
-0.3 -0.2 -0.1 -0.1 -0.1 -0.0  0.1 -0.0 -0.0  0.1 -0.0 -0.0  0.0  0.0  0.3 -1.1  0.0 -0.0  0.0 -0.6 
-0.3  0.5 -0.0 -0.0 -0.0 -0.0 -0.4  0.0  0.0  0.0 -0.6 -0.0 -0.0  0.0  0.0  0.2  0.0  0.0  0.0  0.9 
 0.4  0.2 -0.0  0.0 -0.0 -0.0 -0.2  0.0 -0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.1 -0.0 -0.0 -0.0 -0.1 
 0.2  0.4 -0.1 -0.0 -0.1 -0.0 -0.1 -0.0 -0.0  0.0 -0.8 -0.0  0.0  0.0  0.1 -0.5  0.0  0.0  0.0  0.1 
Minimum distance of calculation. 
true answer: 8 
indices: 7 
distance: 1.3615259
---
pred: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 1, 7, 7, 7, 7, 1, 7, 7,
        7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 1, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 1, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 1, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 1, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 1, 7, 7, 7, 7, 7, 1, 1, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 1, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7]) 
tar: tensor([1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 7, 6, 5,
        4, 3, 2, 1, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1, 4, 2, 1, 5, 3, 2, 1, 6, 4,
        3, 2, 1, 7, 5, 4, 3, 2, 1, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3, 2, 1,
        8, 7, 6, 5, 4, 3, 2, 3, 2, 4, 3, 1, 5, 4, 2, 1, 6, 5, 3, 2, 1, 7, 6, 4,
        3, 2, 1, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3,
        2, 8, 7, 6, 5, 4, 3, 4, 3, 2, 5, 4, 3, 1, 6, 5, 4, 2, 1, 7, 6, 5, 3, 2,
        1, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 9,
        7, 6, 5, 4, 3, 8, 7, 6, 5, 4, 5, 4, 3, 2, 6, 5, 4, 3, 1, 7, 6, 5, 4, 2,
        1, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 9,
        8, 6, 5, 4, 3, 9, 7, 6, 5, 4, 8, 7, 6, 5, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3,
        1, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 9,
        8, 7, 5, 4, 3, 9, 8, 6, 5, 4, 9, 7, 6, 5, 8, 7, 6, 7, 6, 5, 4, 3, 2, 8,
        7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 9, 8, 7,
        6, 4, 3, 9, 8, 7, 5, 4, 9, 8, 6, 5, 9, 7, 6, 8, 7, 8, 7, 6, 5, 4, 3, 2,
        9, 8, 7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 9, 8, 7, 6, 5, 3, 9, 8, 7,
        6, 4, 9, 8, 7, 5, 9, 8, 6, 9, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 9, 8, 7, 6,
        5, 4, 3, 9, 8, 7, 6, 5, 4, 9, 8, 7, 6, 5, 9, 8, 7, 6, 9, 8, 7, 9, 8, 9])
Accuracy (count): tensor(49) 
Accuracy (ratio) tensor(0.1201)
Accuracy:
 [[ 1  0  0  0  0  0 35  0  0]
 [ 6  0  0  0  0  0 37  0  0]
 [ 4  0  0  0  0  0 44  0  0]
 [ 3  0  0  0  0  0 48  0  0]
 [ 4  0  0  0  0  0 48  0  0]
 [ 6  0  0  0  0  0 45  0  0]
 [ 0  0  0  0  0  0 48  0  0]
 [ 8  0  0  0  0  0 35  0  0]
 [ 2  0  0  0  0  0 34  0  0]]
Accuracy:
 [[0.028 0.    0.    0.    0.    0.    0.972 0.    0.   ]
 [0.14  0.    0.    0.    0.    0.    0.86  0.    0.   ]
 [0.083 0.    0.    0.    0.    0.    0.917 0.    0.   ]
 [0.059 0.    0.    0.    0.    0.    0.941 0.    0.   ]
 [0.077 0.    0.    0.    0.    0.    0.923 0.    0.   ]
 [0.118 0.    0.    0.    0.    0.    0.882 0.    0.   ]
 [0.    0.    0.    0.    0.    0.    1.    0.    0.   ]
 [0.186 0.    0.    0.    0.    0.    0.814 0.    0.   ]
 [0.056 0.    0.    0.    0.    0.    0.944 0.    0.   ]]
results (all): {'reconst_0x0_avg': 0.09375, 'reconst_0x0_all': nan, 'cluster_avg': 0.017404612, 'cluster_all': array([-0.13153575, -0.00699704, -0.17094555, ..., -0.11840829,
        0.00766488,  0.0844696 ], dtype=float32), 'magnitude_avg': 0.1736237396125817, 'magnitude_all': 0.1736237396125817, 'tsne-2d_avg': nan, 'tsne-2d_all': nan, 'mathematics_1+1-1_avg': 0.046875, 'mathematics_1+1-1_all': nan, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+9-8_all': nan, 'mathematics_1+8-4_avg': 0.0, 'mathematics_1+8-4_all': nan, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-1_all': nan, 'mathematics_2+7-2_avg': 0.9375, 'mathematics_2+7-2_all': nan, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+3-3_all': nan, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+5-2_all': nan, 'mathematics_3+6-3_avg': 0.0, 'mathematics_3+6-3_all': nan, 'mathematics_5+3-5_avg': 0.0, 'mathematics_5+3-5_all': nan, 'mathematics_9+7-8_avg': 0.0, 'mathematics_9+7-8_all': nan, 'mathematics_avg': 0.1200980395078659, 'mathematics_all': nan}
results (only averages): {'id': 'vae_cmnist_seed_3', 'model_name': 'VAE_CMNIST', 'target_modality': 0, 'target_property': 1, 'reconst_0x0_avg': 0.09375, 'cluster_avg': 0.017404612, 'magnitude_avg': 0.1736237396125817, 'tsne-2d_avg': nan, 'mathematics_1+1-1_avg': 0.046875, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+8-4_avg': 0.0, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-2_avg': 0.9375, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+6-3_avg': 0.0, 'mathematics_5+3-5_avg': 0.0, 'mathematics_9+7-8_avg': 0.0, 'mathematics_avg': 0.1200980395078659}
Arguments (initial):
{'pretrained_path': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist',
 'run_id': 'test_vae_cmnist',
 'run_type': 'analyse'}
args are updated using pretrained_path:
 {'experiment': 'test_loop_1', 'model': 'VAE_CMNIST', 'run_type': 'train', 'seed': 4, 'num_hidden_layers': 2, 'use_conditional': False, 'use_cnn': False, 'latent_dim': 20, 'obj': 'elbo', 'batch_size': 128, 'epochs': 3, 'K': 20, 'learn_prior': False, 'llik_scaling': 0.0, 'logp': False, 'looser': False, 'print_freq': 100, 'no_analytics': False, 'no_cuda': False, 'run_id': 'test_vae_cmnist', 'pretrained_path': '', 'run_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist', 'output_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/train', 'device': 'cuda'}
Parameters were loaded for classifier
Run ID:
 vae_cmnist_seed_4
Run Directory:
 ./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_4
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist',
 'run_id': 'test_vae_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist',
 'run_id': 'test_vae_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]         941,200
              ReLU-2                  [-1, 400]               0
            Linear-3                  [-1, 400]         160,400
              ReLU-4                  [-1, 400]               0
            Linear-5                   [-1, 20]           8,020
            Linear-6                   [-1, 20]           8,020
            EncMLP-7       [[-1, 20], [-1, 20]]               0
            Linear-8               [-1, 2, 400]           8,400
              ReLU-9               [-1, 2, 400]               0
           Linear-10               [-1, 2, 400]         160,400
             ReLU-11               [-1, 2, 400]               0
           Linear-12              [-1, 2, 2352]         943,152
Print of model summary was skipped because can't multiply sequence by non-int of type 'list'
Loading model VAE_CMNIST from ./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_4

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: elbo 
t_objectives: iwae


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist',
 'run_id': 'test_classifier_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]         941,200
              ReLU-2                  [-1, 400]               0
            Linear-3                   [-1, 20]           8,020
            Linear-4                   [-1, 20]           8,020
            EncMLP-5       [[-1, 20], [-1, 20]]               0
            Linear-6                    [-1, 9]             189
================================================================
Total params: 957,429
Trainable params: 957,429
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.00
Params size (MB): 3.65
Estimated Total Size (MB): 3.66
----------------------------------------------------------------
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: cross 
t_objectives: cross


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'torch.Tensor'> 
label: tensor([5, 1, 5, 7, 3, 3, 6, 3, 2, 2, 4, 1, 3, 9, 4, 2, 2, 1, 6, 8, 8, 2, 1, 8,
        7, 7, 8, 5, 5, 4, 2, 7, 5, 5, 6, 8, 6, 6, 6, 8, 6, 8, 1, 5, 9, 2, 2, 2,
        9, 3, 9, 4, 7, 7, 8, 6, 5, 1, 9, 1, 9, 3, 2, 6, 7, 1, 8, 2, 1, 6, 8, 3,
        3, 2, 9, 5, 6, 6, 5, 3, 4, 5, 2, 8, 5, 5, 2, 2, 7, 6, 3, 1, 1, 1, 2, 1,
        6, 2, 6, 8, 3, 6, 3, 6, 2, 4, 5, 3, 9, 4, 9, 1, 6, 5, 8, 7, 7, 1, 8, 6,
        2, 7, 3, 9, 6, 9, 8, 2], device='cuda:0') 
type(data): <class 'torch.Tensor'> 
data[0].shape: torch.Size([3, 28, 28])

===
Setting info... 
Target modality: 0 
Target property: 0 
Output directory: ./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_4/analyse/0_0 
Number of category 4 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2, 3} 
Start index: 0 
End index: 4 
withzero: False
---
Silhouette values: [ 0.22641154  0.12542358  0.3175315  ...  0.2318176  -0.0982793
  0.337267  ]
Average of silhouette coef: 0.18070757
---

Distance matrix between labels.
  0   1   2   3
0 0.0 2.6 2.5 2.2 
1 2.6 0.0 2.9 1.7 
2 2.5 2.9 0.0 1.6 
3 2.2 1.7 1.6 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 1, 2, 1] 
Latent embbeding: [2.6492271, 2.5347717, 2.1922066, 2.8907568, 1.7438577, 1.5890753] 
Flatten array: [[0.         0.        ]
 [1.         2.64922714]
 [2.         2.53477168]
 [3.         2.19220662]
 [0.         0.        ]
 [1.         2.89075685]
 [2.         1.74385774]
 [0.         0.        ]
 [1.         1.58907533]
 [0.         0.        ]]
Correlation: [[ 1.         -0.19053923]
 [-0.19053923  1.        ]]
---
[[], [], [], []] [2 0 1 ... 0 3 1] [[ 32.740852  45.17641 ]
 [-50.088238 -39.830654]
 [-14.866656  39.659756]
 ...
 [ 10.257511 -33.267242]
 [-44.603687  -9.164608]
 [-39.67473   39.29097 ]]
saved ./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_4/analyse/0_0/latent__0_0.svg
results (all): {'cluster_avg': 0.18070757, 'cluster_all': array([ 0.22641154,  0.12542358,  0.3175315 , ...,  0.2318176 ,
       -0.0982793 ,  0.337267  ], dtype=float32), 'magnitude_avg': 0.19053922974493828, 'magnitude_all': -0.19053922974493828, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'vae_cmnist_seed_4', 'model_name': 'VAE_CMNIST', 'target_modality': 0, 'target_property': 0, 'cluster_avg': 0.18070757, 'magnitude_avg': 0.19053922974493828, 'tsne-2d_avg': nan}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'torch.Tensor'> 
label: tensor([4, 7, 7, 5, 7, 8, 6, 2, 1, 8, 8, 3, 5, 4, 8, 1, 1, 3, 5, 3, 9, 5, 4, 2,
        1, 8, 3, 7, 5, 1, 3, 3, 9, 2, 2, 5, 9, 9, 9, 2, 9, 7, 8, 8, 1, 5, 8, 8,
        8, 8, 1, 5, 7, 1, 7, 7, 1, 1, 9, 3, 6, 8, 5, 4, 8, 2, 9, 1, 3, 2, 8, 3,
        4, 5, 5, 6, 7, 4, 3, 9, 1, 6, 1, 6, 3, 6, 5, 7, 3, 1, 7, 8, 9, 7, 7, 5,
        9, 5, 1, 6, 1, 4, 1, 3, 2, 4, 8, 5, 7, 5, 6, 9, 8, 2, 6, 6, 8, 4, 4, 2,
        4, 8, 8, 1, 4, 2, 6, 9], device='cuda:0') 
type(data): <class 'torch.Tensor'> 
data[0].shape: torch.Size([3, 28, 28])

===
Setting info... 
Target modality: 0 
Target property: 1 
Output directory: ./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_4/analyse/0_1 
Number of category 10 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {1, 2, 3, 4, 5, 6, 7, 8, 9} 
Start index: 1 
End index: 10 
withzero: False
---
pred: tensor([8, 1, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 1, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 1, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 1, 1, 8]) 
tar: tensor([7, 6, 2, 5, 1, 5, 2, 4, 9, 1, 4, 7, 4, 3, 8, 5, 7, 5, 3, 5, 3, 2, 7, 3,
        4, 9, 4, 3, 4, 7, 7, 5, 3, 7, 1, 4, 2, 9, 8, 1, 6, 9, 5, 9, 7, 9, 4, 3,
        6, 3, 3, 2, 8, 2, 9, 6, 4, 3, 2, 3, 3, 6, 5, 2, 6, 3, 7, 8, 1, 2, 4, 1,
        4, 9, 9, 2, 7, 7, 2, 1, 7, 5, 3, 2, 2, 4, 1, 3, 2, 8, 1, 2, 6, 1, 5, 2,
        1, 1, 1, 5, 1, 1, 2, 3, 8, 9, 4, 9, 9, 4, 8, 6, 2, 8, 3, 1, 1, 1, 6, 1,
        7, 3, 4, 5, 3, 9, 4, 5])
Accuracy (count): tensor(9) 
Accuracy (ratio) tensor(0.0703)
Accuracy:
 [[ 1  0  0  0  0  0  0 18  0]
 [ 3  0  0  0  0  0  0 15  0]
 [ 1  0  0  0  0  0  0 18  0]
 [ 1  0  0  0  0  0  0 15  0]
 [ 0  0  0  0  0  0  0 13  0]
 [ 2  0  0  0  0  0  0  7  0]
 [ 1  0  0  0  0  0  0 12  0]
 [ 0  0  0  0  0  0  0  8  0]
 [ 2  0  0  0  0  0  0 11  0]]
Accuracy:
 [[0.053 0.    0.    0.    0.    0.    0.    0.947 0.   ]
 [0.167 0.    0.    0.    0.    0.    0.    0.833 0.   ]
 [0.053 0.    0.    0.    0.    0.    0.    0.947 0.   ]
 [0.062 0.    0.    0.    0.    0.    0.    0.938 0.   ]
 [0.    0.    0.    0.    0.    0.    0.    1.    0.   ]
 [0.222 0.    0.    0.    0.    0.    0.    0.778 0.   ]
 [0.077 0.    0.    0.    0.    0.    0.    0.923 0.   ]
 [0.    0.    0.    0.    0.    0.    0.    1.    0.   ]
 [0.154 0.    0.    0.    0.    0.    0.    0.846 0.   ]]
---
Silhouette values: [ 0.08894942  0.12185347  0.13222107 ... -0.00019341 -0.04264097
  0.12417368]
Average of silhouette coef: 0.039994635
---

Distance matrix between labels.
  1   2   3   4   5   6   7   8   9
1 0.0 2.2 2.3 2.6 2.3 2.5 2.2 2.3 2.5 
2 2.2 0.0 1.2 2.4 1.7 1.4 3.1 2.0 2.6 
3 2.3 1.2 0.0 2.1 1.0 1.4 2.9 1.1 2.1 
4 2.6 2.4 2.1 0.0 1.2 1.3 1.4 1.6 0.3 
5 2.3 1.7 1.0 1.2 0.0 1.1 2.2 0.6 1.2 
6 2.5 1.4 1.4 1.3 1.1 0.0 2.3 1.6 1.5 
7 2.2 3.1 2.9 1.4 2.2 2.3 0.0 2.3 1.2 
8 2.3 2.0 1.1 1.6 0.6 1.6 2.3 0.0 1.5 
9 2.5 2.6 2.1 0.3 1.2 1.5 1.2 1.5 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
Latent embbeding: [2.1816587, 2.2846143, 2.5895534, 2.2886436, 2.527581, 2.236464, 2.2965193, 2.5272083, 1.2015352, 2.4073, 1.720198, 1.3917112, 3.1012454, 1.9658878, 2.5592675, 2.078359, 0.97839564, 1.3542548, 2.930847, 1.134304, 2.133737, 1.220706, 1.3071208, 1.3670791, 1.5898396, 0.32585713, 1.0765111, 2.1594617, 0.5725451, 1.2283278, 2.3333669, 1.5788938, 1.5123082, 2.3128011, 1.211484, 1.5088149] 
Flatten array: [[0.         0.        ]
 [1.         2.18165874]
 [2.         2.28461432]
 [3.         2.58955336]
 [4.         2.2886436 ]
 [5.         2.52758098]
 [6.         2.23646402]
 [7.         2.29651928]
 [8.         2.52720833]
 [0.         0.        ]
 [1.         1.20153522]
 [2.         2.4073    ]
 [3.         1.72019804]
 [4.         1.39171124]
 [5.         3.1012454 ]
 [6.         1.96588778]
 [7.         2.55926752]
 [0.         0.        ]
 [1.         2.07835889]
 [2.         0.97839564]
 [3.         1.35425484]
 [4.         2.93084693]
 [5.         1.13430405]
 [6.         2.13373709]
 [0.         0.        ]
 [1.         1.22070599]
 [2.         1.3071208 ]
 [3.         1.36707914]
 [4.         1.58983958]
 [5.         0.32585713]
 [0.         0.        ]
 [1.         1.07651114]
 [2.         2.15946174]
 [3.         0.57254511]
 [4.         1.22832775]
 [0.         0.        ]
 [1.         2.33336687]
 [2.         1.57889378]
 [3.         1.51230824]
 [0.         0.        ]
 [1.         2.31280112]
 [2.         1.21148396]
 [0.         0.        ]
 [1.         1.50881493]
 [0.         0.        ]]
Correlation: [[1.         0.28500915]
 [0.28500915 1.        ]]
---
[[], [], [], [], [], [], [], [], [], []] [4 7 7 ... 4 6 1] [[ 58.89254    28.663921 ]
 [-27.87695   -46.64529  ]
 [ 51.815468   10.906438 ]
 ...
 [-43.602154   14.9677925]
 [-13.512889   38.111656 ]
 [ 30.630074  -19.158873 ]]
saved ./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_4/analyse/0_1/latent__0_1.svg
---
length of elements: 408 408
length of 1: 36
length of 2: 43
length of 3: 48
length of 4: 51
length of 5: 52
length of 6: 51
length of 7: 48
length of 8: 43
length of 9: 36
all elements:

[(1, (1, 2, 2)),
 (2, (1, 3, 2)),
 (1, (1, 3, 3)),
 (3, (1, 4, 2)),
 (2, (1, 4, 3)),
 (1, (1, 4, 4)),
 (4, (1, 5, 2)),
 (3, (1, 5, 3)),
 (2, (1, 5, 4)),
 (1, (1, 5, 5)),
 (5, (1, 6, 2)),
 (4, (1, 6, 3)),
 (3, (1, 6, 4)),
 (2, (1, 6, 5)),
 (1, (1, 6, 6)),
 (6, (1, 7, 2)),
 (5, (1, 7, 3)),
 (4, (1, 7, 4)),
 (3, (1, 7, 5)),
 (2, (1, 7, 6)),
 (1, (1, 7, 7)),
 (7, (1, 8, 2)),
 (6, (1, 8, 3)),
 (5, (1, 8, 4)),
 (4, (1, 8, 5)),
 (3, (1, 8, 6)),
 (2, (1, 8, 7)),
 (1, (1, 8, 8)),
 (8, (1, 9, 2)),
 (7, (1, 9, 3)),
 (6, (1, 9, 4)),
 (5, (1, 9, 5)),
 (4, (1, 9, 6)),
 (3, (1, 9, 7)),
 (2, (1, 9, 8)),
 (1, (1, 9, 9)),
 (2, (2, 1, 1)),
 (3, (2, 2, 1)),
 (1, (2, 2, 3)),
 (4, (2, 3, 1)),
 (2, (2, 3, 3)),
 (1, (2, 3, 4)),
 (5, (2, 4, 1)),
 (3, (2, 4, 3)),
 (2, (2, 4, 4)),
 (1, (2, 4, 5)),
 (6, (2, 5, 1)),
 (4, (2, 5, 3)),
 (3, (2, 5, 4)),
 (2, (2, 5, 5)),
 (1, (2, 5, 6)),
 (7, (2, 6, 1)),
 (5, (2, 6, 3)),
 (4, (2, 6, 4)),
 (3, (2, 6, 5)),
 (2, (2, 6, 6)),
 (1, (2, 6, 7)),
 (8, (2, 7, 1)),
 (6, (2, 7, 3)),
 (5, (2, 7, 4)),
 (4, (2, 7, 5)),
 (3, (2, 7, 6)),
 (2, (2, 7, 7)),
 (1, (2, 7, 8)),
 (9, (2, 8, 1)),
 (7, (2, 8, 3)),
 (6, (2, 8, 4)),
 (5, (2, 8, 5)),
 (4, (2, 8, 6)),
 (3, (2, 8, 7)),
 (2, (2, 8, 8)),
 (1, (2, 8, 9)),
 (8, (2, 9, 3)),
 (7, (2, 9, 4)),
 (6, (2, 9, 5)),
 (5, (2, 9, 6)),
 (4, (2, 9, 7)),
 (3, (2, 9, 8)),
 (2, (2, 9, 9)),
 (3, (3, 1, 1)),
 (2, (3, 1, 2)),
 (4, (3, 2, 1)),
 (3, (3, 2, 2)),
 (1, (3, 2, 4)),
 (5, (3, 3, 1)),
 (4, (3, 3, 2)),
 (2, (3, 3, 4)),
 (1, (3, 3, 5)),
 (6, (3, 4, 1)),
 (5, (3, 4, 2)),
 (3, (3, 4, 4)),
 (2, (3, 4, 5)),
 (1, (3, 4, 6)),
 (7, (3, 5, 1)),
 (6, (3, 5, 2)),
 (4, (3, 5, 4)),
 (3, (3, 5, 5)),
 (2, (3, 5, 6)),
 (1, (3, 5, 7)),
 (8, (3, 6, 1)),
 (7, (3, 6, 2)),
 (5, (3, 6, 4)),
 (4, (3, 6, 5)),
 (3, (3, 6, 6)),
 (2, (3, 6, 7)),
 (1, (3, 6, 8)),
 (9, (3, 7, 1)),
 (8, (3, 7, 2)),
 (6, (3, 7, 4)),
 (5, (3, 7, 5)),
 (4, (3, 7, 6)),
 (3, (3, 7, 7)),
 (2, (3, 7, 8)),
 (1, (3, 7, 9)),
 (9, (3, 8, 2)),
 (7, (3, 8, 4)),
 (6, (3, 8, 5)),
 (5, (3, 8, 6)),
 (4, (3, 8, 7)),
 (3, (3, 8, 8)),
 (2, (3, 8, 9)),
 (8, (3, 9, 4)),
 (7, (3, 9, 5)),
 (6, (3, 9, 6)),
 (5, (3, 9, 7)),
 (4, (3, 9, 8)),
 (3, (3, 9, 9)),
 (4, (4, 1, 1)),
 (3, (4, 1, 2)),
 (2, (4, 1, 3)),
 (5, (4, 2, 1)),
 (4, (4, 2, 2)),
 (3, (4, 2, 3)),
 (1, (4, 2, 5)),
 (6, (4, 3, 1)),
 (5, (4, 3, 2)),
 (4, (4, 3, 3)),
 (2, (4, 3, 5)),
 (1, (4, 3, 6)),
 (7, (4, 4, 1)),
 (6, (4, 4, 2)),
 (5, (4, 4, 3)),
 (3, (4, 4, 5)),
 (2, (4, 4, 6)),
 (1, (4, 4, 7)),
 (8, (4, 5, 1)),
 (7, (4, 5, 2)),
 (6, (4, 5, 3)),
 (4, (4, 5, 5)),
 (3, (4, 5, 6)),
 (2, (4, 5, 7)),
 (1, (4, 5, 8)),
 (9, (4, 6, 1)),
 (8, (4, 6, 2)),
 (7, (4, 6, 3)),
 (5, (4, 6, 5)),
 (4, (4, 6, 6)),
 (3, (4, 6, 7)),
 (2, (4, 6, 8)),
 (1, (4, 6, 9)),
 (9, (4, 7, 2)),
 (8, (4, 7, 3)),
 (6, (4, 7, 5)),
 (5, (4, 7, 6)),
 (4, (4, 7, 7)),
 (3, (4, 7, 8)),
 (2, (4, 7, 9)),
 (9, (4, 8, 3)),
 (7, (4, 8, 5)),
 (6, (4, 8, 6)),
 (5, (4, 8, 7)),
 (4, (4, 8, 8)),
 (3, (4, 8, 9)),
 (8, (4, 9, 5)),
 (7, (4, 9, 6)),
 (6, (4, 9, 7)),
 (5, (4, 9, 8)),
 (4, (4, 9, 9)),
 (5, (5, 1, 1)),
 (4, (5, 1, 2)),
 (3, (5, 1, 3)),
 (2, (5, 1, 4)),
 (6, (5, 2, 1)),
 (5, (5, 2, 2)),
 (4, (5, 2, 3)),
 (3, (5, 2, 4)),
 (1, (5, 2, 6)),
 (7, (5, 3, 1)),
 (6, (5, 3, 2)),
 (5, (5, 3, 3)),
 (4, (5, 3, 4)),
 (2, (5, 3, 6)),
 (1, (5, 3, 7)),
 (8, (5, 4, 1)),
 (7, (5, 4, 2)),
 (6, (5, 4, 3)),
 (5, (5, 4, 4)),
 (3, (5, 4, 6)),
 (2, (5, 4, 7)),
 (1, (5, 4, 8)),
 (9, (5, 5, 1)),
 (8, (5, 5, 2)),
 (7, (5, 5, 3)),
 (6, (5, 5, 4)),
 (4, (5, 5, 6)),
 (3, (5, 5, 7)),
 (2, (5, 5, 8)),
 (1, (5, 5, 9)),
 (9, (5, 6, 2)),
 (8, (5, 6, 3)),
 (7, (5, 6, 4)),
 (5, (5, 6, 6)),
 (4, (5, 6, 7)),
 (3, (5, 6, 8)),
 (2, (5, 6, 9)),
 (9, (5, 7, 3)),
 (8, (5, 7, 4)),
 (6, (5, 7, 6)),
 (5, (5, 7, 7)),
 (4, (5, 7, 8)),
 (3, (5, 7, 9)),
 (9, (5, 8, 4)),
 (7, (5, 8, 6)),
 (6, (5, 8, 7)),
 (5, (5, 8, 8)),
 (4, (5, 8, 9)),
 (8, (5, 9, 6)),
 (7, (5, 9, 7)),
 (6, (5, 9, 8)),
 (5, (5, 9, 9)),
 (6, (6, 1, 1)),
 (5, (6, 1, 2)),
 (4, (6, 1, 3)),
 (3, (6, 1, 4)),
 (2, (6, 1, 5)),
 (7, (6, 2, 1)),
 (6, (6, 2, 2)),
 (5, (6, 2, 3)),
 (4, (6, 2, 4)),
 (3, (6, 2, 5)),
 (1, (6, 2, 7)),
 (8, (6, 3, 1)),
 (7, (6, 3, 2)),
 (6, (6, 3, 3)),
 (5, (6, 3, 4)),
 (4, (6, 3, 5)),
 (2, (6, 3, 7)),
 (1, (6, 3, 8)),
 (9, (6, 4, 1)),
 (8, (6, 4, 2)),
 (7, (6, 4, 3)),
 (6, (6, 4, 4)),
 (5, (6, 4, 5)),
 (3, (6, 4, 7)),
 (2, (6, 4, 8)),
 (1, (6, 4, 9)),
 (9, (6, 5, 2)),
 (8, (6, 5, 3)),
 (7, (6, 5, 4)),
 (6, (6, 5, 5)),
 (4, (6, 5, 7)),
 (3, (6, 5, 8)),
 (2, (6, 5, 9)),
 (9, (6, 6, 3)),
 (8, (6, 6, 4)),
 (7, (6, 6, 5)),
 (5, (6, 6, 7)),
 (4, (6, 6, 8)),
 (3, (6, 6, 9)),
 (9, (6, 7, 4)),
 (8, (6, 7, 5)),
 (6, (6, 7, 7)),
 (5, (6, 7, 8)),
 (4, (6, 7, 9)),
 (9, (6, 8, 5)),
 (7, (6, 8, 7)),
 (6, (6, 8, 8)),
 (5, (6, 8, 9)),
 (8, (6, 9, 7)),
 (7, (6, 9, 8)),
 (6, (6, 9, 9)),
 (7, (7, 1, 1)),
 (6, (7, 1, 2)),
 (5, (7, 1, 3)),
 (4, (7, 1, 4)),
 (3, (7, 1, 5)),
 (2, (7, 1, 6)),
 (8, (7, 2, 1)),
 (7, (7, 2, 2)),
 (6, (7, 2, 3)),
 (5, (7, 2, 4)),
 (4, (7, 2, 5)),
 (3, (7, 2, 6)),
 (1, (7, 2, 8)),
 (9, (7, 3, 1)),
 (8, (7, 3, 2)),
 (7, (7, 3, 3)),
 (6, (7, 3, 4)),
 (5, (7, 3, 5)),
 (4, (7, 3, 6)),
 (2, (7, 3, 8)),
 (1, (7, 3, 9)),
 (9, (7, 4, 2)),
 (8, (7, 4, 3)),
 (7, (7, 4, 4)),
 (6, (7, 4, 5)),
 (5, (7, 4, 6)),
 (3, (7, 4, 8)),
 (2, (7, 4, 9)),
 (9, (7, 5, 3)),
 (8, (7, 5, 4)),
 (7, (7, 5, 5)),
 (6, (7, 5, 6)),
 (4, (7, 5, 8)),
 (3, (7, 5, 9)),
 (9, (7, 6, 4)),
 (8, (7, 6, 5)),
 (7, (7, 6, 6)),
 (5, (7, 6, 8)),
 (4, (7, 6, 9)),
 (9, (7, 7, 5)),
 (8, (7, 7, 6)),
 (6, (7, 7, 8)),
 (5, (7, 7, 9)),
 (9, (7, 8, 6)),
 (7, (7, 8, 8)),
 (6, (7, 8, 9)),
 (8, (7, 9, 8)),
 (7, (7, 9, 9)),
 (8, (8, 1, 1)),
 (7, (8, 1, 2)),
 (6, (8, 1, 3)),
 (5, (8, 1, 4)),
 (4, (8, 1, 5)),
 (3, (8, 1, 6)),
 (2, (8, 1, 7)),
 (9, (8, 2, 1)),
 (8, (8, 2, 2)),
 (7, (8, 2, 3)),
 (6, (8, 2, 4)),
 (5, (8, 2, 5)),
 (4, (8, 2, 6)),
 (3, (8, 2, 7)),
 (1, (8, 2, 9)),
 (9, (8, 3, 2)),
 (8, (8, 3, 3)),
 (7, (8, 3, 4)),
 (6, (8, 3, 5)),
 (5, (8, 3, 6)),
 (4, (8, 3, 7)),
 (2, (8, 3, 9)),
 (9, (8, 4, 3)),
 (8, (8, 4, 4)),
 (7, (8, 4, 5)),
 (6, (8, 4, 6)),
 (5, (8, 4, 7)),
 (3, (8, 4, 9)),
 (9, (8, 5, 4)),
 (8, (8, 5, 5)),
 (7, (8, 5, 6)),
 (6, (8, 5, 7)),
 (4, (8, 5, 9)),
 (9, (8, 6, 5)),
 (8, (8, 6, 6)),
 (7, (8, 6, 7)),
 (5, (8, 6, 9)),
 (9, (8, 7, 6)),
 (8, (8, 7, 7)),
 (6, (8, 7, 9)),
 (9, (8, 8, 7)),
 (7, (8, 8, 9)),
 (8, (8, 9, 9)),
 (9, (9, 1, 1)),
 (8, (9, 1, 2)),
 (7, (9, 1, 3)),
 (6, (9, 1, 4)),
 (5, (9, 1, 5)),
 (4, (9, 1, 6)),
 (3, (9, 1, 7)),
 (2, (9, 1, 8)),
 (9, (9, 2, 2)),
 (8, (9, 2, 3)),
 (7, (9, 2, 4)),
 (6, (9, 2, 5)),
 (5, (9, 2, 6)),
 (4, (9, 2, 7)),
 (3, (9, 2, 8)),
 (9, (9, 3, 3)),
 (8, (9, 3, 4)),
 (7, (9, 3, 5)),
 (6, (9, 3, 6)),
 (5, (9, 3, 7)),
 (4, (9, 3, 8)),
 (9, (9, 4, 4)),
 (8, (9, 4, 5)),
 (7, (9, 4, 6)),
 (6, (9, 4, 7)),
 (5, (9, 4, 8)),
 (9, (9, 5, 5)),
 (8, (9, 5, 6)),
 (7, (9, 5, 7)),
 (6, (9, 5, 8)),
 (9, (9, 6, 6)),
 (8, (9, 6, 7)),
 (7, (9, 6, 8)),
 (9, (9, 7, 7)),
 (8, (9, 7, 8)),
 (9, (9, 8, 8))]
i: 1
shape (20,)
i: 2
shape (20,)
i: 3
shape (20,)
i: 4
shape (20,)
i: 5
shape (20,)
i: 6
shape (20,)
i: 7
shape (20,)
i: 8
shape (20,)
i: 9
shape (20,)
mean_all: [None, array([ 1.0775347e+00,  1.7768998e-02, -2.0788820e-02,  8.5428106e-03,
        8.0748117e-03, -8.5523102e-04,  1.4029430e+00,  2.6308731e-04,
       -6.8389564e-03, -1.5987454e-03, -4.7193176e-01, -2.4769975e-02,
       -1.7850857e-02,  7.8073959e-03,  2.0316822e-02, -1.8661344e-04,
       -1.8993568e-02,  2.2607120e-03,  2.5384033e-01, -2.4435796e-01],
      dtype=float32), array([ 0.72899216,  0.03496799, -0.01286078,  0.02857427,  0.03014775,
       -0.01940258, -0.42562842, -0.02142825, -0.00243674,  0.00728971,
        0.07099687, -0.03316599, -0.04509201,  0.01287014,  0.01723536,
       -0.0208434 , -0.04401487, -0.00110786,  0.962968  , -0.9463363 ],
      dtype=float32), array([ 0.6718032 ,  0.01848429, -0.00639746,  0.04225503,  0.00231712,
       -0.0035437 , -0.834844  ,  0.02729334,  0.02516682,  0.01133917,
       -0.43529642, -0.00984057, -0.03498504,  0.02232653,  0.0090978 ,
        0.0112613 , -0.00195754,  0.01184141,  0.40635875, -0.11065449],
      dtype=float32), array([-0.83725524,  0.02669686, -0.01237797,  0.03332105,  0.00333085,
       -0.02179732,  0.08250399,  0.02024487,  0.00146584,  0.02303005,
        0.38285294,  0.0087219 , -0.02825156, -0.00141762,  0.01767101,
        0.00132385,  0.00978168,  0.01659769, -0.09042896,  0.42045084],
      dtype=float32), array([ 0.05883621,  0.01561231, -0.00862459,  0.04368212, -0.02142094,
        0.02102842, -0.52900857,  0.04088064,  0.02240232,  0.00704843,
       -0.10425802, -0.00259401, -0.0503966 ,  0.03042282,  0.02309752,
        0.03266748,  0.01384821, -0.01784889, -0.14080743,  0.16408655],
      dtype=float32), array([-0.4911599 ,  0.00674022, -0.00567725,  0.05693607,  0.01262472,
       -0.01713544, -0.48031718,  0.01745158,  0.01750028,  0.03375711,
        0.03324987, -0.00889715, -0.02387168,  0.01512714,  0.00369456,
       -0.00266771,  0.02706594,  0.01011412,  0.52371323, -0.45703304],
      dtype=float32), array([-0.7703131 ,  0.01224941, -0.02654122,  0.02653537, -0.01884364,
       -0.01125877,  1.3749162 ,  0.01053832, -0.00919661,  0.02344028,
        0.26025814, -0.01245644, -0.01550017,  0.00749391,  0.02668906,
        0.02096702, -0.00715236,  0.01365183, -0.51004714,  0.43677706],
      dtype=float32), array([ 0.40094614,  0.03797635, -0.02614194,  0.00847816,  0.009467  ,
       -0.01942031, -0.55616385, -0.00258476, -0.00844   , -0.01780979,
       -0.16727497, -0.02154168, -0.01164858, -0.00673457,  0.00079043,
       -0.03281863, -0.04844524,  0.00774608, -0.5691855 ,  0.20761584],
      dtype=float32), array([-7.7784520e-01,  3.3135459e-02, -2.7382907e-02,  2.9342461e-02,
       -2.0927530e-04, -1.5996229e-02,  1.8345687e-01,  9.5413150e-03,
       -2.7774568e-03,  1.3202602e-02,  2.3573720e-01, -4.8971255e-03,
       -2.2475338e-02,  4.0264842e-03,  1.2648473e-02, -3.1457194e-03,
       -1.4660809e-03,  1.2882349e-02, -3.2470420e-01,  5.4268885e-01],
      dtype=float32)]
---
Target calculation: 1+1-1
pred: tensor([8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 1, 8, 1, 1, 8, 8, 8, 8, 8, 8,
        8, 8, 1, 1, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 1, 8, 1, 1, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 1, 1, 8, 8, 8]) 
tar: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
Accuracy (count): tensor(16) 
Accuracy (ratio) tensor(0.2500)
Accuracy:
 [[16  0  0  0  0  0  0 48  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[0.25 0.   0.   0.   0.   0.   0.   0.75 0.  ]
 [ nan  nan  nan  nan  nan  nan  nan  nan  nan]
 [ nan  nan  nan  nan  nan  nan  nan  nan  nan]
 [ nan  nan  nan  nan  nan  nan  nan  nan  nan]
 [ nan  nan  nan  nan  nan  nan  nan  nan  nan]
 [ nan  nan  nan  nan  nan  nan  nan  nan  nan]
 [ nan  nan  nan  nan  nan  nan  nan  nan  nan]
 [ nan  nan  nan  nan  nan  nan  nan  nan  nan]
 [ nan  nan  nan  nan  nan  nan  nan  nan  nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0 -0.0 -0.5 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.4 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  1.0 -0.9 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.4 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.4 -0.1 
-0.8  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0  0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.1  0.4 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.1 -0.0 -0.1  0.0  0.0  0.0  0.0 -0.0 -0.1  0.2 
-0.5  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0  0.0 -0.0 -0.0  0.0  0.0 -0.0  0.0  0.0  0.5 -0.5 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.5  0.4 
 0.4  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0 -0.2 -0.0 -0.0 -0.0  0.0 -0.0 -0.0  0.0 -0.6  0.2 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.2 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.3  0.5 
Minimum distance of calculation. 
true answer: 1 
indices: 1 
distance: 0.0
---
Target calculation: 1+9-8
pred: tensor([8, 8, 1, 8, 8, 1, 1, 1, 8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8, 1, 8, 8, 1,
        8, 1, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8, 1, 8, 8, 1, 1, 1, 1, 1, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 1, 8, 1]) 
tar: tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [21  0  0  0  0  0  0 43  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.328 0.    0.    0.    0.    0.    0.    0.672 0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0 -0.0 -0.5 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.4 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  1.0 -0.9 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.4 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.4 -0.1 
-0.8  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0  0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.1  0.4 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.1 -0.0 -0.1  0.0  0.0  0.0  0.0 -0.0 -0.1  0.2 
-0.5  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0  0.0 -0.0 -0.0  0.0  0.0 -0.0  0.0  0.0  0.5 -0.5 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.5  0.4 
 0.4  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0 -0.2 -0.0 -0.0 -0.0  0.0 -0.0 -0.0  0.0 -0.6  0.2 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.2 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.3  0.5 
Minimum distance of calculation. 
true answer: 2 
indices: 1 
distance: 1.5088149
---
Target calculation: 1+8-4
pred: tensor([8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]) 
tar: tensor([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 2  0  0  0  0  0  0 62  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.031 0.    0.    0.    0.    0.    0.    0.969 0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0 -0.0 -0.5 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.4 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  1.0 -0.9 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.4 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.4 -0.1 
-0.8  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0  0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.1  0.4 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.1 -0.0 -0.1  0.0  0.0  0.0  0.0 -0.0 -0.1  0.2 
-0.5  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0  0.0 -0.0 -0.0  0.0  0.0 -0.0  0.0  0.0  0.5 -0.5 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.5  0.4 
 0.4  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0 -0.2 -0.0 -0.0 -0.0  0.0 -0.0 -0.0  0.0 -0.6  0.2 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.2 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.3  0.5 
Minimum distance of calculation. 
true answer: 5 
indices: 1 
distance: 1.5898396
---
Target calculation: 2+7-1
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 1,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(61) 
Accuracy (ratio) tensor(0.9531)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 3  0  0  0  0  0  0 61  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.047 0.    0.    0.    0.    0.    0.    0.953 0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0 -0.0 -0.5 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.4 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  1.0 -0.9 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.4 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.4 -0.1 
-0.8  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0  0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.1  0.4 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.1 -0.0 -0.1  0.0  0.0  0.0  0.0 -0.0 -0.1  0.2 
-0.5  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0  0.0 -0.0 -0.0  0.0  0.0 -0.0  0.0  0.0  0.5 -0.5 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.5  0.4 
 0.4  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0 -0.2 -0.0 -0.0 -0.0  0.0 -0.0 -0.0  0.0 -0.6  0.2 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.2 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.3  0.5 
Minimum distance of calculation. 
true answer: 8 
indices: 4 
distance: 1.0497116
---
Target calculation: 2+7-2
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8,
        8, 1, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8]) 
tar: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 5  0  0  0  0  0  0 59  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.078 0.    0.    0.    0.    0.    0.    0.922 0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0 -0.0 -0.5 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.4 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  1.0 -0.9 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.4 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.4 -0.1 
-0.8  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0  0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.1  0.4 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.1 -0.0 -0.1  0.0  0.0  0.0  0.0 -0.0 -0.1  0.2 
-0.5  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0  0.0 -0.0 -0.0  0.0  0.0 -0.0  0.0  0.0  0.5 -0.5 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.5  0.4 
 0.4  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0 -0.2 -0.0 -0.0 -0.0  0.0 -0.0 -0.0  0.0 -0.6  0.2 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.2 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.3  0.5 
Minimum distance of calculation. 
true answer: 7 
indices: 7 
distance: 3.226196e-09
---
Target calculation: 3+3-3
pred: tensor([8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1,
        8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 1, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 6  0  0  0  0  0  0 58  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.094 0.    0.    0.    0.    0.    0.    0.906 0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0 -0.0 -0.5 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.4 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  1.0 -0.9 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.4 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.4 -0.1 
-0.8  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0  0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.1  0.4 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.1 -0.0 -0.1  0.0  0.0  0.0  0.0 -0.0 -0.1  0.2 
-0.5  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0  0.0 -0.0 -0.0  0.0  0.0 -0.0  0.0  0.0  0.5 -0.5 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.5  0.4 
 0.4  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0 -0.2 -0.0 -0.0 -0.0  0.0 -0.0 -0.0  0.0 -0.6  0.2 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.2 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.3  0.5 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 0.0
---
Target calculation: 3+5-2
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 1  0  0  0  0  0  0 63  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.016 0.    0.    0.    0.    0.    0.    0.984 0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0 -0.0 -0.5 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.4 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  1.0 -0.9 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.4 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.4 -0.1 
-0.8  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0  0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.1  0.4 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.1 -0.0 -0.1  0.0  0.0  0.0  0.0 -0.0 -0.1  0.2 
-0.5  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0  0.0 -0.0 -0.0  0.0  0.0 -0.0  0.0  0.0  0.5 -0.5 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.5  0.4 
 0.4  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0 -0.2 -0.0 -0.0 -0.0  0.0 -0.0 -0.0  0.0 -0.6  0.2 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.2 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.3  0.5 
Minimum distance of calculation. 
true answer: 6 
indices: 8 
distance: 1.0932744
---
Target calculation: 3+6-3
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 1, 8, 1, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8,
        1, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 8  0  0  0  0  0  0 56  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.125 0.    0.    0.    0.    0.    0.    0.875 0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0 -0.0 -0.5 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.4 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  1.0 -0.9 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.4 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.4 -0.1 
-0.8  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0  0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.1  0.4 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.1 -0.0 -0.1  0.0  0.0  0.0  0.0 -0.0 -0.1  0.2 
-0.5  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0  0.0 -0.0 -0.0  0.0  0.0 -0.0  0.0  0.0  0.5 -0.5 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.5  0.4 
 0.4  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0 -0.2 -0.0 -0.0 -0.0  0.0 -0.0 -0.0  0.0 -0.6  0.2 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.2 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.3  0.5 
Minimum distance of calculation. 
true answer: 6 
indices: 6 
distance: 6.0895786e-08
---
Target calculation: 5+3-5
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 1]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 3  0  0  0  0  0  0 61  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.047 0.    0.    0.    0.    0.    0.    0.953 0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0 -0.0 -0.5 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.4 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  1.0 -0.9 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.4 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.4 -0.1 
-0.8  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0  0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.1  0.4 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.1 -0.0 -0.1  0.0  0.0  0.0  0.0 -0.0 -0.1  0.2 
-0.5  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0  0.0 -0.0 -0.0  0.0  0.0 -0.0  0.0  0.0  0.5 -0.5 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.5  0.4 
 0.4  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0 -0.2 -0.0 -0.0 -0.0  0.0 -0.0 -0.0  0.0 -0.6  0.2 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.2 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.3  0.5 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 6.685808e-08
---
Target calculation: 9+7-8
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 1,
        1, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8, 8, 1]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(55) 
Accuracy (ratio) tensor(0.8594)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 9  0  0  0  0  0  0 55  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.141 0.    0.    0.    0.    0.    0.    0.859 0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 1.1  0.0 -0.0  0.0  0.0 -0.0  1.4  0.0 -0.0 -0.0 -0.5 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0  0.3 -0.2 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.4 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 -0.0  1.0 -0.9 
 0.7  0.0 -0.0  0.0  0.0 -0.0 -0.8  0.0  0.0  0.0 -0.4 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0  0.4 -0.1 
-0.8  0.0 -0.0  0.0  0.0 -0.0  0.1  0.0  0.0  0.0  0.4  0.0 -0.0 -0.0  0.0  0.0  0.0  0.0 -0.1  0.4 
 0.1  0.0 -0.0  0.0 -0.0  0.0 -0.5  0.0  0.0  0.0 -0.1 -0.0 -0.1  0.0  0.0  0.0  0.0 -0.0 -0.1  0.2 
-0.5  0.0 -0.0  0.1  0.0 -0.0 -0.5  0.0  0.0  0.0  0.0 -0.0 -0.0  0.0  0.0 -0.0  0.0  0.0  0.5 -0.5 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  1.4  0.0 -0.0  0.0  0.3 -0.0 -0.0  0.0  0.0  0.0 -0.0  0.0 -0.5  0.4 
 0.4  0.0 -0.0  0.0  0.0 -0.0 -0.6 -0.0 -0.0 -0.0 -0.2 -0.0 -0.0 -0.0  0.0 -0.0 -0.0  0.0 -0.6  0.2 
-0.8  0.0 -0.0  0.0 -0.0 -0.0  0.2  0.0 -0.0  0.0  0.2 -0.0 -0.0  0.0  0.0 -0.0 -0.0  0.0 -0.3  0.5 
Minimum distance of calculation. 
true answer: 8 
indices: 7 
distance: 1.5088149
---
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 1, 1, 8, 1, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        1, 1, 8, 8, 1, 8, 1, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8,
        1, 8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 1, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 1, 8,
        8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 1, 8, 8, 8, 8,
        8, 8, 1, 8, 8, 1, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 1, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 1, 8, 1, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8]) 
tar: tensor([1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 7, 6, 5,
        4, 3, 2, 1, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1, 4, 2, 1, 5, 3, 2, 1, 6, 4,
        3, 2, 1, 7, 5, 4, 3, 2, 1, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3, 2, 1,
        8, 7, 6, 5, 4, 3, 2, 3, 2, 4, 3, 1, 5, 4, 2, 1, 6, 5, 3, 2, 1, 7, 6, 4,
        3, 2, 1, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3,
        2, 8, 7, 6, 5, 4, 3, 4, 3, 2, 5, 4, 3, 1, 6, 5, 4, 2, 1, 7, 6, 5, 3, 2,
        1, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 9,
        7, 6, 5, 4, 3, 8, 7, 6, 5, 4, 5, 4, 3, 2, 6, 5, 4, 3, 1, 7, 6, 5, 4, 2,
        1, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 9,
        8, 6, 5, 4, 3, 9, 7, 6, 5, 4, 8, 7, 6, 5, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3,
        1, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 9,
        8, 7, 5, 4, 3, 9, 8, 6, 5, 4, 9, 7, 6, 5, 8, 7, 6, 7, 6, 5, 4, 3, 2, 8,
        7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 9, 8, 7,
        6, 4, 3, 9, 8, 7, 5, 4, 9, 8, 6, 5, 9, 7, 6, 8, 7, 8, 7, 6, 5, 4, 3, 2,
        9, 8, 7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 9, 8, 7, 6, 5, 3, 9, 8, 7,
        6, 4, 9, 8, 7, 5, 9, 8, 6, 9, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 9, 8, 7, 6,
        5, 4, 3, 9, 8, 7, 6, 5, 4, 9, 8, 7, 6, 5, 9, 8, 7, 6, 9, 8, 7, 9, 8, 9])
Accuracy (count): tensor(42) 
Accuracy (ratio) tensor(0.1029)
Accuracy:
 [[ 4  0  0  0  0  0  0 32  0]
 [ 6  0  0  0  0  0  0 37  0]
 [ 9  0  0  0  0  0  0 39  0]
 [ 8  0  0  0  0  0  0 43  0]
 [ 6  0  0  0  0  0  0 46  0]
 [ 3  0  0  0  0  0  0 48  0]
 [ 4  0  0  0  0  0  0 44  0]
 [ 5  0  0  0  0  0  0 38  0]
 [ 1  0  0  0  0  0  0 35  0]]
Accuracy:
 [[0.111 0.    0.    0.    0.    0.    0.    0.889 0.   ]
 [0.14  0.    0.    0.    0.    0.    0.    0.86  0.   ]
 [0.188 0.    0.    0.    0.    0.    0.    0.812 0.   ]
 [0.157 0.    0.    0.    0.    0.    0.    0.843 0.   ]
 [0.115 0.    0.    0.    0.    0.    0.    0.885 0.   ]
 [0.059 0.    0.    0.    0.    0.    0.    0.941 0.   ]
 [0.083 0.    0.    0.    0.    0.    0.    0.917 0.   ]
 [0.116 0.    0.    0.    0.    0.    0.    0.884 0.   ]
 [0.028 0.    0.    0.    0.    0.    0.    0.972 0.   ]]
results (all): {'reconst_0x0_avg': 0.0703125, 'reconst_0x0_all': nan, 'cluster_avg': 0.039994635, 'cluster_all': array([ 0.08894942,  0.12185347,  0.13222107, ..., -0.00019341,
       -0.04264097,  0.12417368], dtype=float32), 'magnitude_avg': 0.28500915326363974, 'magnitude_all': 0.28500915326363974, 'tsne-2d_avg': nan, 'tsne-2d_all': nan, 'mathematics_1+1-1_avg': 0.25, 'mathematics_1+1-1_all': nan, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+9-8_all': nan, 'mathematics_1+8-4_avg': 0.0, 'mathematics_1+8-4_all': nan, 'mathematics_2+7-1_avg': 0.953125, 'mathematics_2+7-1_all': nan, 'mathematics_2+7-2_avg': 0.0, 'mathematics_2+7-2_all': nan, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+3-3_all': nan, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+5-2_all': nan, 'mathematics_3+6-3_avg': 0.0, 'mathematics_3+6-3_all': nan, 'mathematics_5+3-5_avg': 0.0, 'mathematics_5+3-5_all': nan, 'mathematics_9+7-8_avg': 0.859375, 'mathematics_9+7-8_all': nan, 'mathematics_avg': 0.10294117778539658, 'mathematics_all': nan}
results (only averages): {'id': 'vae_cmnist_seed_4', 'model_name': 'VAE_CMNIST', 'target_modality': 0, 'target_property': 1, 'reconst_0x0_avg': 0.0703125, 'cluster_avg': 0.039994635, 'magnitude_avg': 0.28500915326363974, 'tsne-2d_avg': nan, 'mathematics_1+1-1_avg': 0.25, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+8-4_avg': 0.0, 'mathematics_2+7-1_avg': 0.953125, 'mathematics_2+7-2_avg': 0.0, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+6-3_avg': 0.0, 'mathematics_5+3-5_avg': 0.0, 'mathematics_9+7-8_avg': 0.859375, 'mathematics_avg': 0.10294117778539658}
Arguments (initial):
{'pretrained_path': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'analyse'}
args are updated using pretrained_path:
 {'experiment': 'test_loop_1', 'model': 'VAE_OSCN', 'run_type': 'train', 'seed': 4, 'num_hidden_layers': 2, 'use_conditional': False, 'use_cnn': False, 'latent_dim': 20, 'obj': 'elbo', 'batch_size': 128, 'epochs': 3, 'K': 20, 'learn_prior': False, 'llik_scaling': 0.0, 'logp': False, 'looser': False, 'print_freq': 100, 'no_analytics': False, 'no_cuda': False, 'run_id': 'test_vae_oscn', 'pretrained_path': '', 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn', 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train', 'device': 'cuda'}
Parameters were loaded for classifier
Run ID:
 vae_oscn_seed_3
Run Directory:
 ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_3
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]       1,229,200
              ReLU-2                  [-1, 400]               0
            Linear-3                  [-1, 400]         160,400
              ReLU-4                  [-1, 400]               0
            Linear-5                   [-1, 20]           8,020
            Linear-6                   [-1, 20]           8,020
            EncMLP-7       [[-1, 20], [-1, 20]]               0
            Linear-8               [-1, 2, 400]           8,400
              ReLU-9               [-1, 2, 400]               0
           Linear-10               [-1, 2, 400]         160,400
             ReLU-11               [-1, 2, 400]               0
           Linear-12              [-1, 2, 3072]       1,231,872
Print of model summary was skipped because can't multiply sequence by non-int of type 'list'
Loading model VAE_OSCN from ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_3

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: elbo 
t_objectives: iwae


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn',
 'run_id': 'test_classifier_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]       1,229,200
              ReLU-2                  [-1, 400]               0
            Linear-3                   [-1, 20]           8,020
            Linear-4                   [-1, 20]           8,020
            EncMLP-5       [[-1, 20], [-1, 20]]               0
            Linear-6                    [-1, 9]             189
================================================================
Total params: 1,245,429
Trainable params: 1,245,429
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.00
Params size (MB): 4.75
Estimated Total Size (MB): 4.77
----------------------------------------------------------------
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: cross 
t_objectives: cross


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'tuple'> 
label: ('r9s', 'b1j', 'r9j', 'r3j', 'w1t', 'r9s', 'w6j', 'b2j', 'r3j', 'g3s', 'g2t', 'b5s', 'w1j', 'g5t', 'b4t', 'b2t', 'r3s', 'r9t', 'g4s', 'r5t', 'g4t', 'w6s', 'g7j', 'b9t', 'r1j', 'r4t', 'b9t', 'b8t', 'b5j', 'g2t', 'w1s', 'g7t', 'r8j', 'g9j', 'w4t', 'b7s', 'r3j', 'b3s', 'b7t', 'g1s', 'g2t', 'b8s', 'g9t', 'w1s', 'b9s', 'g4s', 'w7j', 'w4s', 'g7s', 'b7j', 'g7s', 'b3s', 'g4j', 'g2j', 'g4j', 'g1j', 'b6j', 'g8j', 'w7t', 'w8j', 'r6t', 'w3s', 'b7t', 'r3j', 'b4j', 'b7j', 'r7t', 'r6j', 'r2j', 'b6j', 'g6s', 'r3t', 'g7j', 'b8s', 'w9s', 'b7s', 'r2j', 'r4t', 'w8s', 'w2s', 'g8t', 'r4j', 'r4s', 'g6s', 'g7j', 'g7j', 'g2s', 'g8j', 'r7s', 'w8t', 'g9s', 'g6j', 'r8t', 'g5j', 'b5s', 'b3j', 'g1j', 'w7j', 'b5s', 'g2s', 'r5t', 'g7j', 'w8j', 'b5j', 'r4j', 'g8t', 'g2j', 'w9j', 'b7s', 'g1s', 'g5s', 'b2s', 'w5j', 'w8s', 'b2t', 'b9s', 'b7t', 'r2s', 'g6j', 'b2j', 'r6t', 'g5j', 'r9j', 'g9j', 'g6j', 'w1j', 'b6t', 'b6s') 
type(data): <class 'torch.Tensor'> 
data[0].shape: torch.Size([3, 32, 32])

===
Setting info... 
Target modality: 0 
Target property: 0 
Output directory: ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_3/analyse/0_0 
Number of category 4 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2, 3} 
Start index: 0 
End index: 4 
withzero: False
---
Silhouette values: [0.27799878 0.08922554 0.2714718  ... 0.14461629 0.16704541 0.14038454]
Average of silhouette coef: 0.13380304
---

Distance matrix between labels.
  0   1   2   3
0 0.0 2.1 1.9 2.5 
1 2.1 0.0 3.2 3.0 
2 1.9 3.2 0.0 3.1 
3 2.5 3.0 3.1 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 1, 2, 1] 
Latent embbeding: [2.1039972, 1.8734735, 2.493269, 3.2129364, 2.9649937, 3.113894] 
Flatten array: [[0.         0.        ]
 [1.         2.10399723]
 [2.         1.87347353]
 [3.         2.49326897]
 [0.         0.        ]
 [1.         3.2129364 ]
 [2.         2.96499372]
 [0.         0.        ]
 [1.         3.11389399]
 [0.         0.        ]]
Correlation: [[ 1.         -0.30027083]
 [-0.30027083  1.        ]]
---
[[], [], [], []] [3 1 3 ... 2 3 2] [[ 50.055996 -42.287056]
 [-43.39643  -43.99669 ]
 [ 58.48153  -17.864956]
 ...
 [-30.844479 -27.350048]
 [-13.637708 -47.77768 ]
 [-36.48421  -15.964373]]
saved ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_3/analyse/0_0/latent__0_0.svg
results (all): {'cluster_avg': 0.13380304, 'cluster_all': array([0.27799878, 0.08922554, 0.2714718 , ..., 0.14461629, 0.16704541,
       0.14038454], dtype=float32), 'magnitude_avg': 0.30027083161594637, 'magnitude_all': -0.30027083161594637, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'vae_oscn_seed_3', 'model_name': 'VAE_OSCN', 'target_modality': 0, 'target_property': 0, 'cluster_avg': 0.13380304, 'magnitude_avg': 0.30027083161594637, 'tsne-2d_avg': nan}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'tuple'> 
label: ('w5s', 'r5j', 'b2j', 'b6j', 'w3s', 'b3s', 'b7t', 'g7t', 'w4s', 'b8s', 'b4t', 'w3t', 'g2j', 'w3j', 'w3s', 'w4j', 'g6s', 'b9s', 'g1s', 'g7j', 'b4j', 'b1t', 'r1j', 'b9s', 'w3s', 'w2s', 'b2s', 'b7j', 'r5j', 'b9s', 'w4j', 'w2s', 'b1s', 'r9t', 'r1j', 'w3s', 'w8s', 'r4s', 'w1t', 'g2s', 'w6t', 'r1t', 'g9t', 'r5s', 'r1j', 'w1t', 'w7s', 'r6j', 'r7s', 'w4s', 'b1j', 'b1s', 'b9t', 'g7s', 'r4t', 'g3j', 'g8j', 'g6j', 'b2t', 'r3j', 'g9s', 'r2j', 'b6s', 'b3t', 'b3j', 'b8j', 'b8s', 'w1j', 'w5j', 'g1t', 'r8t', 'w9t', 'g7s', 'g5t', 'g5j', 'b9j', 'r3j', 'b1s', 'w4t', 'g4j', 'g1s', 'g8t', 'w1j', 'r1s', 'g6t', 'w1j', 'w4s', 'r5t', 'b4j', 'r4t', 'r6t', 'w9t', 'w8s', 'g8s', 'w6j', 'g8j', 'g3j', 'r1j', 'b2s', 'b2s', 'w6t', 'r1j', 'w7t', 'g5s', 'r6s', 'g9j', 'g9j', 'g2t', 'b6s', 'b8j', 'r3s', 'g8s', 'w2j', 'g4j', 'g4t', 'b6j', 'w2j', 'b9t', 'r7j', 'g4s', 'g7j', 'g5t', 'w9j', 'w6s', 'r3s', 'r9t', 'w9j', 'b2t') 
type(data): <class 'torch.Tensor'> 
data[0].shape: torch.Size([3, 32, 32])

===
Setting info... 
Target modality: 0 
Target property: 1 
Output directory: ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_3/analyse/0_1 
Number of category 10 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {1, 2, 3, 4, 5, 6, 7, 8, 9} 
Start index: 1 
End index: 10 
withzero: False
---
pred: tensor([6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5,
        5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6,
        6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6]) 
tar: tensor([3, 7, 1, 1, 1, 3, 7, 9, 3, 4, 9, 1, 9, 1, 4, 5, 1, 8, 6, 2, 8, 3, 2, 5,
        7, 5, 2, 7, 7, 8, 4, 1, 4, 9, 6, 6, 7, 5, 9, 8, 3, 8, 9, 3, 5, 4, 4, 4,
        6, 7, 1, 3, 2, 8, 1, 9, 9, 6, 3, 2, 5, 9, 7, 1, 8, 9, 8, 4, 9, 7, 4, 2,
        3, 7, 7, 4, 3, 4, 5, 7, 7, 1, 3, 1, 8, 1, 6, 1, 5, 7, 8, 7, 5, 9, 5, 3,
        3, 1, 4, 7, 1, 3, 9, 1, 8, 7, 2, 9, 4, 1, 6, 7, 6, 9, 8, 5, 7, 4, 8, 3,
        8, 4, 4, 2, 2, 6, 5, 9])
Accuracy (count): tensor(9) 
Accuracy (ratio) tensor(0.0703)
Accuracy:
 [[ 0  0  0  0  1 17  0  0  0]
 [ 0  0  0  0  0  9  0  0  0]
 [ 0  0  0  0  1 14  0  0  0]
 [ 0  0  0  0  2 14  0  0  0]
 [ 0  0  0  0  1 11  0  0  0]
 [ 0  0  0  0  1  8  0  0  0]
 [ 0  0  0  0  5 14  0  0  0]
 [ 0  0  0  0  1 13  0  0  0]
 [ 0  0  0  0  0 16  0  0  0]]
Accuracy:
 [[0.    0.    0.    0.    0.056 0.944 0.    0.    0.   ]
 [0.    0.    0.    0.    0.    1.    0.    0.    0.   ]
 [0.    0.    0.    0.    0.067 0.933 0.    0.    0.   ]
 [0.    0.    0.    0.    0.125 0.875 0.    0.    0.   ]
 [0.    0.    0.    0.    0.083 0.917 0.    0.    0.   ]
 [0.    0.    0.    0.    0.111 0.889 0.    0.    0.   ]
 [0.    0.    0.    0.    0.263 0.737 0.    0.    0.   ]
 [0.    0.    0.    0.    0.071 0.929 0.    0.    0.   ]
 [0.    0.    0.    0.    0.    1.    0.    0.    0.   ]]
---
Silhouette values: [-0.07435988 -0.14986399 -0.11492856 ... -0.09332166 -0.18780543
 -0.09419476]
Average of silhouette coef: -0.0829076
---

Distance matrix between labels.
  1   2   3   4   5   6   7   8   9
1 0.0 0.3 0.5 0.7 0.8 1.1 1.4 1.6 2.0 
2 0.3 0.0 0.4 0.5 0.6 0.9 1.2 1.3 1.8 
3 0.5 0.4 0.0 0.4 0.5 0.8 1.0 1.2 1.7 
4 0.7 0.5 0.4 0.0 0.3 0.5 0.8 0.9 1.4 
5 0.8 0.6 0.5 0.3 0.0 0.4 0.7 0.8 1.3 
6 1.1 0.9 0.8 0.5 0.4 0.0 0.5 0.5 1.0 
7 1.4 1.2 1.0 0.8 0.7 0.5 0.0 0.5 0.8 
8 1.6 1.3 1.2 0.9 0.8 0.5 0.5 0.0 0.6 
9 2.0 1.8 1.7 1.4 1.3 1.0 0.8 0.6 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
Latent embbeding: [0.32525635, 0.49905366, 0.67080694, 0.7991395, 1.1020118, 1.4038435, 1.5691781, 2.0430083, 0.35412222, 0.5019525, 0.5759069, 0.87904185, 1.1752127, 1.3343172, 1.7914959, 0.3959725, 0.471016, 0.76419455, 1.0096126, 1.2173529, 1.6758682, 0.26448053, 0.48624432, 0.8199016, 0.93475455, 1.430055, 0.38274273, 0.72339934, 0.8270368, 1.2878517, 0.54021776, 0.4955337, 0.9884949, 0.45547542, 0.8140053, 0.58276165] 
Flatten array: [[0.         0.        ]
 [1.         0.32525635]
 [2.         0.49905366]
 [3.         0.67080694]
 [4.         0.7991395 ]
 [5.         1.1020118 ]
 [6.         1.40384352]
 [7.         1.5691781 ]
 [8.         2.04300833]
 [0.         0.        ]
 [1.         0.35412222]
 [2.         0.50195253]
 [3.         0.57590687]
 [4.         0.87904185]
 [5.         1.17521274]
 [6.         1.33431721]
 [7.         1.79149592]
 [0.         0.        ]
 [1.         0.39597249]
 [2.         0.47101599]
 [3.         0.76419455]
 [4.         1.00961256]
 [5.         1.21735287]
 [6.         1.67586815]
 [0.         0.        ]
 [1.         0.26448053]
 [2.         0.48624432]
 [3.         0.81990159]
 [4.         0.93475455]
 [5.         1.43005502]
 [0.         0.        ]
 [1.         0.38274273]
 [2.         0.72339934]
 [3.         0.8270368 ]
 [4.         1.28785169]
 [0.         0.        ]
 [1.         0.54021776]
 [2.         0.4955337 ]
 [3.         0.98849487]
 [0.         0.        ]
 [1.         0.45547542]
 [2.         0.81400532]
 [0.         0.        ]
 [1.         0.58276165]
 [0.         0.        ]]
Correlation: [[1.         0.95508028]
 [0.95508028 1.        ]]
---
[[], [], [], [], [], [], [], [], [], []] [5 5 2 ... 6 6 2] [[ 37.540234  -44.92875  ]
 [ 26.18857    31.759644 ]
 [ 43.634205  -31.321547 ]
 ...
 [ 42.26975    27.233267 ]
 [ 50.18698   -17.794926 ]
 [  5.3336544 -15.419519 ]]
saved ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_3/analyse/0_1/latent__0_1.svg
---
length of elements: 408 408
length of 1: 36
length of 2: 43
length of 3: 48
length of 4: 51
length of 5: 52
length of 6: 51
length of 7: 48
length of 8: 43
length of 9: 36
all elements:

[(1, (1, 2, 2)),
 (2, (1, 3, 2)),
 (1, (1, 3, 3)),
 (3, (1, 4, 2)),
 (2, (1, 4, 3)),
 (1, (1, 4, 4)),
 (4, (1, 5, 2)),
 (3, (1, 5, 3)),
 (2, (1, 5, 4)),
 (1, (1, 5, 5)),
 (5, (1, 6, 2)),
 (4, (1, 6, 3)),
 (3, (1, 6, 4)),
 (2, (1, 6, 5)),
 (1, (1, 6, 6)),
 (6, (1, 7, 2)),
 (5, (1, 7, 3)),
 (4, (1, 7, 4)),
 (3, (1, 7, 5)),
 (2, (1, 7, 6)),
 (1, (1, 7, 7)),
 (7, (1, 8, 2)),
 (6, (1, 8, 3)),
 (5, (1, 8, 4)),
 (4, (1, 8, 5)),
 (3, (1, 8, 6)),
 (2, (1, 8, 7)),
 (1, (1, 8, 8)),
 (8, (1, 9, 2)),
 (7, (1, 9, 3)),
 (6, (1, 9, 4)),
 (5, (1, 9, 5)),
 (4, (1, 9, 6)),
 (3, (1, 9, 7)),
 (2, (1, 9, 8)),
 (1, (1, 9, 9)),
 (2, (2, 1, 1)),
 (3, (2, 2, 1)),
 (1, (2, 2, 3)),
 (4, (2, 3, 1)),
 (2, (2, 3, 3)),
 (1, (2, 3, 4)),
 (5, (2, 4, 1)),
 (3, (2, 4, 3)),
 (2, (2, 4, 4)),
 (1, (2, 4, 5)),
 (6, (2, 5, 1)),
 (4, (2, 5, 3)),
 (3, (2, 5, 4)),
 (2, (2, 5, 5)),
 (1, (2, 5, 6)),
 (7, (2, 6, 1)),
 (5, (2, 6, 3)),
 (4, (2, 6, 4)),
 (3, (2, 6, 5)),
 (2, (2, 6, 6)),
 (1, (2, 6, 7)),
 (8, (2, 7, 1)),
 (6, (2, 7, 3)),
 (5, (2, 7, 4)),
 (4, (2, 7, 5)),
 (3, (2, 7, 6)),
 (2, (2, 7, 7)),
 (1, (2, 7, 8)),
 (9, (2, 8, 1)),
 (7, (2, 8, 3)),
 (6, (2, 8, 4)),
 (5, (2, 8, 5)),
 (4, (2, 8, 6)),
 (3, (2, 8, 7)),
 (2, (2, 8, 8)),
 (1, (2, 8, 9)),
 (8, (2, 9, 3)),
 (7, (2, 9, 4)),
 (6, (2, 9, 5)),
 (5, (2, 9, 6)),
 (4, (2, 9, 7)),
 (3, (2, 9, 8)),
 (2, (2, 9, 9)),
 (3, (3, 1, 1)),
 (2, (3, 1, 2)),
 (4, (3, 2, 1)),
 (3, (3, 2, 2)),
 (1, (3, 2, 4)),
 (5, (3, 3, 1)),
 (4, (3, 3, 2)),
 (2, (3, 3, 4)),
 (1, (3, 3, 5)),
 (6, (3, 4, 1)),
 (5, (3, 4, 2)),
 (3, (3, 4, 4)),
 (2, (3, 4, 5)),
 (1, (3, 4, 6)),
 (7, (3, 5, 1)),
 (6, (3, 5, 2)),
 (4, (3, 5, 4)),
 (3, (3, 5, 5)),
 (2, (3, 5, 6)),
 (1, (3, 5, 7)),
 (8, (3, 6, 1)),
 (7, (3, 6, 2)),
 (5, (3, 6, 4)),
 (4, (3, 6, 5)),
 (3, (3, 6, 6)),
 (2, (3, 6, 7)),
 (1, (3, 6, 8)),
 (9, (3, 7, 1)),
 (8, (3, 7, 2)),
 (6, (3, 7, 4)),
 (5, (3, 7, 5)),
 (4, (3, 7, 6)),
 (3, (3, 7, 7)),
 (2, (3, 7, 8)),
 (1, (3, 7, 9)),
 (9, (3, 8, 2)),
 (7, (3, 8, 4)),
 (6, (3, 8, 5)),
 (5, (3, 8, 6)),
 (4, (3, 8, 7)),
 (3, (3, 8, 8)),
 (2, (3, 8, 9)),
 (8, (3, 9, 4)),
 (7, (3, 9, 5)),
 (6, (3, 9, 6)),
 (5, (3, 9, 7)),
 (4, (3, 9, 8)),
 (3, (3, 9, 9)),
 (4, (4, 1, 1)),
 (3, (4, 1, 2)),
 (2, (4, 1, 3)),
 (5, (4, 2, 1)),
 (4, (4, 2, 2)),
 (3, (4, 2, 3)),
 (1, (4, 2, 5)),
 (6, (4, 3, 1)),
 (5, (4, 3, 2)),
 (4, (4, 3, 3)),
 (2, (4, 3, 5)),
 (1, (4, 3, 6)),
 (7, (4, 4, 1)),
 (6, (4, 4, 2)),
 (5, (4, 4, 3)),
 (3, (4, 4, 5)),
 (2, (4, 4, 6)),
 (1, (4, 4, 7)),
 (8, (4, 5, 1)),
 (7, (4, 5, 2)),
 (6, (4, 5, 3)),
 (4, (4, 5, 5)),
 (3, (4, 5, 6)),
 (2, (4, 5, 7)),
 (1, (4, 5, 8)),
 (9, (4, 6, 1)),
 (8, (4, 6, 2)),
 (7, (4, 6, 3)),
 (5, (4, 6, 5)),
 (4, (4, 6, 6)),
 (3, (4, 6, 7)),
 (2, (4, 6, 8)),
 (1, (4, 6, 9)),
 (9, (4, 7, 2)),
 (8, (4, 7, 3)),
 (6, (4, 7, 5)),
 (5, (4, 7, 6)),
 (4, (4, 7, 7)),
 (3, (4, 7, 8)),
 (2, (4, 7, 9)),
 (9, (4, 8, 3)),
 (7, (4, 8, 5)),
 (6, (4, 8, 6)),
 (5, (4, 8, 7)),
 (4, (4, 8, 8)),
 (3, (4, 8, 9)),
 (8, (4, 9, 5)),
 (7, (4, 9, 6)),
 (6, (4, 9, 7)),
 (5, (4, 9, 8)),
 (4, (4, 9, 9)),
 (5, (5, 1, 1)),
 (4, (5, 1, 2)),
 (3, (5, 1, 3)),
 (2, (5, 1, 4)),
 (6, (5, 2, 1)),
 (5, (5, 2, 2)),
 (4, (5, 2, 3)),
 (3, (5, 2, 4)),
 (1, (5, 2, 6)),
 (7, (5, 3, 1)),
 (6, (5, 3, 2)),
 (5, (5, 3, 3)),
 (4, (5, 3, 4)),
 (2, (5, 3, 6)),
 (1, (5, 3, 7)),
 (8, (5, 4, 1)),
 (7, (5, 4, 2)),
 (6, (5, 4, 3)),
 (5, (5, 4, 4)),
 (3, (5, 4, 6)),
 (2, (5, 4, 7)),
 (1, (5, 4, 8)),
 (9, (5, 5, 1)),
 (8, (5, 5, 2)),
 (7, (5, 5, 3)),
 (6, (5, 5, 4)),
 (4, (5, 5, 6)),
 (3, (5, 5, 7)),
 (2, (5, 5, 8)),
 (1, (5, 5, 9)),
 (9, (5, 6, 2)),
 (8, (5, 6, 3)),
 (7, (5, 6, 4)),
 (5, (5, 6, 6)),
 (4, (5, 6, 7)),
 (3, (5, 6, 8)),
 (2, (5, 6, 9)),
 (9, (5, 7, 3)),
 (8, (5, 7, 4)),
 (6, (5, 7, 6)),
 (5, (5, 7, 7)),
 (4, (5, 7, 8)),
 (3, (5, 7, 9)),
 (9, (5, 8, 4)),
 (7, (5, 8, 6)),
 (6, (5, 8, 7)),
 (5, (5, 8, 8)),
 (4, (5, 8, 9)),
 (8, (5, 9, 6)),
 (7, (5, 9, 7)),
 (6, (5, 9, 8)),
 (5, (5, 9, 9)),
 (6, (6, 1, 1)),
 (5, (6, 1, 2)),
 (4, (6, 1, 3)),
 (3, (6, 1, 4)),
 (2, (6, 1, 5)),
 (7, (6, 2, 1)),
 (6, (6, 2, 2)),
 (5, (6, 2, 3)),
 (4, (6, 2, 4)),
 (3, (6, 2, 5)),
 (1, (6, 2, 7)),
 (8, (6, 3, 1)),
 (7, (6, 3, 2)),
 (6, (6, 3, 3)),
 (5, (6, 3, 4)),
 (4, (6, 3, 5)),
 (2, (6, 3, 7)),
 (1, (6, 3, 8)),
 (9, (6, 4, 1)),
 (8, (6, 4, 2)),
 (7, (6, 4, 3)),
 (6, (6, 4, 4)),
 (5, (6, 4, 5)),
 (3, (6, 4, 7)),
 (2, (6, 4, 8)),
 (1, (6, 4, 9)),
 (9, (6, 5, 2)),
 (8, (6, 5, 3)),
 (7, (6, 5, 4)),
 (6, (6, 5, 5)),
 (4, (6, 5, 7)),
 (3, (6, 5, 8)),
 (2, (6, 5, 9)),
 (9, (6, 6, 3)),
 (8, (6, 6, 4)),
 (7, (6, 6, 5)),
 (5, (6, 6, 7)),
 (4, (6, 6, 8)),
 (3, (6, 6, 9)),
 (9, (6, 7, 4)),
 (8, (6, 7, 5)),
 (6, (6, 7, 7)),
 (5, (6, 7, 8)),
 (4, (6, 7, 9)),
 (9, (6, 8, 5)),
 (7, (6, 8, 7)),
 (6, (6, 8, 8)),
 (5, (6, 8, 9)),
 (8, (6, 9, 7)),
 (7, (6, 9, 8)),
 (6, (6, 9, 9)),
 (7, (7, 1, 1)),
 (6, (7, 1, 2)),
 (5, (7, 1, 3)),
 (4, (7, 1, 4)),
 (3, (7, 1, 5)),
 (2, (7, 1, 6)),
 (8, (7, 2, 1)),
 (7, (7, 2, 2)),
 (6, (7, 2, 3)),
 (5, (7, 2, 4)),
 (4, (7, 2, 5)),
 (3, (7, 2, 6)),
 (1, (7, 2, 8)),
 (9, (7, 3, 1)),
 (8, (7, 3, 2)),
 (7, (7, 3, 3)),
 (6, (7, 3, 4)),
 (5, (7, 3, 5)),
 (4, (7, 3, 6)),
 (2, (7, 3, 8)),
 (1, (7, 3, 9)),
 (9, (7, 4, 2)),
 (8, (7, 4, 3)),
 (7, (7, 4, 4)),
 (6, (7, 4, 5)),
 (5, (7, 4, 6)),
 (3, (7, 4, 8)),
 (2, (7, 4, 9)),
 (9, (7, 5, 3)),
 (8, (7, 5, 4)),
 (7, (7, 5, 5)),
 (6, (7, 5, 6)),
 (4, (7, 5, 8)),
 (3, (7, 5, 9)),
 (9, (7, 6, 4)),
 (8, (7, 6, 5)),
 (7, (7, 6, 6)),
 (5, (7, 6, 8)),
 (4, (7, 6, 9)),
 (9, (7, 7, 5)),
 (8, (7, 7, 6)),
 (6, (7, 7, 8)),
 (5, (7, 7, 9)),
 (9, (7, 8, 6)),
 (7, (7, 8, 8)),
 (6, (7, 8, 9)),
 (8, (7, 9, 8)),
 (7, (7, 9, 9)),
 (8, (8, 1, 1)),
 (7, (8, 1, 2)),
 (6, (8, 1, 3)),
 (5, (8, 1, 4)),
 (4, (8, 1, 5)),
 (3, (8, 1, 6)),
 (2, (8, 1, 7)),
 (9, (8, 2, 1)),
 (8, (8, 2, 2)),
 (7, (8, 2, 3)),
 (6, (8, 2, 4)),
 (5, (8, 2, 5)),
 (4, (8, 2, 6)),
 (3, (8, 2, 7)),
 (1, (8, 2, 9)),
 (9, (8, 3, 2)),
 (8, (8, 3, 3)),
 (7, (8, 3, 4)),
 (6, (8, 3, 5)),
 (5, (8, 3, 6)),
 (4, (8, 3, 7)),
 (2, (8, 3, 9)),
 (9, (8, 4, 3)),
 (8, (8, 4, 4)),
 (7, (8, 4, 5)),
 (6, (8, 4, 6)),
 (5, (8, 4, 7)),
 (3, (8, 4, 9)),
 (9, (8, 5, 4)),
 (8, (8, 5, 5)),
 (7, (8, 5, 6)),
 (6, (8, 5, 7)),
 (4, (8, 5, 9)),
 (9, (8, 6, 5)),
 (8, (8, 6, 6)),
 (7, (8, 6, 7)),
 (5, (8, 6, 9)),
 (9, (8, 7, 6)),
 (8, (8, 7, 7)),
 (6, (8, 7, 9)),
 (9, (8, 8, 7)),
 (7, (8, 8, 9)),
 (8, (8, 9, 9)),
 (9, (9, 1, 1)),
 (8, (9, 1, 2)),
 (7, (9, 1, 3)),
 (6, (9, 1, 4)),
 (5, (9, 1, 5)),
 (4, (9, 1, 6)),
 (3, (9, 1, 7)),
 (2, (9, 1, 8)),
 (9, (9, 2, 2)),
 (8, (9, 2, 3)),
 (7, (9, 2, 4)),
 (6, (9, 2, 5)),
 (5, (9, 2, 6)),
 (4, (9, 2, 7)),
 (3, (9, 2, 8)),
 (9, (9, 3, 3)),
 (8, (9, 3, 4)),
 (7, (9, 3, 5)),
 (6, (9, 3, 6)),
 (5, (9, 3, 7)),
 (4, (9, 3, 8)),
 (9, (9, 4, 4)),
 (8, (9, 4, 5)),
 (7, (9, 4, 6)),
 (6, (9, 4, 7)),
 (5, (9, 4, 8)),
 (9, (9, 5, 5)),
 (8, (9, 5, 6)),
 (7, (9, 5, 7)),
 (6, (9, 5, 8)),
 (9, (9, 6, 6)),
 (8, (9, 6, 7)),
 (7, (9, 6, 8)),
 (9, (9, 7, 7)),
 (8, (9, 7, 8)),
 (9, (9, 8, 8))]
i: 1
shape (20,)
i: 2
shape (20,)
i: 3
shape (20,)
i: 4
shape (20,)
i: 5
shape (20,)
i: 6
shape (20,)
i: 7
shape (20,)
i: 8
shape (20,)
i: 9
shape (20,)
mean_all: [None, array([ 0.38951227,  0.03408274, -0.0110664 , -0.01926498,  0.03371344,
       -0.20405807,  0.01386755, -0.01916647, -0.06546067,  0.63650876,
        0.04685846,  0.04933284,  0.02371703,  0.4939718 ,  0.07479933,
       -0.15319198, -0.05747887, -0.04938032, -0.0094805 ,  0.02790117],
      dtype=float32), array([ 0.38144436,  0.04081685, -0.01002179, -0.01688735,  0.02039333,
       -0.23711544,  0.01902969, -0.02516318, -0.14334615,  0.36610666,
        0.04494738,  0.00440695,  0.01486928,  0.35948953,  0.13578868,
       -0.13149972, -0.05606351, -0.02688069,  0.00600206,  0.0337561 ],
      dtype=float32), array([ 0.23327789,  0.03981221,  0.01262944, -0.01863673,  0.00601653,
       -0.05761518,  0.04148035, -0.04464631,  0.02993175,  0.3205259 ,
        0.05457303, -0.10552017,  0.00879347,  0.34970406,  0.21770458,
        0.00229123, -0.05418473, -0.03266983,  0.02119396,  0.05195613],
      dtype=float32), array([-0.00199621,  0.03271939,  0.0005804 , -0.0166218 ,  0.0282779 ,
       -0.17993625,  0.01074272, -0.0144964 , -0.03840185,  0.27783135,
        0.05730887,  0.03749627,  0.0154943 ,  0.14787105,  0.10516922,
        0.05641089, -0.05755403, -0.01865239,  0.01510498,  0.03309083],
      dtype=float32), array([ 0.10692251,  0.03731197,  0.01601535,  0.00310101,  0.01328759,
       -0.12929918,  0.0334487 , -0.0400667 , -0.01309243,  0.15360416,
        0.0525286 ,  0.09215009, -0.00115   , -0.0074609 ,  0.19984646,
        0.04915943, -0.03752052, -0.00767126,  0.03403869,  0.04286108],
      dtype=float32), array([-0.05542527,  0.01796336, -0.00584937, -0.00120126,  0.04632813,
       -0.04504615,  0.01134745,  0.0102113 , -0.09412987, -0.0396025 ,
        0.06089877,  0.09494865,  0.01808419, -0.1377582 ,  0.04912541,
        0.19947632, -0.04593713,  0.00581276,  0.03069801,  0.00879149],
      dtype=float32), array([-2.2595437e-01,  6.8781232e-03,  1.4954140e-02,  6.5019168e-03,
        2.6416406e-02, -3.2402474e-02,  9.3850149e-03, -1.5805202e-04,
        1.4669420e-01, -4.4075263e-01,  7.2268903e-02,  1.4921625e-01,
        4.8304317e-03,  1.8808015e-02,  1.6102672e-01,  1.6787238e-01,
       -1.4886345e-02,  6.9681951e-03,  3.7619084e-02,  2.4843514e-02],
      dtype=float32), array([-0.3102994 , -0.00814772, -0.00822214,  0.01576659,  0.05956903,
       -0.04669399, -0.01572712,  0.02092849, -0.09695957, -0.39630365,
        0.05496686,  0.20028159,  0.00490784, -0.30939153,  0.06571756,
        0.28676206, -0.00475099,  0.03246851,  0.02316583, -0.00631897],
      dtype=float32), array([-2.8315943e-01, -8.6205418e-04, -5.0250655e-03,  2.7754650e-02,
        4.5208137e-02, -9.1795288e-02, -2.7064241e-02,  3.5471842e-02,
        1.0029331e-01, -8.0288523e-01,  6.9387980e-02,  1.4604896e-01,
        2.6892761e-02, -6.5247089e-01, -9.4271479e-03,  3.4932137e-01,
        6.6717470e-04,  4.8143778e-02,  1.9596918e-02, -3.2505259e-02],
      dtype=float32)]
---
Target calculation: 1+1-1
pred: tensor([6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 5, 6,
        6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]) 
tar: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  8 56  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[0.    0.    0.    0.    0.125 0.875 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.6  0.0  0.0  0.0  0.5  0.1 -0.2 -0.1 -0.0 -0.0  0.0 
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.4  0.0  0.0  0.0  0.4  0.1 -0.1 -0.1 -0.0  0.0  0.0 
 0.2  0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.3  0.1 -0.1  0.0  0.3  0.2  0.0 -0.1 -0.0  0.0  0.1 
-0.0  0.0  0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0  0.3  0.1  0.0  0.0  0.1  0.1  0.1 -0.1 -0.0  0.0  0.0 
 0.1  0.0  0.0  0.0  0.0 -0.1  0.0 -0.0 -0.0  0.2  0.1  0.1 -0.0 -0.0  0.2  0.0 -0.0 -0.0  0.0  0.0 
-0.1  0.0 -0.0 -0.0  0.0 -0.0  0.0  0.0 -0.1 -0.0  0.1  0.1  0.0 -0.1  0.0  0.2 -0.0  0.0  0.0  0.0 
-0.2  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.1 -0.4  0.1  0.1  0.0  0.0  0.2  0.2 -0.0  0.0  0.0  0.0 
-0.3 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0 -0.1 -0.4  0.1  0.2  0.0 -0.3  0.1  0.3 -0.0  0.0  0.0 -0.0 
-0.3 -0.0 -0.0  0.0  0.0 -0.1 -0.0  0.0  0.1 -0.8  0.1  0.1  0.0 -0.7 -0.0  0.3  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 1 
indices: 1 
distance: 0.0
---
Target calculation: 1+9-8
pred: tensor([6, 5, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6]) 
tar: tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  7 57  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.    0.    0.    0.109 0.891 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.6  0.0  0.0  0.0  0.5  0.1 -0.2 -0.1 -0.0 -0.0  0.0 
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.4  0.0  0.0  0.0  0.4  0.1 -0.1 -0.1 -0.0  0.0  0.0 
 0.2  0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.3  0.1 -0.1  0.0  0.3  0.2  0.0 -0.1 -0.0  0.0  0.1 
-0.0  0.0  0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0  0.3  0.1  0.0  0.0  0.1  0.1  0.1 -0.1 -0.0  0.0  0.0 
 0.1  0.0  0.0  0.0  0.0 -0.1  0.0 -0.0 -0.0  0.2  0.1  0.1 -0.0 -0.0  0.2  0.0 -0.0 -0.0  0.0  0.0 
-0.1  0.0 -0.0 -0.0  0.0 -0.0  0.0  0.0 -0.1 -0.0  0.1  0.1  0.0 -0.1  0.0  0.2 -0.0  0.0  0.0  0.0 
-0.2  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.1 -0.4  0.1  0.1  0.0  0.0  0.2  0.2 -0.0  0.0  0.0  0.0 
-0.3 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0 -0.1 -0.4  0.1  0.2  0.0 -0.3  0.1  0.3 -0.0  0.0  0.0 -0.0 
-0.3 -0.0 -0.0  0.0  0.0 -0.1 -0.0  0.0  0.1 -0.8  0.1  0.1  0.0 -0.7 -0.0  0.3  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 2 
indices: 2 
distance: 0.40360212
---
Target calculation: 1+8-4
pred: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 5, 6]) 
tar: tensor([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])
Accuracy (count): tensor(3) 
Accuracy (ratio) tensor(0.0469)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  3 61  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.    0.    0.    0.047 0.953 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.6  0.0  0.0  0.0  0.5  0.1 -0.2 -0.1 -0.0 -0.0  0.0 
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.4  0.0  0.0  0.0  0.4  0.1 -0.1 -0.1 -0.0  0.0  0.0 
 0.2  0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.3  0.1 -0.1  0.0  0.3  0.2  0.0 -0.1 -0.0  0.0  0.1 
-0.0  0.0  0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0  0.3  0.1  0.0  0.0  0.1  0.1  0.1 -0.1 -0.0  0.0  0.0 
 0.1  0.0  0.0  0.0  0.0 -0.1  0.0 -0.0 -0.0  0.2  0.1  0.1 -0.0 -0.0  0.2  0.0 -0.0 -0.0  0.0  0.0 
-0.1  0.0 -0.0 -0.0  0.0 -0.0  0.0  0.0 -0.1 -0.0  0.1  0.1  0.0 -0.1  0.0  0.2 -0.0  0.0  0.0  0.0 
-0.2  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.1 -0.4  0.1  0.1  0.0  0.0  0.2  0.2 -0.0  0.0  0.0  0.0 
-0.3 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0 -0.1 -0.4  0.1  0.2  0.0 -0.3  0.1  0.3 -0.0  0.0  0.0 -0.0 
-0.3 -0.0 -0.0  0.0  0.0 -0.1 -0.0  0.0  0.1 -0.8  0.1  0.1  0.0 -0.7 -0.0  0.3  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 5 
indices: 6 
distance: 0.29150975
---
Target calculation: 2+7-1
pred: tensor([6, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  5 59  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.    0.    0.    0.078 0.922 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.6  0.0  0.0  0.0  0.5  0.1 -0.2 -0.1 -0.0 -0.0  0.0 
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.4  0.0  0.0  0.0  0.4  0.1 -0.1 -0.1 -0.0  0.0  0.0 
 0.2  0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.3  0.1 -0.1  0.0  0.3  0.2  0.0 -0.1 -0.0  0.0  0.1 
-0.0  0.0  0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0  0.3  0.1  0.0  0.0  0.1  0.1  0.1 -0.1 -0.0  0.0  0.0 
 0.1  0.0  0.0  0.0  0.0 -0.1  0.0 -0.0 -0.0  0.2  0.1  0.1 -0.0 -0.0  0.2  0.0 -0.0 -0.0  0.0  0.0 
-0.1  0.0 -0.0 -0.0  0.0 -0.0  0.0  0.0 -0.1 -0.0  0.1  0.1  0.0 -0.1  0.0  0.2 -0.0  0.0  0.0  0.0 
-0.2  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.1 -0.4  0.1  0.1  0.0  0.0  0.2  0.2 -0.0  0.0  0.0  0.0 
-0.3 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0 -0.1 -0.4  0.1  0.2  0.0 -0.3  0.1  0.3 -0.0  0.0  0.0 -0.0 
-0.3 -0.0 -0.0  0.0  0.0 -0.1 -0.0  0.0  0.1 -0.8  0.1  0.1  0.0 -0.7 -0.0  0.3  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 8 
indices: 7 
distance: 0.32525632
---
Target calculation: 2+7-2
pred: tensor([6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6]) 
tar: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  3 61  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.    0.    0.    0.047 0.953 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.6  0.0  0.0  0.0  0.5  0.1 -0.2 -0.1 -0.0 -0.0  0.0 
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.4  0.0  0.0  0.0  0.4  0.1 -0.1 -0.1 -0.0  0.0  0.0 
 0.2  0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.3  0.1 -0.1  0.0  0.3  0.2  0.0 -0.1 -0.0  0.0  0.1 
-0.0  0.0  0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0  0.3  0.1  0.0  0.0  0.1  0.1  0.1 -0.1 -0.0  0.0  0.0 
 0.1  0.0  0.0  0.0  0.0 -0.1  0.0 -0.0 -0.0  0.2  0.1  0.1 -0.0 -0.0  0.2  0.0 -0.0 -0.0  0.0  0.0 
-0.1  0.0 -0.0 -0.0  0.0 -0.0  0.0  0.0 -0.1 -0.0  0.1  0.1  0.0 -0.1  0.0  0.2 -0.0  0.0  0.0  0.0 
-0.2  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.1 -0.4  0.1  0.1  0.0  0.0  0.2  0.2 -0.0  0.0  0.0  0.0 
-0.3 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0 -0.1 -0.4  0.1  0.2  0.0 -0.3  0.1  0.3 -0.0  0.0  0.0 -0.0 
-0.3 -0.0 -0.0  0.0  0.0 -0.1 -0.0  0.0  0.1 -0.8  0.1  0.1  0.0 -0.7 -0.0  0.3  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 7 
indices: 7 
distance: 1.3548388e-08
---
Target calculation: 3+3-3
pred: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5,
        5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  5 59  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.    0.    0.    0.078 0.922 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.6  0.0  0.0  0.0  0.5  0.1 -0.2 -0.1 -0.0 -0.0  0.0 
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.4  0.0  0.0  0.0  0.4  0.1 -0.1 -0.1 -0.0  0.0  0.0 
 0.2  0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.3  0.1 -0.1  0.0  0.3  0.2  0.0 -0.1 -0.0  0.0  0.1 
-0.0  0.0  0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0  0.3  0.1  0.0  0.0  0.1  0.1  0.1 -0.1 -0.0  0.0  0.0 
 0.1  0.0  0.0  0.0  0.0 -0.1  0.0 -0.0 -0.0  0.2  0.1  0.1 -0.0 -0.0  0.2  0.0 -0.0 -0.0  0.0  0.0 
-0.1  0.0 -0.0 -0.0  0.0 -0.0  0.0  0.0 -0.1 -0.0  0.1  0.1  0.0 -0.1  0.0  0.2 -0.0  0.0  0.0  0.0 
-0.2  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.1 -0.4  0.1  0.1  0.0  0.0  0.2  0.2 -0.0  0.0  0.0  0.0 
-0.3 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0 -0.1 -0.4  0.1  0.2  0.0 -0.3  0.1  0.3 -0.0  0.0  0.0 -0.0 
-0.3 -0.0 -0.0  0.0  0.0 -0.1 -0.0  0.0  0.1 -0.8  0.1  0.1  0.0 -0.7 -0.0  0.3  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 0.0
---
Target calculation: 3+5-2
pred: tensor([6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6,
        5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(57) 
Accuracy (ratio) tensor(0.8906)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  7 57  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.    0.    0.    0.109 0.891 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.6  0.0  0.0  0.0  0.5  0.1 -0.2 -0.1 -0.0 -0.0  0.0 
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.4  0.0  0.0  0.0  0.4  0.1 -0.1 -0.1 -0.0  0.0  0.0 
 0.2  0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.3  0.1 -0.1  0.0  0.3  0.2  0.0 -0.1 -0.0  0.0  0.1 
-0.0  0.0  0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0  0.3  0.1  0.0  0.0  0.1  0.1  0.1 -0.1 -0.0  0.0  0.0 
 0.1  0.0  0.0  0.0  0.0 -0.1  0.0 -0.0 -0.0  0.2  0.1  0.1 -0.0 -0.0  0.2  0.0 -0.0 -0.0  0.0  0.0 
-0.1  0.0 -0.0 -0.0  0.0 -0.0  0.0  0.0 -0.1 -0.0  0.1  0.1  0.0 -0.1  0.0  0.2 -0.0  0.0  0.0  0.0 
-0.2  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.1 -0.4  0.1  0.1  0.0  0.0  0.2  0.2 -0.0  0.0  0.0  0.0 
-0.3 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0 -0.1 -0.4  0.1  0.2  0.0 -0.3  0.1  0.3 -0.0  0.0  0.0 -0.0 
-0.3 -0.0 -0.0  0.0  0.0 -0.1 -0.0  0.0  0.1 -0.8  0.1  0.1  0.0 -0.7 -0.0  0.3  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 6 
indices: 5 
distance: 0.35412222
---
Target calculation: 3+6-3
pred: tensor([6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 5]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(56) 
Accuracy (ratio) tensor(0.8750)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  8 56  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.    0.    0.    0.125 0.875 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.6  0.0  0.0  0.0  0.5  0.1 -0.2 -0.1 -0.0 -0.0  0.0 
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.4  0.0  0.0  0.0  0.4  0.1 -0.1 -0.1 -0.0  0.0  0.0 
 0.2  0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.3  0.1 -0.1  0.0  0.3  0.2  0.0 -0.1 -0.0  0.0  0.1 
-0.0  0.0  0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0  0.3  0.1  0.0  0.0  0.1  0.1  0.1 -0.1 -0.0  0.0  0.0 
 0.1  0.0  0.0  0.0  0.0 -0.1  0.0 -0.0 -0.0  0.2  0.1  0.1 -0.0 -0.0  0.2  0.0 -0.0 -0.0  0.0  0.0 
-0.1  0.0 -0.0 -0.0  0.0 -0.0  0.0  0.0 -0.1 -0.0  0.1  0.1  0.0 -0.1  0.0  0.2 -0.0  0.0  0.0  0.0 
-0.2  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.1 -0.4  0.1  0.1  0.0  0.0  0.2  0.2 -0.0  0.0  0.0  0.0 
-0.3 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0 -0.1 -0.4  0.1  0.2  0.0 -0.3  0.1  0.3 -0.0  0.0  0.0 -0.0 
-0.3 -0.0 -0.0  0.0  0.0 -0.1 -0.0  0.0  0.1 -0.8  0.1  0.1  0.0 -0.7 -0.0  0.3  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 6 
indices: 6 
distance: 1.4755384e-08
---
Target calculation: 5+3-5
pred: tensor([5, 6, 6, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  7 57  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.    0.    0.    0.109 0.891 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.6  0.0  0.0  0.0  0.5  0.1 -0.2 -0.1 -0.0 -0.0  0.0 
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.4  0.0  0.0  0.0  0.4  0.1 -0.1 -0.1 -0.0  0.0  0.0 
 0.2  0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.3  0.1 -0.1  0.0  0.3  0.2  0.0 -0.1 -0.0  0.0  0.1 
-0.0  0.0  0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0  0.3  0.1  0.0  0.0  0.1  0.1  0.1 -0.1 -0.0  0.0  0.0 
 0.1  0.0  0.0  0.0  0.0 -0.1  0.0 -0.0 -0.0  0.2  0.1  0.1 -0.0 -0.0  0.2  0.0 -0.0 -0.0  0.0  0.0 
-0.1  0.0 -0.0 -0.0  0.0 -0.0  0.0  0.0 -0.1 -0.0  0.1  0.1  0.0 -0.1  0.0  0.2 -0.0  0.0  0.0  0.0 
-0.2  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.1 -0.4  0.1  0.1  0.0  0.0  0.2  0.2 -0.0  0.0  0.0  0.0 
-0.3 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0 -0.1 -0.4  0.1  0.2  0.0 -0.3  0.1  0.3 -0.0  0.0  0.0 -0.0 
-0.3 -0.0 -0.0  0.0  0.0 -0.1 -0.0  0.0  0.1 -0.8  0.1  0.1  0.0 -0.7 -0.0  0.3  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 3.1018075e-08
---
Target calculation: 9+7-8
pred: tensor([6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6,
        6, 6, 6, 6, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 5,
        6, 6, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  9 55  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.    0.    0.    0.141 0.859 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.6  0.0  0.0  0.0  0.5  0.1 -0.2 -0.1 -0.0 -0.0  0.0 
 0.4  0.0 -0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.1  0.4  0.0  0.0  0.0  0.4  0.1 -0.1 -0.1 -0.0  0.0  0.0 
 0.2  0.0  0.0 -0.0  0.0 -0.1  0.0 -0.0  0.0  0.3  0.1 -0.1  0.0  0.3  0.2  0.0 -0.1 -0.0  0.0  0.1 
-0.0  0.0  0.0 -0.0  0.0 -0.2  0.0 -0.0 -0.0  0.3  0.1  0.0  0.0  0.1  0.1  0.1 -0.1 -0.0  0.0  0.0 
 0.1  0.0  0.0  0.0  0.0 -0.1  0.0 -0.0 -0.0  0.2  0.1  0.1 -0.0 -0.0  0.2  0.0 -0.0 -0.0  0.0  0.0 
-0.1  0.0 -0.0 -0.0  0.0 -0.0  0.0  0.0 -0.1 -0.0  0.1  0.1  0.0 -0.1  0.0  0.2 -0.0  0.0  0.0  0.0 
-0.2  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.1 -0.4  0.1  0.1  0.0  0.0  0.2  0.2 -0.0  0.0  0.0  0.0 
-0.3 -0.0 -0.0  0.0  0.1 -0.0 -0.0  0.0 -0.1 -0.4  0.1  0.2  0.0 -0.3  0.1  0.3 -0.0  0.0  0.0 -0.0 
-0.3 -0.0 -0.0  0.0  0.0 -0.1 -0.0  0.0  0.1 -0.8  0.1  0.1  0.0 -0.7 -0.0  0.3  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 8 
indices: 9 
distance: 0.45547542
---
pred: tensor([6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6,
        6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6,
        5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 5, 5, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 6,
        6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6,
        6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]) 
tar: tensor([1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 7, 6, 5,
        4, 3, 2, 1, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1, 4, 2, 1, 5, 3, 2, 1, 6, 4,
        3, 2, 1, 7, 5, 4, 3, 2, 1, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3, 2, 1,
        8, 7, 6, 5, 4, 3, 2, 3, 2, 4, 3, 1, 5, 4, 2, 1, 6, 5, 3, 2, 1, 7, 6, 4,
        3, 2, 1, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3,
        2, 8, 7, 6, 5, 4, 3, 4, 3, 2, 5, 4, 3, 1, 6, 5, 4, 2, 1, 7, 6, 5, 3, 2,
        1, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 9,
        7, 6, 5, 4, 3, 8, 7, 6, 5, 4, 5, 4, 3, 2, 6, 5, 4, 3, 1, 7, 6, 5, 4, 2,
        1, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 9,
        8, 6, 5, 4, 3, 9, 7, 6, 5, 4, 8, 7, 6, 5, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3,
        1, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 9,
        8, 7, 5, 4, 3, 9, 8, 6, 5, 4, 9, 7, 6, 5, 8, 7, 6, 7, 6, 5, 4, 3, 2, 8,
        7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 9, 8, 7,
        6, 4, 3, 9, 8, 7, 5, 4, 9, 8, 6, 5, 9, 7, 6, 8, 7, 8, 7, 6, 5, 4, 3, 2,
        9, 8, 7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 9, 8, 7, 6, 5, 3, 9, 8, 7,
        6, 4, 9, 8, 7, 5, 9, 8, 6, 9, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 9, 8, 7, 6,
        5, 4, 3, 9, 8, 7, 6, 5, 4, 9, 8, 7, 6, 5, 9, 8, 7, 6, 9, 8, 7, 9, 8, 9])
Accuracy (count): tensor(53) 
Accuracy (ratio) tensor(0.1299)
Accuracy:
 [[ 0  0  0  0  5 31  0  0  0]
 [ 0  0  0  0  3 40  0  0  0]
 [ 0  0  0  0  6 42  0  0  0]
 [ 0  0  0  0  6 45  0  0  0]
 [ 0  0  0  0  5 47  0  0  0]
 [ 0  0  0  0  3 48  0  0  0]
 [ 0  0  0  0  4 44  0  0  0]
 [ 0  0  0  0  4 39  0  0  0]
 [ 0  0  0  0  1 35  0  0  0]]
Accuracy:
 [[0.    0.    0.    0.    0.139 0.861 0.    0.    0.   ]
 [0.    0.    0.    0.    0.07  0.93  0.    0.    0.   ]
 [0.    0.    0.    0.    0.125 0.875 0.    0.    0.   ]
 [0.    0.    0.    0.    0.118 0.882 0.    0.    0.   ]
 [0.    0.    0.    0.    0.096 0.904 0.    0.    0.   ]
 [0.    0.    0.    0.    0.059 0.941 0.    0.    0.   ]
 [0.    0.    0.    0.    0.083 0.917 0.    0.    0.   ]
 [0.    0.    0.    0.    0.093 0.907 0.    0.    0.   ]
 [0.    0.    0.    0.    0.028 0.972 0.    0.    0.   ]]
results (all): {'reconst_0x0_avg': 0.0703125, 'reconst_0x0_all': nan, 'cluster_avg': -0.0829076, 'cluster_all': array([-0.07435988, -0.14986399, -0.11492856, ..., -0.09332166,
       -0.18780543, -0.09419476], dtype=float32), 'magnitude_avg': 0.9550802780672829, 'magnitude_all': 0.9550802780672829, 'tsne-2d_avg': nan, 'tsne-2d_all': nan, 'mathematics_1+1-1_avg': 0.0, 'mathematics_1+1-1_all': nan, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+9-8_all': nan, 'mathematics_1+8-4_avg': 0.046875, 'mathematics_1+8-4_all': nan, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-1_all': nan, 'mathematics_2+7-2_avg': 0.0, 'mathematics_2+7-2_all': nan, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+3-3_all': nan, 'mathematics_3+5-2_avg': 0.890625, 'mathematics_3+5-2_all': nan, 'mathematics_3+6-3_avg': 0.875, 'mathematics_3+6-3_all': nan, 'mathematics_5+3-5_avg': 0.0, 'mathematics_5+3-5_all': nan, 'mathematics_9+7-8_avg': 0.0, 'mathematics_9+7-8_all': nan, 'mathematics_avg': 0.1299019604921341, 'mathematics_all': nan}
results (only averages): {'id': 'vae_oscn_seed_3', 'model_name': 'VAE_OSCN', 'target_modality': 0, 'target_property': 1, 'reconst_0x0_avg': 0.0703125, 'cluster_avg': -0.0829076, 'magnitude_avg': 0.9550802780672829, 'tsne-2d_avg': nan, 'mathematics_1+1-1_avg': 0.0, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+8-4_avg': 0.046875, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-2_avg': 0.0, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+5-2_avg': 0.890625, 'mathematics_3+6-3_avg': 0.875, 'mathematics_5+3-5_avg': 0.0, 'mathematics_9+7-8_avg': 0.0, 'mathematics_avg': 0.1299019604921341}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'tuple'> 
label: ('w1s', 'w2j', 'r4s', 'w4j', 'r2s', 'b9j', 'r9s', 'g3s', 'b1j', 'g7s', 'b2j', 'b3j', 'r8t', 'g9s', 'g9t', 'g7j', 'r4s', 'g4s', 'r1t', 'b5t', 'b6t', 'r1j', 'b4t', 'r8j', 'w6s', 'g2s', 'g5t', 'b6t', 'w8s', 'b1j', 'w7t', 'b7t', 'w6s', 'g5j', 'w7t', 'b8t', 'w1j', 'g6s', 'g6t', 'r5s', 'r1t', 'r8j', 'b7j', 'b8s', 'b3j', 'r4j', 'g6s', 'b5s', 'b4t', 'g1j', 'w4j', 'r6j', 'r9t', 'r1t', 'g7s', 'b5s', 'g8t', 'b6s', 'g1s', 'g2t', 'g1t', 'r6s', 'g5t', 'r1j', 'b1t', 'w3j', 'w9s', 'b2t', 'b8t', 'w8j', 'r8s', 'r1j', 'g7t', 'r3s', 'b1s', 'b7t', 'r7t', 'w8t', 'w8t', 'g4s', 'r1j', 'r5s', 'g7s', 'b8s', 'r6j', 'b4j', 'w2j', 'g2t', 'g5s', 'w6s', 'g8j', 'b8t', 'r2s', 'b4s', 'r6s', 'r4s', 'w4j', 'r1s', 'r3s', 'b4s', 'b5s', 'b7s', 'r9t', 'b5j', 'w4j', 'r3j', 'g1t', 'w9s', 'w5s', 'g9t', 'b6t', 'r1t', 'r3j', 'r9s', 'b3t', 'b1t', 'b2t', 'g3j', 'w7t', 'g2j', 'w4j', 'b2j', 'r9t', 'w5t', 'b9t', 'g6t', 'b3s', 'w8t') 
type(data): <class 'torch.Tensor'> 
data[0].shape: torch.Size([3, 32, 32])

===
Setting info... 
Target modality: 0 
Target property: 2 
Output directory: ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_3/analyse/0_2 
Number of category 3 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2} 
Start index: 0 
End index: 3 
withzero: False
---
Silhouette values: [ 0.1625199   0.10686895 -0.00601532 ... -0.0576945   0.19046693
  0.23304075]
Average of silhouette coef: 0.12926358
---

Distance matrix between labels.
  0   1   2
0 0.0 2.5 2.8 
1 2.5 0.0 2.8 
2 2.8 2.8 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 1] 
Latent embbeding: [2.507385, 2.8220189, 2.7691696] 
Flatten array: [[0.         0.        ]
 [1.         2.50738502]
 [2.         2.82201886]
 [0.         0.        ]
 [1.         2.76916957]
 [0.         0.        ]]
Correlation: [[1.         0.62963855]
 [0.62963855 1.        ]]
---
[[], [], []] [1 0 1 ... 1 1 2] [[ 13.487875   14.213878 ]
 [ -2.5665092  27.439528 ]
 [-33.032127  -44.047085 ]
 ...
 [ 19.73083    44.312843 ]
 [ 48.207493   29.154911 ]
 [-60.511322  -10.466882 ]]
saved ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_3/analyse/0_2/latent__0_2.svg
results (all): {'cluster_avg': 0.12926358, 'cluster_all': array([ 0.1625199 ,  0.10686895, -0.00601532, ..., -0.0576945 ,
        0.19046693,  0.23304075], dtype=float32), 'magnitude_avg': 0.6296385456429796, 'magnitude_all': 0.6296385456429796, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'vae_oscn_seed_3', 'model_name': 'VAE_OSCN', 'target_modality': 0, 'target_property': 2, 'cluster_avg': 0.12926358, 'magnitude_avg': 0.6296385456429796, 'tsne-2d_avg': nan}
Arguments (initial):
{'pretrained_path': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'analyse'}
args are updated using pretrained_path:
 {'experiment': 'test_loop_1', 'model': 'VAE_OSCN', 'run_type': 'train', 'seed': 4, 'num_hidden_layers': 2, 'use_conditional': False, 'use_cnn': False, 'latent_dim': 20, 'obj': 'elbo', 'batch_size': 128, 'epochs': 3, 'K': 20, 'learn_prior': False, 'llik_scaling': 0.0, 'logp': False, 'looser': False, 'print_freq': 100, 'no_analytics': False, 'no_cuda': False, 'run_id': 'test_vae_oscn', 'pretrained_path': '', 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn', 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train', 'device': 'cuda'}
Parameters were loaded for classifier
Run ID:
 vae_oscn_seed_4
Run Directory:
 ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_4
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]       1,229,200
              ReLU-2                  [-1, 400]               0
            Linear-3                  [-1, 400]         160,400
              ReLU-4                  [-1, 400]               0
            Linear-5                   [-1, 20]           8,020
            Linear-6                   [-1, 20]           8,020
            EncMLP-7       [[-1, 20], [-1, 20]]               0
            Linear-8               [-1, 2, 400]           8,400
              ReLU-9               [-1, 2, 400]               0
           Linear-10               [-1, 2, 400]         160,400
             ReLU-11               [-1, 2, 400]               0
           Linear-12              [-1, 2, 3072]       1,231,872
Print of model summary was skipped because can't multiply sequence by non-int of type 'list'
Loading model VAE_OSCN from ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_4

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: elbo 
t_objectives: iwae


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn',
 'run_id': 'test_classifier_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]       1,229,200
              ReLU-2                  [-1, 400]               0
            Linear-3                   [-1, 20]           8,020
            Linear-4                   [-1, 20]           8,020
            EncMLP-5       [[-1, 20], [-1, 20]]               0
            Linear-6                    [-1, 9]             189
================================================================
Total params: 1,245,429
Trainable params: 1,245,429
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.00
Params size (MB): 4.75
Estimated Total Size (MB): 4.77
----------------------------------------------------------------
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: cross 
t_objectives: cross


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'tuple'> 
label: ('g3s', 'r8s', 'w8s', 'w7s', 'r2t', 'w1t', 'r3s', 'r8s', 'w8s', 'b8j', 'b7j', 'r5j', 'g9s', 'w3j', 'w3j', 'r7j', 'w7j', 'w9j', 'w4j', 'g5j', 'w8s', 'b8t', 'g3j', 'r1s', 'r7s', 'w8s', 'w7j', 'r1j', 'b2j', 'g2s', 'g6j', 'g7s', 'r6t', 'b2t', 'g9s', 'g1t', 'r1s', 'g9s', 'b9t', 'b2s', 'b7j', 'g8s', 'b8s', 'b2j', 'w7j', 'w3j', 'b2j', 'g9t', 'b6s', 'g5s', 'w4t', 'r9s', 'g5t', 'b9t', 'g9s', 'b3s', 'r6j', 'b4s', 'w1s', 'g9s', 'w6s', 'r5t', 'w8t', 'b7j', 'b9t', 'r1t', 'b7s', 'g1s', 'w6t', 'g6s', 'b8j', 'r5t', 'b4s', 'g6s', 'g8j', 'b5s', 'g8j', 'b9s', 'g8j', 'b3s', 'r4j', 'w4s', 'w7t', 'g8t', 'w7s', 'b5j', 'w4s', 'b4j', 'g9j', 'b7t', 'g7s', 'w3s', 'g9t', 'b1s', 'g8j', 'g7s', 'r8s', 'w6t', 'r2t', 'w6s', 'w5s', 'w5j', 'r5t', 'w6s', 'w2t', 'w8s', 'r6t', 'g2j', 'g3t', 'w8t', 'r5j', 'b2j', 'w8t', 'g1j', 'b2t', 'g1s', 'b1j', 'w9j', 'r4j', 'r8t', 'r9t', 'b7s', 'w8s', 'r4j', 'w2s', 'w4s', 'w9s', 'b7j') 
type(data): <class 'torch.Tensor'> 
data[0].shape: torch.Size([3, 32, 32])

===
Setting info... 
Target modality: 0 
Target property: 0 
Output directory: ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_4/analyse/0_0 
Number of category 4 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2, 3} 
Start index: 0 
End index: 4 
withzero: False
---
Silhouette values: [0.1518489  0.14548835 0.03193549 ... 0.21482098 0.11868513 0.12445527]
Average of silhouette coef: 0.1298038
---

Distance matrix between labels.
  0   1   2   3
0 0.0 1.8 2.2 1.8 
1 1.8 0.0 2.8 3.4 
2 2.2 2.8 0.0 2.9 
3 1.8 3.4 2.9 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 1, 2, 1] 
Latent embbeding: [1.8193426, 2.188475, 1.7852467, 2.8170025, 3.4055817, 2.8836453] 
Flatten array: [[0.         0.        ]
 [1.         1.81934261]
 [2.         2.18847489]
 [3.         1.78524673]
 [0.         0.        ]
 [1.         2.81700253]
 [2.         3.40558171]
 [0.         0.        ]
 [1.         2.8836453 ]
 [0.         0.        ]]
Correlation: [[ 1.         -0.28785124]
 [-0.28785124  1.        ]]
---
[[], [], [], []] [2 3 0 ... 1 3 3] [[ 11.263309  -41.25364  ]
 [-45.84446    26.848316 ]
 [  2.4594162  19.41756  ]
 ...
 [ 26.664026   33.031754 ]
 [-42.071194    2.942415 ]
 [-41.08217     5.226204 ]]
saved ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_4/analyse/0_0/latent__0_0.svg
results (all): {'cluster_avg': 0.1298038, 'cluster_all': array([0.1518489 , 0.14548835, 0.03193549, ..., 0.21482098, 0.11868513,
       0.12445527], dtype=float32), 'magnitude_avg': 0.28785124156122105, 'magnitude_all': -0.28785124156122105, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'vae_oscn_seed_4', 'model_name': 'VAE_OSCN', 'target_modality': 0, 'target_property': 0, 'cluster_avg': 0.1298038, 'magnitude_avg': 0.28785124156122105, 'tsne-2d_avg': nan}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'tuple'> 
label: ('r3t', 'r4t', 'r9j', 'r7s', 'g1t', 'r1t', 'b7s', 'w7j', 'b8j', 'r6s', 'b9t', 'b8j', 'r9t', 'g2s', 'g8s', 'g8s', 'w1j', 'b3j', 'w8s', 'g4j', 'r8s', 'g5t', 'w1t', 'g7t', 'g3t', 'g9s', 'g9t', 'g6j', 'r3t', 'w5s', 'b3t', 'r6j', 'b7j', 'w4j', 'r4j', 'w1s', 'b9t', 'w5s', 'r3t', 'b6t', 'g6t', 'g9j', 'g5j', 'w3t', 'r4t', 'r5s', 'w7j', 'b7s', 'g7t', 'b9t', 'g8j', 'w1j', 'r1j', 'b9j', 'r3j', 'b7t', 'w5j', 'r1j', 'b6j', 'w1j', 'b1t', 'r2s', 'w9j', 'g2t', 'g5t', 'g4t', 'w9t', 'b2t', 'w1j', 'w8t', 'r4j', 'g3t', 'w1s', 'r7s', 'w8t', 'w8j', 'r9j', 'r6j', 'r7t', 'r5s', 'w2s', 'g7j', 'b5j', 'b1t', 'w1t', 'w6j', 'r7t', 'w1t', 'r2s', 'g1s', 'w1t', 'b5j', 'g8s', 'g1t', 'w2t', 'b6s', 'r7t', 'r2s', 'r3j', 'w9j', 'w6j', 'w7s', 'b2j', 'b1t', 'r5t', 'b8j', 'g3s', 'g2t', 'r4t', 'r8s', 'b9s', 'w1t', 'r2s', 'r4t', 'r4t', 'w2s', 'g6j', 'r4s', 'r7s', 'g6j', 'w5j', 'w4j', 'b7s', 'r8s', 'b4s', 'g2j', 'g6t', 'w5j') 
type(data): <class 'torch.Tensor'> 
data[0].shape: torch.Size([3, 32, 32])

===
Setting info... 
Target modality: 0 
Target property: 1 
Output directory: ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_4/analyse/0_1 
Number of category 10 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {1, 2, 3, 4, 5, 6, 7, 8, 9} 
Start index: 1 
End index: 10 
withzero: False
---
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([9, 6, 4, 3, 9, 1, 5, 4, 7, 8, 5, 2, 3, 9, 2, 6, 8, 1, 3, 1, 9, 1, 4, 6,
        1, 4, 3, 9, 2, 2, 9, 7, 2, 2, 5, 2, 6, 5, 3, 3, 9, 6, 5, 5, 3, 5, 4, 9,
        2, 1, 1, 8, 4, 8, 2, 1, 4, 1, 9, 1, 8, 7, 8, 9, 1, 7, 7, 1, 4, 4, 9, 9,
        1, 6, 1, 2, 7, 1, 6, 8, 7, 5, 4, 2, 1, 8, 1, 2, 1, 6, 3, 3, 4, 4, 6, 2,
        4, 2, 8, 2, 4, 1, 7, 4, 3, 3, 5, 4, 9, 2, 8, 4, 8, 1, 7, 5, 1, 6, 3, 3,
        1, 6, 1, 7, 6, 2, 3, 4])
Accuracy (count): tensor(23) 
Accuracy (ratio) tensor(0.1797)
Accuracy:
 [[23  0  0  0  0  0  0  0  0]
 [17  0  0  0  0  0  0  0  0]
 [14  0  0  0  0  0  0  0  0]
 [18  0  0  0  0  0  0  0  0]
 [10  0  0  0  0  0  0  0  0]
 [12  0  0  0  0  0  0  0  0]
 [10  0  0  0  0  0  0  0  0]
 [11  0  0  0  0  0  0  0  0]
 [13  0  0  0  0  0  0  0  0]]
Accuracy:
 [[1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]]
---
Silhouette values: [-0.10828712 -0.09546716 -0.14279836 ... -0.20490213 -0.1258131
  0.04830134]
Average of silhouette coef: -0.09743455
---

Distance matrix between labels.
  1   2   3   4   5   6   7   8   9
1 0.0 0.3 0.2 0.5 0.6 0.5 0.9 1.0 1.1 
2 0.3 0.0 0.3 0.3 0.5 0.4 0.7 0.9 1.0 
3 0.2 0.3 0.0 0.3 0.4 0.3 0.7 0.9 0.9 
4 0.5 0.3 0.3 0.0 0.3 0.3 0.6 0.8 0.8 
5 0.6 0.5 0.4 0.3 0.0 0.3 0.3 0.6 0.7 
6 0.5 0.4 0.3 0.3 0.3 0.0 0.5 0.7 0.7 
7 0.9 0.7 0.7 0.6 0.3 0.5 0.0 0.3 0.4 
8 1.0 0.9 0.9 0.8 0.6 0.7 0.3 0.0 0.2 
9 1.1 1.0 0.9 0.8 0.7 0.7 0.4 0.2 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
Latent embbeding: [0.2700119, 0.2468167, 0.45584017, 0.5832789, 0.4609449, 0.8505637, 1.046661, 1.1227099, 0.2606554, 0.34692237, 0.49894562, 0.44604662, 0.73675495, 0.9393984, 1.0216165, 0.3485234, 0.4438156, 0.3276369, 0.66951925, 0.8513173, 0.92332333, 0.31080174, 0.2591186, 0.55832255, 0.76982015, 0.8164723, 0.30383453, 0.34626958, 0.5678151, 0.66709703, 0.49660516, 0.66456044, 0.7014449, 0.25854588, 0.4153152, 0.2430593] 
Flatten array: [[0.         0.        ]
 [1.         0.2700119 ]
 [2.         0.24681669]
 [3.         0.45584017]
 [4.         0.58327889]
 [5.         0.46094489]
 [6.         0.8505637 ]
 [7.         1.04666102]
 [8.         1.12270987]
 [0.         0.        ]
 [1.         0.2606554 ]
 [2.         0.34692237]
 [3.         0.49894562]
 [4.         0.44604662]
 [5.         0.73675495]
 [6.         0.93939841]
 [7.         1.02161646]
 [0.         0.        ]
 [1.         0.34852341]
 [2.         0.44381559]
 [3.         0.3276369 ]
 [4.         0.66951925]
 [5.         0.85131729]
 [6.         0.92332333]
 [0.         0.        ]
 [1.         0.31080174]
 [2.         0.25911859]
 [3.         0.55832255]
 [4.         0.76982015]
 [5.         0.81647229]
 [0.         0.        ]
 [1.         0.30383453]
 [2.         0.34626958]
 [3.         0.56781512]
 [4.         0.66709703]
 [0.         0.        ]
 [1.         0.49660516]
 [2.         0.66456044]
 [3.         0.70144492]
 [0.         0.        ]
 [1.         0.25854588]
 [2.         0.41531521]
 [0.         0.        ]
 [1.         0.24305931]
 [0.         0.        ]]
Correlation: [[1.         0.90561913]
 [0.90561913 1.        ]]
---
[[], [], [], [], [], [], [], [], [], []] [3 4 9 ... 5 2 1] [[-38.87425     6.7041516]
 [  9.324961   15.265388 ]
 [ 41.001427    0.721226 ]
 ...
 [  7.293896    7.904313 ]
 [-48.184273  -16.00905  ]
 [-27.662527   -5.839121 ]]
saved ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_4/analyse/0_1/latent__0_1.svg
---
length of elements: 408 408
length of 1: 36
length of 2: 43
length of 3: 48
length of 4: 51
length of 5: 52
length of 6: 51
length of 7: 48
length of 8: 43
length of 9: 36
all elements:

[(1, (1, 2, 2)),
 (2, (1, 3, 2)),
 (1, (1, 3, 3)),
 (3, (1, 4, 2)),
 (2, (1, 4, 3)),
 (1, (1, 4, 4)),
 (4, (1, 5, 2)),
 (3, (1, 5, 3)),
 (2, (1, 5, 4)),
 (1, (1, 5, 5)),
 (5, (1, 6, 2)),
 (4, (1, 6, 3)),
 (3, (1, 6, 4)),
 (2, (1, 6, 5)),
 (1, (1, 6, 6)),
 (6, (1, 7, 2)),
 (5, (1, 7, 3)),
 (4, (1, 7, 4)),
 (3, (1, 7, 5)),
 (2, (1, 7, 6)),
 (1, (1, 7, 7)),
 (7, (1, 8, 2)),
 (6, (1, 8, 3)),
 (5, (1, 8, 4)),
 (4, (1, 8, 5)),
 (3, (1, 8, 6)),
 (2, (1, 8, 7)),
 (1, (1, 8, 8)),
 (8, (1, 9, 2)),
 (7, (1, 9, 3)),
 (6, (1, 9, 4)),
 (5, (1, 9, 5)),
 (4, (1, 9, 6)),
 (3, (1, 9, 7)),
 (2, (1, 9, 8)),
 (1, (1, 9, 9)),
 (2, (2, 1, 1)),
 (3, (2, 2, 1)),
 (1, (2, 2, 3)),
 (4, (2, 3, 1)),
 (2, (2, 3, 3)),
 (1, (2, 3, 4)),
 (5, (2, 4, 1)),
 (3, (2, 4, 3)),
 (2, (2, 4, 4)),
 (1, (2, 4, 5)),
 (6, (2, 5, 1)),
 (4, (2, 5, 3)),
 (3, (2, 5, 4)),
 (2, (2, 5, 5)),
 (1, (2, 5, 6)),
 (7, (2, 6, 1)),
 (5, (2, 6, 3)),
 (4, (2, 6, 4)),
 (3, (2, 6, 5)),
 (2, (2, 6, 6)),
 (1, (2, 6, 7)),
 (8, (2, 7, 1)),
 (6, (2, 7, 3)),
 (5, (2, 7, 4)),
 (4, (2, 7, 5)),
 (3, (2, 7, 6)),
 (2, (2, 7, 7)),
 (1, (2, 7, 8)),
 (9, (2, 8, 1)),
 (7, (2, 8, 3)),
 (6, (2, 8, 4)),
 (5, (2, 8, 5)),
 (4, (2, 8, 6)),
 (3, (2, 8, 7)),
 (2, (2, 8, 8)),
 (1, (2, 8, 9)),
 (8, (2, 9, 3)),
 (7, (2, 9, 4)),
 (6, (2, 9, 5)),
 (5, (2, 9, 6)),
 (4, (2, 9, 7)),
 (3, (2, 9, 8)),
 (2, (2, 9, 9)),
 (3, (3, 1, 1)),
 (2, (3, 1, 2)),
 (4, (3, 2, 1)),
 (3, (3, 2, 2)),
 (1, (3, 2, 4)),
 (5, (3, 3, 1)),
 (4, (3, 3, 2)),
 (2, (3, 3, 4)),
 (1, (3, 3, 5)),
 (6, (3, 4, 1)),
 (5, (3, 4, 2)),
 (3, (3, 4, 4)),
 (2, (3, 4, 5)),
 (1, (3, 4, 6)),
 (7, (3, 5, 1)),
 (6, (3, 5, 2)),
 (4, (3, 5, 4)),
 (3, (3, 5, 5)),
 (2, (3, 5, 6)),
 (1, (3, 5, 7)),
 (8, (3, 6, 1)),
 (7, (3, 6, 2)),
 (5, (3, 6, 4)),
 (4, (3, 6, 5)),
 (3, (3, 6, 6)),
 (2, (3, 6, 7)),
 (1, (3, 6, 8)),
 (9, (3, 7, 1)),
 (8, (3, 7, 2)),
 (6, (3, 7, 4)),
 (5, (3, 7, 5)),
 (4, (3, 7, 6)),
 (3, (3, 7, 7)),
 (2, (3, 7, 8)),
 (1, (3, 7, 9)),
 (9, (3, 8, 2)),
 (7, (3, 8, 4)),
 (6, (3, 8, 5)),
 (5, (3, 8, 6)),
 (4, (3, 8, 7)),
 (3, (3, 8, 8)),
 (2, (3, 8, 9)),
 (8, (3, 9, 4)),
 (7, (3, 9, 5)),
 (6, (3, 9, 6)),
 (5, (3, 9, 7)),
 (4, (3, 9, 8)),
 (3, (3, 9, 9)),
 (4, (4, 1, 1)),
 (3, (4, 1, 2)),
 (2, (4, 1, 3)),
 (5, (4, 2, 1)),
 (4, (4, 2, 2)),
 (3, (4, 2, 3)),
 (1, (4, 2, 5)),
 (6, (4, 3, 1)),
 (5, (4, 3, 2)),
 (4, (4, 3, 3)),
 (2, (4, 3, 5)),
 (1, (4, 3, 6)),
 (7, (4, 4, 1)),
 (6, (4, 4, 2)),
 (5, (4, 4, 3)),
 (3, (4, 4, 5)),
 (2, (4, 4, 6)),
 (1, (4, 4, 7)),
 (8, (4, 5, 1)),
 (7, (4, 5, 2)),
 (6, (4, 5, 3)),
 (4, (4, 5, 5)),
 (3, (4, 5, 6)),
 (2, (4, 5, 7)),
 (1, (4, 5, 8)),
 (9, (4, 6, 1)),
 (8, (4, 6, 2)),
 (7, (4, 6, 3)),
 (5, (4, 6, 5)),
 (4, (4, 6, 6)),
 (3, (4, 6, 7)),
 (2, (4, 6, 8)),
 (1, (4, 6, 9)),
 (9, (4, 7, 2)),
 (8, (4, 7, 3)),
 (6, (4, 7, 5)),
 (5, (4, 7, 6)),
 (4, (4, 7, 7)),
 (3, (4, 7, 8)),
 (2, (4, 7, 9)),
 (9, (4, 8, 3)),
 (7, (4, 8, 5)),
 (6, (4, 8, 6)),
 (5, (4, 8, 7)),
 (4, (4, 8, 8)),
 (3, (4, 8, 9)),
 (8, (4, 9, 5)),
 (7, (4, 9, 6)),
 (6, (4, 9, 7)),
 (5, (4, 9, 8)),
 (4, (4, 9, 9)),
 (5, (5, 1, 1)),
 (4, (5, 1, 2)),
 (3, (5, 1, 3)),
 (2, (5, 1, 4)),
 (6, (5, 2, 1)),
 (5, (5, 2, 2)),
 (4, (5, 2, 3)),
 (3, (5, 2, 4)),
 (1, (5, 2, 6)),
 (7, (5, 3, 1)),
 (6, (5, 3, 2)),
 (5, (5, 3, 3)),
 (4, (5, 3, 4)),
 (2, (5, 3, 6)),
 (1, (5, 3, 7)),
 (8, (5, 4, 1)),
 (7, (5, 4, 2)),
 (6, (5, 4, 3)),
 (5, (5, 4, 4)),
 (3, (5, 4, 6)),
 (2, (5, 4, 7)),
 (1, (5, 4, 8)),
 (9, (5, 5, 1)),
 (8, (5, 5, 2)),
 (7, (5, 5, 3)),
 (6, (5, 5, 4)),
 (4, (5, 5, 6)),
 (3, (5, 5, 7)),
 (2, (5, 5, 8)),
 (1, (5, 5, 9)),
 (9, (5, 6, 2)),
 (8, (5, 6, 3)),
 (7, (5, 6, 4)),
 (5, (5, 6, 6)),
 (4, (5, 6, 7)),
 (3, (5, 6, 8)),
 (2, (5, 6, 9)),
 (9, (5, 7, 3)),
 (8, (5, 7, 4)),
 (6, (5, 7, 6)),
 (5, (5, 7, 7)),
 (4, (5, 7, 8)),
 (3, (5, 7, 9)),
 (9, (5, 8, 4)),
 (7, (5, 8, 6)),
 (6, (5, 8, 7)),
 (5, (5, 8, 8)),
 (4, (5, 8, 9)),
 (8, (5, 9, 6)),
 (7, (5, 9, 7)),
 (6, (5, 9, 8)),
 (5, (5, 9, 9)),
 (6, (6, 1, 1)),
 (5, (6, 1, 2)),
 (4, (6, 1, 3)),
 (3, (6, 1, 4)),
 (2, (6, 1, 5)),
 (7, (6, 2, 1)),
 (6, (6, 2, 2)),
 (5, (6, 2, 3)),
 (4, (6, 2, 4)),
 (3, (6, 2, 5)),
 (1, (6, 2, 7)),
 (8, (6, 3, 1)),
 (7, (6, 3, 2)),
 (6, (6, 3, 3)),
 (5, (6, 3, 4)),
 (4, (6, 3, 5)),
 (2, (6, 3, 7)),
 (1, (6, 3, 8)),
 (9, (6, 4, 1)),
 (8, (6, 4, 2)),
 (7, (6, 4, 3)),
 (6, (6, 4, 4)),
 (5, (6, 4, 5)),
 (3, (6, 4, 7)),
 (2, (6, 4, 8)),
 (1, (6, 4, 9)),
 (9, (6, 5, 2)),
 (8, (6, 5, 3)),
 (7, (6, 5, 4)),
 (6, (6, 5, 5)),
 (4, (6, 5, 7)),
 (3, (6, 5, 8)),
 (2, (6, 5, 9)),
 (9, (6, 6, 3)),
 (8, (6, 6, 4)),
 (7, (6, 6, 5)),
 (5, (6, 6, 7)),
 (4, (6, 6, 8)),
 (3, (6, 6, 9)),
 (9, (6, 7, 4)),
 (8, (6, 7, 5)),
 (6, (6, 7, 7)),
 (5, (6, 7, 8)),
 (4, (6, 7, 9)),
 (9, (6, 8, 5)),
 (7, (6, 8, 7)),
 (6, (6, 8, 8)),
 (5, (6, 8, 9)),
 (8, (6, 9, 7)),
 (7, (6, 9, 8)),
 (6, (6, 9, 9)),
 (7, (7, 1, 1)),
 (6, (7, 1, 2)),
 (5, (7, 1, 3)),
 (4, (7, 1, 4)),
 (3, (7, 1, 5)),
 (2, (7, 1, 6)),
 (8, (7, 2, 1)),
 (7, (7, 2, 2)),
 (6, (7, 2, 3)),
 (5, (7, 2, 4)),
 (4, (7, 2, 5)),
 (3, (7, 2, 6)),
 (1, (7, 2, 8)),
 (9, (7, 3, 1)),
 (8, (7, 3, 2)),
 (7, (7, 3, 3)),
 (6, (7, 3, 4)),
 (5, (7, 3, 5)),
 (4, (7, 3, 6)),
 (2, (7, 3, 8)),
 (1, (7, 3, 9)),
 (9, (7, 4, 2)),
 (8, (7, 4, 3)),
 (7, (7, 4, 4)),
 (6, (7, 4, 5)),
 (5, (7, 4, 6)),
 (3, (7, 4, 8)),
 (2, (7, 4, 9)),
 (9, (7, 5, 3)),
 (8, (7, 5, 4)),
 (7, (7, 5, 5)),
 (6, (7, 5, 6)),
 (4, (7, 5, 8)),
 (3, (7, 5, 9)),
 (9, (7, 6, 4)),
 (8, (7, 6, 5)),
 (7, (7, 6, 6)),
 (5, (7, 6, 8)),
 (4, (7, 6, 9)),
 (9, (7, 7, 5)),
 (8, (7, 7, 6)),
 (6, (7, 7, 8)),
 (5, (7, 7, 9)),
 (9, (7, 8, 6)),
 (7, (7, 8, 8)),
 (6, (7, 8, 9)),
 (8, (7, 9, 8)),
 (7, (7, 9, 9)),
 (8, (8, 1, 1)),
 (7, (8, 1, 2)),
 (6, (8, 1, 3)),
 (5, (8, 1, 4)),
 (4, (8, 1, 5)),
 (3, (8, 1, 6)),
 (2, (8, 1, 7)),
 (9, (8, 2, 1)),
 (8, (8, 2, 2)),
 (7, (8, 2, 3)),
 (6, (8, 2, 4)),
 (5, (8, 2, 5)),
 (4, (8, 2, 6)),
 (3, (8, 2, 7)),
 (1, (8, 2, 9)),
 (9, (8, 3, 2)),
 (8, (8, 3, 3)),
 (7, (8, 3, 4)),
 (6, (8, 3, 5)),
 (5, (8, 3, 6)),
 (4, (8, 3, 7)),
 (2, (8, 3, 9)),
 (9, (8, 4, 3)),
 (8, (8, 4, 4)),
 (7, (8, 4, 5)),
 (6, (8, 4, 6)),
 (5, (8, 4, 7)),
 (3, (8, 4, 9)),
 (9, (8, 5, 4)),
 (8, (8, 5, 5)),
 (7, (8, 5, 6)),
 (6, (8, 5, 7)),
 (4, (8, 5, 9)),
 (9, (8, 6, 5)),
 (8, (8, 6, 6)),
 (7, (8, 6, 7)),
 (5, (8, 6, 9)),
 (9, (8, 7, 6)),
 (8, (8, 7, 7)),
 (6, (8, 7, 9)),
 (9, (8, 8, 7)),
 (7, (8, 8, 9)),
 (8, (8, 9, 9)),
 (9, (9, 1, 1)),
 (8, (9, 1, 2)),
 (7, (9, 1, 3)),
 (6, (9, 1, 4)),
 (5, (9, 1, 5)),
 (4, (9, 1, 6)),
 (3, (9, 1, 7)),
 (2, (9, 1, 8)),
 (9, (9, 2, 2)),
 (8, (9, 2, 3)),
 (7, (9, 2, 4)),
 (6, (9, 2, 5)),
 (5, (9, 2, 6)),
 (4, (9, 2, 7)),
 (3, (9, 2, 8)),
 (9, (9, 3, 3)),
 (8, (9, 3, 4)),
 (7, (9, 3, 5)),
 (6, (9, 3, 6)),
 (5, (9, 3, 7)),
 (4, (9, 3, 8)),
 (9, (9, 4, 4)),
 (8, (9, 4, 5)),
 (7, (9, 4, 6)),
 (6, (9, 4, 7)),
 (5, (9, 4, 8)),
 (9, (9, 5, 5)),
 (8, (9, 5, 6)),
 (7, (9, 5, 7)),
 (6, (9, 5, 8)),
 (9, (9, 6, 6)),
 (8, (9, 6, 7)),
 (7, (9, 6, 8)),
 (9, (9, 7, 7)),
 (8, (9, 7, 8)),
 (9, (9, 8, 8))]
i: 1
shape (20,)
i: 2
shape (20,)
i: 3
shape (20,)
i: 4
shape (20,)
i: 5
shape (20,)
i: 6
shape (20,)
i: 7
shape (20,)
i: 8
shape (20,)
i: 9
shape (20,)
mean_all: [None, array([-0.5379616 ,  0.03494112,  0.10783625,  0.022984  ,  0.11839755,
        0.02551412,  0.00218369,  0.01175901,  0.09698774, -0.02109038,
        0.01097605, -0.01437285,  0.03993304,  0.19949509, -0.05646949,
        0.00778161,  0.01645076,  0.03884922,  0.04274648,  0.01224842],
      dtype=float32), array([-0.39875546,  0.02899277,  0.21780907,  0.01805175,  0.08241435,
        0.02975894, -0.00364229,  0.01363815,  0.06650614, -0.02276214,
        0.00654067, -0.01637199,  0.03805202,  0.11707608,  0.05498054,
        0.01583854,  0.02432547,  0.04360228,  0.18285121,  0.02073833],
      dtype=float32), array([-3.19476515e-01,  2.93907207e-02,  3.56985591e-02,  1.13877328e-02,
        9.01276544e-02,  2.49892715e-02, -2.63988652e-04,  2.82833558e-02,
        1.18113525e-01, -3.00356243e-02,  1.84614491e-02, -1.41120413e-02,
        3.56616154e-02,  2.08914787e-01,  1.86528545e-02,  1.31028630e-02,
        2.27355491e-02,  3.52003463e-02,  5.86122461e-02,  2.05854513e-02],
      dtype=float32), array([-0.29688966,  0.02754542,  0.03958564,  0.00985446, -0.05953195,
        0.02651863,  0.00146354,  0.03343716,  0.15699922, -0.02986532,
        0.01135464, -0.01429813,  0.031439  , -0.09094904,  0.08316575,
        0.01798878,  0.02921806,  0.03897301,  0.11118372,  0.02233014],
      dtype=float32), array([-0.12266849,  0.02883122,  0.05241173,  0.00576469, -0.21679378,
        0.03361491, -0.00369706,  0.03444535,  0.05245475, -0.02826172,
        0.0134019 , -0.00720058,  0.03289988, -0.02163484, -0.052607  ,
        0.00966272,  0.02578258,  0.03646264,  0.02819087,  0.0152746 ],
      dtype=float32), array([-0.20230561,  0.02795744, -0.0345504 ,  0.03012921,  0.01957197,
        0.02018719,  0.00744438,  0.0341858 ,  0.1884266 , -0.02965602,
        0.01423536, -0.00508669,  0.03162408, -0.04089021, -0.09392203,
       -0.00876798,  0.01062443,  0.0375088 ,  0.0145791 , -0.00240761],
      dtype=float32), array([ 0.19204672,  0.02569192,  0.05150598,  0.01504319, -0.15526088,
        0.0174204 ,  0.00423788,  0.03959794, -0.01547373, -0.02599666,
        0.01887508, -0.00657909,  0.02054863, -0.10223614, -0.02204678,
       -0.0082589 ,  0.0163554 ,  0.03530847, -0.03172684, -0.00441815],
      dtype=float32), array([ 0.41878852,  0.01736899, -0.01633335,  0.03143731, -0.12323361,
        0.01244866,  0.00107039,  0.02546755,  0.01695234, -0.0204263 ,
        0.01326534, -0.02120322,  0.01979549, -0.1045424 , -0.10526507,
       -0.01791705,  0.00991048,  0.02341562, -0.00624179, -0.01142004],
      dtype=float32), array([ 0.46984723,  0.01253897, -0.06710035,  0.04328961, -0.10470277,
       -0.01768744,  0.02287952,  0.00953653,  0.23310809, -0.00809943,
        0.02360882, -0.02805908,  0.00889293, -0.16877696, -0.09651321,
       -0.02216244,  0.00272153,  0.01710634,  0.00725028, -0.02173451],
      dtype=float32)]
---
Target calculation: 1+1-1
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
Accuracy (count): tensor(64) 
Accuracy (ratio) tensor(1.)
Accuracy:
 [[64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.5  0.0  0.1  0.0  0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.2  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.3  0.0  0.0  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2  0.0  0.0  0.0  0.0  0.1  0.0 
-0.3  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.1  0.0 
-0.1  0.0  0.1  0.0 -0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.2  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.0 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.2  0.0  0.1  0.0 -0.2  0.0  0.0  0.0 -0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 
 0.4  0.0 -0.0  0.0 -0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0 -0.0 -0.0 
 0.5  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.2 -0.1 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 1 
indices: 1 
distance: 0.0
---
Target calculation: 1+9-8
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.5  0.0  0.1  0.0  0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.2  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.3  0.0  0.0  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2  0.0  0.0  0.0  0.0  0.1  0.0 
-0.3  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.1  0.0 
-0.1  0.0  0.1  0.0 -0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.2  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.0 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.2  0.0  0.1  0.0 -0.2  0.0  0.0  0.0 -0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 
 0.4  0.0 -0.0  0.0 -0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0 -0.0 -0.0 
 0.5  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.2 -0.1 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 2 
indices: 1 
distance: 0.2430593
---
Target calculation: 1+8-4
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.5  0.0  0.1  0.0  0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.2  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.3  0.0  0.0  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2  0.0  0.0  0.0  0.0  0.1  0.0 
-0.3  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.1  0.0 
-0.1  0.0  0.1  0.0 -0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.2  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.0 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.2  0.0  0.1  0.0 -0.2  0.0  0.0  0.0 -0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 
 0.4  0.0 -0.0  0.0 -0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0 -0.0 -0.0 
 0.5  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.2 -0.1 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 5 
indices: 7 
distance: 0.42836246
---
Target calculation: 2+7-1
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]]
-0.5  0.0  0.1  0.0  0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.2  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.3  0.0  0.0  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2  0.0  0.0  0.0  0.0  0.1  0.0 
-0.3  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.1  0.0 
-0.1  0.0  0.1  0.0 -0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.2  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.0 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.2  0.0  0.1  0.0 -0.2  0.0  0.0  0.0 -0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 
 0.4  0.0 -0.0  0.0 -0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0 -0.0 -0.0 
 0.5  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.2 -0.1 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 8 
indices: 7 
distance: 0.2700119
---
Target calculation: 2+7-2
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.5  0.0  0.1  0.0  0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.2  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.3  0.0  0.0  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2  0.0  0.0  0.0  0.0  0.1  0.0 
-0.3  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.1  0.0 
-0.1  0.0  0.1  0.0 -0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.2  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.0 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.2  0.0  0.1  0.0 -0.2  0.0  0.0  0.0 -0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 
 0.4  0.0 -0.0  0.0 -0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0 -0.0 -0.0 
 0.5  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.2 -0.1 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 7 
indices: 7 
distance: 1.1706543e-08
---
Target calculation: 3+3-3
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.5  0.0  0.1  0.0  0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.2  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.3  0.0  0.0  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2  0.0  0.0  0.0  0.0  0.1  0.0 
-0.3  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.1  0.0 
-0.1  0.0  0.1  0.0 -0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.2  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.0 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.2  0.0  0.1  0.0 -0.2  0.0  0.0  0.0 -0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 
 0.4  0.0 -0.0  0.0 -0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0 -0.0 -0.0 
 0.5  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.2 -0.1 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 0.0
---
Target calculation: 3+5-2
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [63  1  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.984 0.016 0.    0.    0.    0.    0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.5  0.0  0.1  0.0  0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.2  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.3  0.0  0.0  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2  0.0  0.0  0.0  0.0  0.1  0.0 
-0.3  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.1  0.0 
-0.1  0.0  0.1  0.0 -0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.2  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.0 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.2  0.0  0.1  0.0 -0.2  0.0  0.0  0.0 -0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 
 0.4  0.0 -0.0  0.0 -0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0 -0.0 -0.0 
 0.5  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.2 -0.1 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 6 
indices: 5 
distance: 0.26065543
---
Target calculation: 3+6-3
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.5  0.0  0.1  0.0  0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.2  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.3  0.0  0.0  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2  0.0  0.0  0.0  0.0  0.1  0.0 
-0.3  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.1  0.0 
-0.1  0.0  0.1  0.0 -0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.2  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.0 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.2  0.0  0.1  0.0 -0.2  0.0  0.0  0.0 -0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 
 0.4  0.0 -0.0  0.0 -0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0 -0.0 -0.0 
 0.5  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.2 -0.1 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 6 
indices: 6 
distance: 3.4155548e-08
---
Target calculation: 5+3-5
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.5  0.0  0.1  0.0  0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.2  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.3  0.0  0.0  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2  0.0  0.0  0.0  0.0  0.1  0.0 
-0.3  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.1  0.0 
-0.1  0.0  0.1  0.0 -0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.2  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.0 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.2  0.0  0.1  0.0 -0.2  0.0  0.0  0.0 -0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 
 0.4  0.0 -0.0  0.0 -0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0 -0.0 -0.0 
 0.5  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.2 -0.1 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 3.1321036e-08
---
Target calculation: 9+7-8
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [64  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]]
-0.5  0.0  0.1  0.0  0.1  0.0  0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.4  0.0  0.2  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.1  0.1  0.0  0.0  0.0  0.2  0.0 
-0.3  0.0  0.0  0.0  0.1  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0  0.2  0.0  0.0  0.0  0.0  0.1  0.0 
-0.3  0.0  0.0  0.0 -0.1  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.1  0.1  0.0  0.0  0.0  0.1  0.0 
-0.1  0.0  0.1  0.0 -0.2  0.0 -0.0  0.0  0.1 -0.0  0.0 -0.0  0.0 -0.0 -0.1  0.0  0.0  0.0  0.0  0.0 
-0.2  0.0 -0.0  0.0  0.0  0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.0 -0.1 -0.0  0.0  0.0  0.0 -0.0 
 0.2  0.0  0.1  0.0 -0.2  0.0  0.0  0.0 -0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.0 -0.0  0.0  0.0 -0.0 -0.0 
 0.4  0.0 -0.0  0.0 -0.1  0.0  0.0  0.0  0.0 -0.0  0.0 -0.0  0.0 -0.1 -0.1 -0.0  0.0  0.0 -0.0 -0.0 
 0.5  0.0 -0.1  0.0 -0.1 -0.0  0.0  0.0  0.2 -0.0  0.0 -0.0  0.0 -0.2 -0.1 -0.0  0.0  0.0  0.0 -0.0 
Minimum distance of calculation. 
true answer: 8 
indices: 7 
distance: 0.2430593
---
pred: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) 
tar: tensor([1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 7, 6, 5,
        4, 3, 2, 1, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1, 4, 2, 1, 5, 3, 2, 1, 6, 4,
        3, 2, 1, 7, 5, 4, 3, 2, 1, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3, 2, 1,
        8, 7, 6, 5, 4, 3, 2, 3, 2, 4, 3, 1, 5, 4, 2, 1, 6, 5, 3, 2, 1, 7, 6, 4,
        3, 2, 1, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3,
        2, 8, 7, 6, 5, 4, 3, 4, 3, 2, 5, 4, 3, 1, 6, 5, 4, 2, 1, 7, 6, 5, 3, 2,
        1, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 9,
        7, 6, 5, 4, 3, 8, 7, 6, 5, 4, 5, 4, 3, 2, 6, 5, 4, 3, 1, 7, 6, 5, 4, 2,
        1, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 9,
        8, 6, 5, 4, 3, 9, 7, 6, 5, 4, 8, 7, 6, 5, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3,
        1, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 9,
        8, 7, 5, 4, 3, 9, 8, 6, 5, 4, 9, 7, 6, 5, 8, 7, 6, 7, 6, 5, 4, 3, 2, 8,
        7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 9, 8, 7,
        6, 4, 3, 9, 8, 7, 5, 4, 9, 8, 6, 5, 9, 7, 6, 8, 7, 8, 7, 6, 5, 4, 3, 2,
        9, 8, 7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 9, 8, 7, 6, 5, 3, 9, 8, 7,
        6, 4, 9, 8, 7, 5, 9, 8, 6, 9, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 9, 8, 7, 6,
        5, 4, 3, 9, 8, 7, 6, 5, 4, 9, 8, 7, 6, 5, 9, 8, 7, 6, 9, 8, 7, 9, 8, 9])
Accuracy (count): tensor(36) 
Accuracy (ratio) tensor(0.0882)
Accuracy:
 [[36  0  0  0  0  0  0  0  0]
 [43  0  0  0  0  0  0  0  0]
 [48  0  0  0  0  0  0  0  0]
 [51  0  0  0  0  0  0  0  0]
 [52  0  0  0  0  0  0  0  0]
 [51  0  0  0  0  0  0  0  0]
 [48  0  0  0  0  0  0  0  0]
 [43  0  0  0  0  0  0  0  0]
 [36  0  0  0  0  0  0  0  0]]
Accuracy:
 [[1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]]
results (all): {'reconst_0x0_avg': 0.1796875, 'reconst_0x0_all': nan, 'cluster_avg': -0.09743455, 'cluster_all': array([-0.10828712, -0.09546716, -0.14279836, ..., -0.20490213,
       -0.1258131 ,  0.04830134], dtype=float32), 'magnitude_avg': 0.905619128046374, 'magnitude_all': 0.905619128046374, 'tsne-2d_avg': nan, 'tsne-2d_all': nan, 'mathematics_1+1-1_avg': 1.0, 'mathematics_1+1-1_all': nan, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+9-8_all': nan, 'mathematics_1+8-4_avg': 0.0, 'mathematics_1+8-4_all': nan, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-1_all': nan, 'mathematics_2+7-2_avg': 0.0, 'mathematics_2+7-2_all': nan, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+3-3_all': nan, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+5-2_all': nan, 'mathematics_3+6-3_avg': 0.0, 'mathematics_3+6-3_all': nan, 'mathematics_5+3-5_avg': 0.0, 'mathematics_5+3-5_all': nan, 'mathematics_9+7-8_avg': 0.0, 'mathematics_9+7-8_all': nan, 'mathematics_avg': 0.0882352963089943, 'mathematics_all': nan}
results (only averages): {'id': 'vae_oscn_seed_4', 'model_name': 'VAE_OSCN', 'target_modality': 0, 'target_property': 1, 'reconst_0x0_avg': 0.1796875, 'cluster_avg': -0.09743455, 'magnitude_avg': 0.905619128046374, 'tsne-2d_avg': nan, 'mathematics_1+1-1_avg': 1.0, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+8-4_avg': 0.0, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-2_avg': 0.0, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+6-3_avg': 0.0, 'mathematics_5+3-5_avg': 0.0, 'mathematics_9+7-8_avg': 0.0, 'mathematics_avg': 0.0882352963089943}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'tuple'> 
label: ('r2t', 'r7s', 'b4j', 'b7s', 'b6t', 'g5s', 'b6j', 'w9s', 'g3s', 'w5t', 'r6j', 'r1s', 'b9j', 'g3j', 'w1j', 'w1s', 'b7s', 'r4t', 'r4j', 'b8t', 'b4j', 'b2j', 'b7t', 'b3s', 'r9j', 'r9j', 'r7t', 'r3t', 'b5s', 'b6j', 'g8t', 'r4j', 'g5t', 'g2t', 'r6t', 'b7t', 'g1j', 'w8j', 'b8t', 'b6j', 'g5t', 'r6s', 'g6t', 'b1j', 'g2s', 'g1j', 'w3s', 'w8j', 'w4t', 'r7t', 'g8j', 'r2t', 'w6t', 'r6t', 'b6s', 'g4t', 'r8t', 'w2j', 'r3t', 'w4t', 'g5s', 'b3j', 'b8j', 'w4s', 'b6s', 'r2j', 'w2t', 'g7t', 'r5t', 'r9t', 'g1j', 'w7s', 'r3j', 'g9j', 'r8s', 'r2s', 'b7s', 'g2s', 'g3j', 'b7j', 'r5t', 'w1s', 'r1j', 'g3t', 'g9j', 'r1t', 'w4t', 'r5t', 'b6s', 'g6t', 'g9t', 'r6t', 'g5t', 'r2s', 'g2t', 'b9j', 'b3t', 'w9j', 'r3s', 'g1t', 'g8t', 'w3j', 'w7s', 'g3j', 'w4t', 'r2j', 'b5s', 'r9j', 'r4t', 'r1s', 'g4j', 'g3s', 'g8j', 'g6s', 'b9t', 'r3j', 'w4t', 'w7s', 'b1s', 'b8s', 'b8s', 'r2j', 'b6t', 'g4t', 'w2s', 'w1s', 'b9j', 'w4s') 
type(data): <class 'torch.Tensor'> 
data[0].shape: torch.Size([3, 32, 32])

===
Setting info... 
Target modality: 0 
Target property: 2 
Output directory: ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_4/analyse/0_2 
Number of category 3 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2} 
Start index: 0 
End index: 3 
withzero: False
---
Silhouette values: [0.0594451  0.05627233 0.17957512 ... 0.13348612 0.13627544 0.17090994]
Average of silhouette coef: 0.12166454
---

Distance matrix between labels.
  0   1   2
0 0.0 2.2 2.6 
1 2.2 0.0 2.5 
2 2.6 2.5 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 1] 
Latent embbeding: [2.2412906, 2.6437018, 2.4674728] 
Flatten array: [[0.         0.        ]
 [1.         2.24129057]
 [2.         2.64370179]
 [0.         0.        ]
 [1.         2.46747279]
 [0.         0.        ]]
Correlation: [[1.         0.82806683]
 [0.82806683 1.        ]]
---
[[], [], []] [2 1 0 ... 0 0 0] [[ 34.43042   29.783632]
 [ 16.985584  48.7538  ]
 [-29.163502  39.020756]
 ...
 [-35.307453  -9.630643]
 [-43.610504  19.088118]
 [ 13.278818  42.65726 ]]
saved ./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_4/analyse/0_2/latent__0_2.svg
results (all): {'cluster_avg': 0.12166454, 'cluster_all': array([0.0594451 , 0.05627233, 0.17957512, ..., 0.13348612, 0.13627544,
       0.17090994], dtype=float32), 'magnitude_avg': 0.828066833563043, 'magnitude_all': 0.828066833563043, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'vae_oscn_seed_4', 'model_name': 'VAE_OSCN', 'target_modality': 0, 'target_property': 2, 'cluster_avg': 0.12166454, 'magnitude_avg': 0.828066833563043, 'tsne-2d_avg': nan}
Arguments (initial):
{'pretrained_path': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn',
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'analyse'}
args are updated using pretrained_path:
 {'experiment': 'test_loop_1', 'model': 'MMVAE_CMNIST_OSCN', 'run_type': 'train', 'seed': 4, 'num_hidden_layers': 2, 'use_conditional': False, 'use_cnn': False, 'latent_dim': 20, 'obj': 'dreg', 'batch_size': 128, 'epochs': 3, 'K': 20, 'learn_prior': False, 'llik_scaling': 0.0, 'logp': False, 'looser': False, 'print_freq': 100, 'no_analytics': False, 'no_cuda': False, 'run_id': 'test_mmvae_cmnist_oscn', 'pretrained_path': '', 'run_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn', 'output_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/train', 'device': 'cuda'}
Parameters were loaded for classifier
Run ID:
 mmvae_cmnist_oscn_seed_3
Run Directory:
 ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'MMVAE_CMNIST_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'dreg',
 'output_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn',
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'MMVAE_CMNIST_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'dreg',
 'output_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn',
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
Print of model summary was skipped because 'MMVAE_CMNIST_OSCN' object has no attribute 'data_size'
Loading model MMVAE_CMNIST_OSCN from ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3

length of cmnist and oscn dataset (train): 240000 
length of cmnist and oscn dataset (test): 8000

length of dataset (train): 240000 
length of dataset (test): 8000
objectives: m_dreg 
t_objectives: m_iwae


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist',
 'run_id': 'test_classifier_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]         941,200
              ReLU-2                  [-1, 400]               0
            Linear-3                   [-1, 20]           8,020
            Linear-4                   [-1, 20]           8,020
            EncMLP-5       [[-1, 20], [-1, 20]]               0
            Linear-6                    [-1, 9]             189
================================================================
Total params: 957,429
Trainable params: 957,429
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.00
Params size (MB): 3.65
Estimated Total Size (MB): 3.66
----------------------------------------------------------------
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: cross 
t_objectives: cross


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([5, 3, 8, 9, 1, 3, 7, 2, 4, 8, 9, 9, 2, 8, 2, 8, 6, 3, 1, 7, 8, 4, 8, 7,
        9, 4, 4, 5, 9, 3, 7, 1, 7, 1, 6, 8, 7, 1, 4, 4, 2, 1, 4, 5, 4, 5, 4, 5,
        7, 9, 9, 9, 9, 4, 4, 7, 6, 4, 1, 3, 1, 6, 8, 3, 5, 7, 2, 4, 1, 4, 2, 7,
        3, 5, 8, 2, 1, 6, 1, 8, 8, 8, 3, 9, 9, 6, 9, 7, 8, 7, 4, 9, 1, 8, 4, 8,
        6, 8, 6, 5, 5, 7, 1, 1, 9, 7, 2, 8, 3, 9, 1, 3, 7, 4, 8, 9, 7, 4, 9, 2,
        2, 8, 4, 2, 8, 5, 4, 4]), ['b5t', 'r3s', 'g8s', 'g9t', 'r1s', 'b3j', 'r7s', 'w2t', 'w4s', 'w8t', 'r9j', 'r9t', 'w2s', 'r8j', 'r2j', 'r8t', 'g6s', 'g3j', 'w1s', 'r7t', 'w8t', 'r4t', 'w8t', 'b7j', 'g9j', 'g4s', 'r4s', 'b5j', 'g9s', 'b3j', 'w7j', 'w1s', 'g7t', 'g1t', 'g6s', 'r8j', 'g7s', 'g1s', 'b4t', 'w4s', 'b2j', 'g1s', 'r4s', 'g5s', 'w4s', 'w5j', 'g4j', 'r5j', 'g7s', 'b9t', 'g9t', 'r9j', 'b9j', 'b4s', 'r4j', 'w7t', 'b6j', 'g4t', 'g1t', 'r3t', 'w1t', 'b6j', 'r8j', 'w3s', 'w5j', 'b7t', 'b2j', 'w4j', 'r1s', 'r4t', 'b2s', 'r7j', 'w3t', 'w5t', 'g8t', 'w2s', 'w1j', 'b6j', 'w1t', 'g8t', 'w8s', 'g8t', 'w3j', 'b9j', 'b9s', 'g6j', 'b9t', 'r7t', 'w8s', 'g7j', 'r4j', 'r9s', 'w1t', 'b8t', 'r4s', 'b8s', 'r6j', 'w8t', 'w6t', 'b5j', 'r5s', 'g7j', 'r1s', 'w1s', 'b9s', 'g7t', 'g2s', 'w8s', 'w3s', 'b9j', 'w1t', 'r3j', 'g7s', 'r4j', 'b8j', 'r9s', 'r7t', 'w4t', 'g9s', 'g2t', 'r2s', 'r8s', 'g4j', 'r2s', 'g8t', 'g5j', 'r4t', 'r4s']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 0 
Target property: 0 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3/analyse/0_0 
Number of category 4 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2, 3} 
Start index: 0 
End index: 4 
withzero: False
---
Silhouette values: [0.22336505 0.17783663 0.20296586 ... 0.0337538  0.08958162 0.20152631]
Average of silhouette coef: 0.13032916
---

Distance matrix between labels.
  0   1   2   3
0 0.0 3.0 3.0 2.9 
1 3.0 0.0 3.5 3.3 
2 3.0 3.5 0.0 3.6 
3 2.9 3.3 3.6 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 1, 2, 1] 
Latent embbeding: [2.9974205, 2.9878924, 2.8658884, 3.474267, 3.3169982, 3.591232] 
Flatten array: [[0.         0.        ]
 [1.         2.99742055]
 [2.         2.98789239]
 [3.         2.86588836]
 [0.         0.        ]
 [1.         3.47426701]
 [2.         3.31699824]
 [0.         0.        ]
 [1.         3.59123206]
 [0.         0.        ]]
Correlation: [[ 1.         -0.64926282]
 [-0.64926282  1.        ]]
---
[[], [], [], []] [1 3 2 ... 0 2 2] [[  5.3090544  56.079693 ]
 [  9.395109   -9.325978 ]
 [-39.796314  -24.691313 ]
 ...
 [  4.3143616 -31.39958  ]
 [-24.041185  -54.47862  ]
 [-33.530895   42.740158 ]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3/analyse/0_0/latent__0_0.svg
results (all): {'cluster_avg': 0.13032916, 'cluster_all': array([0.22336505, 0.17783663, 0.20296586, ..., 0.0337538 , 0.08958162,
       0.20152631], dtype=float32), 'magnitude_avg': 0.6492628228398806, 'magnitude_all': -0.6492628228398806, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'mmvae_cmnist_oscn_seed_3', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 0, 'target_property': 0, 'cluster_avg': 0.13032916, 'magnitude_avg': 0.6492628228398806, 'tsne-2d_avg': nan}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([1, 9, 6, 4, 8, 7, 1, 4, 9, 3, 1, 5, 6, 6, 4, 4, 1, 3, 6, 3, 2, 4, 7, 2,
        6, 4, 7, 7, 9, 1, 2, 9, 8, 7, 5, 7, 9, 5, 9, 4, 3, 9, 2, 5, 9, 7, 7, 6,
        6, 1, 6, 3, 5, 6, 1, 6, 5, 3, 9, 5, 7, 9, 7, 4, 7, 7, 5, 8, 5, 4, 2, 3,
        3, 2, 9, 9, 3, 7, 2, 5, 7, 9, 4, 6, 6, 8, 8, 5, 1, 1, 1, 2, 1, 8, 5, 8,
        5, 5, 1, 3, 6, 4, 8, 3, 3, 7, 5, 5, 3, 7, 7, 8, 2, 2, 8, 5, 2, 6, 2, 5,
        4, 3, 3, 4, 3, 7, 9, 8]), ['g1s', 'r9t', 'r6t', 'g4j', 'w8s', 'r7j', 'g1s', 'b4t', 'g9j', 'g3j', 'r1t', 'b5s', 'g6j', 'w6t', 'b4s', 'w4s', 'b1t', 'w3j', 'r6j', 'w3s', 'b2s', 'r4j', 'b7s', 'g2j', 'w6j', 'g4j', 'r7s', 'b7j', 'r9s', 'b1s', 'r2j', 'b9t', 'w8t', 'g7s', 'w5t', 'r7j', 'r9t', 'b5t', 'b9s', 'b4j', 'g3s', 'r9s', 'r2j', 'r5t', 'w9j', 'w7s', 'b7j', 'g6j', 'w6j', 'g1j', 'r6t', 'w3s', 'r5j', 'w6j', 'r1j', 'g6j', 'b5s', 'w3j', 'r9s', 'w5s', 'g7s', 'w9t', 'w7s', 'w4j', 'g7s', 'w7t', 'g5s', 'g8s', 'g5s', 'g4j', 'b2s', 'w3j', 'w3t', 'w2s', 'g9t', 'r9t', 'w3j', 'r7j', 'b2t', 'g5s', 'w7t', 'r9s', 'g4t', 'w6s', 'r6s', 'w8t', 'g8t', 'g5s', 'g1j', 'b1s', 'w1t', 'b2j', 'r1t', 'r8j', 'g5t', 'r8t', 'g5t', 'r5j', 'w1t', 'r3j', 'g6j', 'w4t', 'g8t', 'g3s', 'b3t', 'w7j', 'g5j', 'r5s', 'r3j', 'r7t', 'w7s', 'g8t', 'w2s', 'g2s', 'r8s', 'b5j', 'g2t', 'b6j', 'w2s', 'w5j', 'g4s', 'r3t', 'r3s', 'w4t', 'r3s', 'g7t', 'r9j', 'r8t']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 0 
Target property: 1 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3/analyse/0_1 
Number of category 10 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {1, 2, 3, 4, 5, 6, 7, 8, 9} 
Start index: 1 
End index: 10 
withzero: False
---
size of extracted recon in MMVAE: <class 'list'>
size of extracted recon in MMVAE: torch.Size([1, 128, 3, 28, 28])
size of extracted recon in MMVAE: torch.Size([128, 3, 28, 28])
pred: tensor([1, 1, 7, 7, 7, 1, 1, 1, 7, 1, 1, 1, 7, 1, 7, 1, 7, 7, 1, 7, 7, 7, 1, 7,
        1, 7, 1, 1, 7, 1, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 1, 7, 7, 1, 1, 7, 1, 5,
        1, 1, 7, 1, 1, 7, 7, 7, 1, 1, 1, 7, 1, 7, 7, 1, 7, 1, 1, 7, 7, 1, 7, 7,
        1, 1, 1, 7, 7, 7, 7, 7, 1, 7, 7, 1, 1, 7, 7, 7, 7, 1, 7, 1, 7, 7, 1, 7,
        7, 7, 1, 1, 7, 1, 1, 7, 1, 1, 1, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 7, 7, 7,
        7, 1, 7, 7, 7, 1, 1, 1]) 
tar: tensor([5, 9, 2, 9, 1, 8, 1, 3, 5, 8, 7, 4, 7, 3, 6, 1, 3, 6, 8, 2, 6, 1, 2, 5,
        6, 5, 6, 6, 8, 9, 2, 4, 1, 2, 1, 1, 4, 1, 6, 9, 8, 7, 9, 2, 1, 3, 6, 1,
        2, 1, 4, 9, 6, 4, 5, 6, 5, 5, 3, 7, 8, 6, 5, 2, 4, 8, 6, 1, 1, 8, 4, 5,
        2, 9, 2, 6, 5, 8, 7, 1, 2, 6, 3, 5, 4, 7, 6, 4, 3, 2, 7, 4, 9, 8, 1, 6,
        7, 2, 3, 2, 3, 6, 6, 4, 3, 4, 6, 3, 1, 9, 9, 8, 3, 8, 9, 2, 5, 5, 3, 5,
        3, 7, 3, 3, 4, 9, 8, 9])
Accuracy (count): tensor(12) 
Accuracy (ratio) tensor(0.0938)
Accuracy:
 [[ 5  0  0  0  2  0  9  0  0]
 [10  0  0  0  0  0  5  0  0]
 [ 6  0  0  0  0  0 10  0  0]
 [ 4  0  0  0  0  0  9  0  0]
 [ 4  0  0  0  0  0 10  0  0]
 [ 9  0  0  0  0  0 10  0  0]
 [ 2  0  0  0  0  0  7  0  0]
 [10  0  0  0  0  0  3  0  0]
 [ 7  0  0  0  0  0  6  0  0]]
Accuracy:
 [[0.312 0.    0.    0.    0.125 0.    0.562 0.    0.   ]
 [0.667 0.    0.    0.    0.    0.    0.333 0.    0.   ]
 [0.375 0.    0.    0.    0.    0.    0.625 0.    0.   ]
 [0.308 0.    0.    0.    0.    0.    0.692 0.    0.   ]
 [0.286 0.    0.    0.    0.    0.    0.714 0.    0.   ]
 [0.474 0.    0.    0.    0.    0.    0.526 0.    0.   ]
 [0.222 0.    0.    0.    0.    0.    0.778 0.    0.   ]
 [0.769 0.    0.    0.    0.    0.    0.231 0.    0.   ]
 [0.538 0.    0.    0.    0.    0.    0.462 0.    0.   ]]
---
size of extracted recon in MMVAE: <class 'list'>
size of extracted recon in MMVAE: torch.Size([1, 128, 3, 28, 28])
size of extracted recon in MMVAE: torch.Size([128, 3, 28, 28])
pred: tensor([7, 1, 2, 7, 2, 1, 7, 7, 7, 2, 7, 2, 7, 2, 2, 7, 7, 7, 2, 7, 7, 2, 7, 7,
        2, 2, 7, 5, 1, 7, 7, 7, 1, 1, 2, 1, 5, 7, 2, 2, 1, 7, 2, 1, 7, 1, 2, 7,
        7, 1, 1, 7, 7, 1, 1, 2, 1, 2, 7, 7, 1, 7, 2, 7, 2, 7, 1, 2, 2, 2, 2, 7,
        7, 7, 7, 2, 7, 1, 1, 1, 2, 7, 2, 7, 7, 2, 1, 2, 1, 2, 7, 2, 1, 1, 1, 7,
        1, 1, 2, 7, 7, 7, 7, 1, 2, 1, 1, 7, 2, 7, 7, 1, 2, 7, 7, 1, 2, 1, 7, 1,
        2, 2, 1, 1, 1, 7, 1, 1]) 
tar: tensor([7, 7, 3, 8, 3, 7, 9, 5, 1, 7, 7, 8, 5, 9, 3, 8, 2, 3, 5, 1, 3, 3, 7, 5,
        2, 4, 1, 1, 4, 6, 9, 1, 9, 8, 8, 5, 2, 4, 2, 9, 4, 8, 9, 2, 6, 1, 1, 6,
        7, 3, 9, 1, 1, 3, 9, 8, 7, 1, 6, 1, 1, 8, 2, 9, 2, 9, 4, 5, 5, 7, 7, 7,
        8, 7, 8, 9, 7, 6, 4, 2, 4, 1, 6, 4, 1, 4, 8, 1, 4, 6, 7, 6, 4, 5, 1, 6,
        3, 3, 5, 4, 7, 4, 5, 7, 9, 4, 4, 9, 6, 3, 8, 4, 5, 1, 3, 3, 9, 2, 1, 2,
        3, 3, 2, 6, 5, 5, 7, 1])
Accuracy (count): tensor(17) 
Accuracy (ratio) tensor(0.1328)
Accuracy:
 [[ 4  3  0  0  1  0 11  0  0]
 [ 5  4  0  0  1  0  1  0  0]
 [ 5  6  0  0  0  0  4  0  0]
 [ 9  3  0  0  0  0  4  0  0]
 [ 3  5  0  0  0  0  5  0  0]
 [ 2  4  0  0  0  0  5  0  0]
 [ 5  3  0  0  0  0  9  0  0]
 [ 2  3  0  0  0  0  7  0  0]
 [ 3  6  0  0  0  0  5  0  0]]
Accuracy:
 [[0.211 0.158 0.    0.    0.053 0.    0.579 0.    0.   ]
 [0.455 0.364 0.    0.    0.091 0.    0.091 0.    0.   ]
 [0.333 0.4   0.    0.    0.    0.    0.267 0.    0.   ]
 [0.562 0.188 0.    0.    0.    0.    0.25  0.    0.   ]
 [0.231 0.385 0.    0.    0.    0.    0.385 0.    0.   ]
 [0.182 0.364 0.    0.    0.    0.    0.455 0.    0.   ]
 [0.294 0.176 0.    0.    0.    0.    0.529 0.    0.   ]
 [0.167 0.25  0.    0.    0.    0.    0.583 0.    0.   ]
 [0.214 0.429 0.    0.    0.    0.    0.357 0.    0.   ]]
---
Silhouette values: [ 0.3594429   0.07592133  0.01169682 ...  0.16760936 -0.07150716
  0.10966486]
Average of silhouette coef: 0.08829491
---

Distance matrix between labels.
  1   2   3   4   5   6   7   8   9
1 0.0 3.8 2.9 3.9 3.7 4.2 4.0 3.8 4.5 
2 3.8 0.0 2.4 3.4 3.7 3.1 4.0 3.3 4.5 
3 2.9 2.4 0.0 2.9 2.0 2.4 3.8 2.8 4.2 
4 3.9 3.4 2.9 0.0 2.1 2.4 2.2 3.0 2.9 
5 3.7 3.7 2.0 2.1 0.0 2.4 3.4 2.9 3.8 
6 4.2 3.1 2.4 2.4 2.4 0.0 3.9 2.8 3.4 
7 4.0 4.0 3.8 2.2 3.4 3.9 0.0 3.2 2.4 
8 3.8 3.3 2.8 3.0 2.9 2.8 3.2 0.0 2.1 
9 4.5 4.5 4.2 2.9 3.8 3.4 2.4 2.1 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
Latent embbeding: [3.760709, 2.9445872, 3.866265, 3.6569705, 4.2244287, 3.9510868, 3.7625575, 4.5188527, 2.4144652, 3.4455702, 3.6654878, 3.101665, 4.0316596, 3.2647202, 4.462674, 2.8814933, 1.9688572, 2.4312234, 3.8379772, 2.7559655, 4.163131, 2.0741034, 2.4207761, 2.2363853, 3.022337, 2.9288158, 2.3999655, 3.432585, 2.9489844, 3.7786376, 3.8766956, 2.7975168, 3.4179416, 3.1871932, 2.3906727, 2.1459427] 
Flatten array: [[0.         0.        ]
 [1.         3.76070905]
 [2.         2.94458723]
 [3.         3.86626506]
 [4.         3.6569705 ]
 [5.         4.22442865]
 [6.         3.95108676]
 [7.         3.76255751]
 [8.         4.51885271]
 [0.         0.        ]
 [1.         2.41446519]
 [2.         3.44557023]
 [3.         3.66548777]
 [4.         3.10166502]
 [5.         4.0316596 ]
 [6.         3.2647202 ]
 [7.         4.46267414]
 [0.         0.        ]
 [1.         2.88149333]
 [2.         1.96885717]
 [3.         2.43122339]
 [4.         3.83797717]
 [5.         2.75596547]
 [6.         4.16313124]
 [0.         0.        ]
 [1.         2.07410336]
 [2.         2.42077613]
 [3.         2.23638535]
 [4.         3.02233696]
 [5.         2.92881584]
 [0.         0.        ]
 [1.         2.39996552]
 [2.         3.432585  ]
 [3.         2.94898438]
 [4.         3.77863765]
 [0.         0.        ]
 [1.         3.87669563]
 [2.         2.79751682]
 [3.         3.41794157]
 [0.         0.        ]
 [1.         3.18719316]
 [2.         2.39067268]
 [0.         0.        ]
 [1.         2.14594269]
 [0.         0.        ]]
Correlation: [[1.         0.62288806]
 [0.62288806 1.        ]]
---
[[], [], [], [], [], [], [], [], [], []] [1 9 6 ... 3 8 2] [[-21.534956 -74.69955 ]
 [ 44.78768  -34.85154 ]
 [ 11.213021 -51.59023 ]
 ...
 [ 13.610852 -19.996319]
 [-50.651993  32.170025]
 [ -6.210477 -29.843834]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3/analyse/0_1/latent__0_1.svg
---
length of elements: 408 408
length of 1: 36
length of 2: 43
length of 3: 48
length of 4: 51
length of 5: 52
length of 6: 51
length of 7: 48
length of 8: 43
length of 9: 36
all elements:

[(1, (1, 2, 2)),
 (2, (1, 3, 2)),
 (1, (1, 3, 3)),
 (3, (1, 4, 2)),
 (2, (1, 4, 3)),
 (1, (1, 4, 4)),
 (4, (1, 5, 2)),
 (3, (1, 5, 3)),
 (2, (1, 5, 4)),
 (1, (1, 5, 5)),
 (5, (1, 6, 2)),
 (4, (1, 6, 3)),
 (3, (1, 6, 4)),
 (2, (1, 6, 5)),
 (1, (1, 6, 6)),
 (6, (1, 7, 2)),
 (5, (1, 7, 3)),
 (4, (1, 7, 4)),
 (3, (1, 7, 5)),
 (2, (1, 7, 6)),
 (1, (1, 7, 7)),
 (7, (1, 8, 2)),
 (6, (1, 8, 3)),
 (5, (1, 8, 4)),
 (4, (1, 8, 5)),
 (3, (1, 8, 6)),
 (2, (1, 8, 7)),
 (1, (1, 8, 8)),
 (8, (1, 9, 2)),
 (7, (1, 9, 3)),
 (6, (1, 9, 4)),
 (5, (1, 9, 5)),
 (4, (1, 9, 6)),
 (3, (1, 9, 7)),
 (2, (1, 9, 8)),
 (1, (1, 9, 9)),
 (2, (2, 1, 1)),
 (3, (2, 2, 1)),
 (1, (2, 2, 3)),
 (4, (2, 3, 1)),
 (2, (2, 3, 3)),
 (1, (2, 3, 4)),
 (5, (2, 4, 1)),
 (3, (2, 4, 3)),
 (2, (2, 4, 4)),
 (1, (2, 4, 5)),
 (6, (2, 5, 1)),
 (4, (2, 5, 3)),
 (3, (2, 5, 4)),
 (2, (2, 5, 5)),
 (1, (2, 5, 6)),
 (7, (2, 6, 1)),
 (5, (2, 6, 3)),
 (4, (2, 6, 4)),
 (3, (2, 6, 5)),
 (2, (2, 6, 6)),
 (1, (2, 6, 7)),
 (8, (2, 7, 1)),
 (6, (2, 7, 3)),
 (5, (2, 7, 4)),
 (4, (2, 7, 5)),
 (3, (2, 7, 6)),
 (2, (2, 7, 7)),
 (1, (2, 7, 8)),
 (9, (2, 8, 1)),
 (7, (2, 8, 3)),
 (6, (2, 8, 4)),
 (5, (2, 8, 5)),
 (4, (2, 8, 6)),
 (3, (2, 8, 7)),
 (2, (2, 8, 8)),
 (1, (2, 8, 9)),
 (8, (2, 9, 3)),
 (7, (2, 9, 4)),
 (6, (2, 9, 5)),
 (5, (2, 9, 6)),
 (4, (2, 9, 7)),
 (3, (2, 9, 8)),
 (2, (2, 9, 9)),
 (3, (3, 1, 1)),
 (2, (3, 1, 2)),
 (4, (3, 2, 1)),
 (3, (3, 2, 2)),
 (1, (3, 2, 4)),
 (5, (3, 3, 1)),
 (4, (3, 3, 2)),
 (2, (3, 3, 4)),
 (1, (3, 3, 5)),
 (6, (3, 4, 1)),
 (5, (3, 4, 2)),
 (3, (3, 4, 4)),
 (2, (3, 4, 5)),
 (1, (3, 4, 6)),
 (7, (3, 5, 1)),
 (6, (3, 5, 2)),
 (4, (3, 5, 4)),
 (3, (3, 5, 5)),
 (2, (3, 5, 6)),
 (1, (3, 5, 7)),
 (8, (3, 6, 1)),
 (7, (3, 6, 2)),
 (5, (3, 6, 4)),
 (4, (3, 6, 5)),
 (3, (3, 6, 6)),
 (2, (3, 6, 7)),
 (1, (3, 6, 8)),
 (9, (3, 7, 1)),
 (8, (3, 7, 2)),
 (6, (3, 7, 4)),
 (5, (3, 7, 5)),
 (4, (3, 7, 6)),
 (3, (3, 7, 7)),
 (2, (3, 7, 8)),
 (1, (3, 7, 9)),
 (9, (3, 8, 2)),
 (7, (3, 8, 4)),
 (6, (3, 8, 5)),
 (5, (3, 8, 6)),
 (4, (3, 8, 7)),
 (3, (3, 8, 8)),
 (2, (3, 8, 9)),
 (8, (3, 9, 4)),
 (7, (3, 9, 5)),
 (6, (3, 9, 6)),
 (5, (3, 9, 7)),
 (4, (3, 9, 8)),
 (3, (3, 9, 9)),
 (4, (4, 1, 1)),
 (3, (4, 1, 2)),
 (2, (4, 1, 3)),
 (5, (4, 2, 1)),
 (4, (4, 2, 2)),
 (3, (4, 2, 3)),
 (1, (4, 2, 5)),
 (6, (4, 3, 1)),
 (5, (4, 3, 2)),
 (4, (4, 3, 3)),
 (2, (4, 3, 5)),
 (1, (4, 3, 6)),
 (7, (4, 4, 1)),
 (6, (4, 4, 2)),
 (5, (4, 4, 3)),
 (3, (4, 4, 5)),
 (2, (4, 4, 6)),
 (1, (4, 4, 7)),
 (8, (4, 5, 1)),
 (7, (4, 5, 2)),
 (6, (4, 5, 3)),
 (4, (4, 5, 5)),
 (3, (4, 5, 6)),
 (2, (4, 5, 7)),
 (1, (4, 5, 8)),
 (9, (4, 6, 1)),
 (8, (4, 6, 2)),
 (7, (4, 6, 3)),
 (5, (4, 6, 5)),
 (4, (4, 6, 6)),
 (3, (4, 6, 7)),
 (2, (4, 6, 8)),
 (1, (4, 6, 9)),
 (9, (4, 7, 2)),
 (8, (4, 7, 3)),
 (6, (4, 7, 5)),
 (5, (4, 7, 6)),
 (4, (4, 7, 7)),
 (3, (4, 7, 8)),
 (2, (4, 7, 9)),
 (9, (4, 8, 3)),
 (7, (4, 8, 5)),
 (6, (4, 8, 6)),
 (5, (4, 8, 7)),
 (4, (4, 8, 8)),
 (3, (4, 8, 9)),
 (8, (4, 9, 5)),
 (7, (4, 9, 6)),
 (6, (4, 9, 7)),
 (5, (4, 9, 8)),
 (4, (4, 9, 9)),
 (5, (5, 1, 1)),
 (4, (5, 1, 2)),
 (3, (5, 1, 3)),
 (2, (5, 1, 4)),
 (6, (5, 2, 1)),
 (5, (5, 2, 2)),
 (4, (5, 2, 3)),
 (3, (5, 2, 4)),
 (1, (5, 2, 6)),
 (7, (5, 3, 1)),
 (6, (5, 3, 2)),
 (5, (5, 3, 3)),
 (4, (5, 3, 4)),
 (2, (5, 3, 6)),
 (1, (5, 3, 7)),
 (8, (5, 4, 1)),
 (7, (5, 4, 2)),
 (6, (5, 4, 3)),
 (5, (5, 4, 4)),
 (3, (5, 4, 6)),
 (2, (5, 4, 7)),
 (1, (5, 4, 8)),
 (9, (5, 5, 1)),
 (8, (5, 5, 2)),
 (7, (5, 5, 3)),
 (6, (5, 5, 4)),
 (4, (5, 5, 6)),
 (3, (5, 5, 7)),
 (2, (5, 5, 8)),
 (1, (5, 5, 9)),
 (9, (5, 6, 2)),
 (8, (5, 6, 3)),
 (7, (5, 6, 4)),
 (5, (5, 6, 6)),
 (4, (5, 6, 7)),
 (3, (5, 6, 8)),
 (2, (5, 6, 9)),
 (9, (5, 7, 3)),
 (8, (5, 7, 4)),
 (6, (5, 7, 6)),
 (5, (5, 7, 7)),
 (4, (5, 7, 8)),
 (3, (5, 7, 9)),
 (9, (5, 8, 4)),
 (7, (5, 8, 6)),
 (6, (5, 8, 7)),
 (5, (5, 8, 8)),
 (4, (5, 8, 9)),
 (8, (5, 9, 6)),
 (7, (5, 9, 7)),
 (6, (5, 9, 8)),
 (5, (5, 9, 9)),
 (6, (6, 1, 1)),
 (5, (6, 1, 2)),
 (4, (6, 1, 3)),
 (3, (6, 1, 4)),
 (2, (6, 1, 5)),
 (7, (6, 2, 1)),
 (6, (6, 2, 2)),
 (5, (6, 2, 3)),
 (4, (6, 2, 4)),
 (3, (6, 2, 5)),
 (1, (6, 2, 7)),
 (8, (6, 3, 1)),
 (7, (6, 3, 2)),
 (6, (6, 3, 3)),
 (5, (6, 3, 4)),
 (4, (6, 3, 5)),
 (2, (6, 3, 7)),
 (1, (6, 3, 8)),
 (9, (6, 4, 1)),
 (8, (6, 4, 2)),
 (7, (6, 4, 3)),
 (6, (6, 4, 4)),
 (5, (6, 4, 5)),
 (3, (6, 4, 7)),
 (2, (6, 4, 8)),
 (1, (6, 4, 9)),
 (9, (6, 5, 2)),
 (8, (6, 5, 3)),
 (7, (6, 5, 4)),
 (6, (6, 5, 5)),
 (4, (6, 5, 7)),
 (3, (6, 5, 8)),
 (2, (6, 5, 9)),
 (9, (6, 6, 3)),
 (8, (6, 6, 4)),
 (7, (6, 6, 5)),
 (5, (6, 6, 7)),
 (4, (6, 6, 8)),
 (3, (6, 6, 9)),
 (9, (6, 7, 4)),
 (8, (6, 7, 5)),
 (6, (6, 7, 7)),
 (5, (6, 7, 8)),
 (4, (6, 7, 9)),
 (9, (6, 8, 5)),
 (7, (6, 8, 7)),
 (6, (6, 8, 8)),
 (5, (6, 8, 9)),
 (8, (6, 9, 7)),
 (7, (6, 9, 8)),
 (6, (6, 9, 9)),
 (7, (7, 1, 1)),
 (6, (7, 1, 2)),
 (5, (7, 1, 3)),
 (4, (7, 1, 4)),
 (3, (7, 1, 5)),
 (2, (7, 1, 6)),
 (8, (7, 2, 1)),
 (7, (7, 2, 2)),
 (6, (7, 2, 3)),
 (5, (7, 2, 4)),
 (4, (7, 2, 5)),
 (3, (7, 2, 6)),
 (1, (7, 2, 8)),
 (9, (7, 3, 1)),
 (8, (7, 3, 2)),
 (7, (7, 3, 3)),
 (6, (7, 3, 4)),
 (5, (7, 3, 5)),
 (4, (7, 3, 6)),
 (2, (7, 3, 8)),
 (1, (7, 3, 9)),
 (9, (7, 4, 2)),
 (8, (7, 4, 3)),
 (7, (7, 4, 4)),
 (6, (7, 4, 5)),
 (5, (7, 4, 6)),
 (3, (7, 4, 8)),
 (2, (7, 4, 9)),
 (9, (7, 5, 3)),
 (8, (7, 5, 4)),
 (7, (7, 5, 5)),
 (6, (7, 5, 6)),
 (4, (7, 5, 8)),
 (3, (7, 5, 9)),
 (9, (7, 6, 4)),
 (8, (7, 6, 5)),
 (7, (7, 6, 6)),
 (5, (7, 6, 8)),
 (4, (7, 6, 9)),
 (9, (7, 7, 5)),
 (8, (7, 7, 6)),
 (6, (7, 7, 8)),
 (5, (7, 7, 9)),
 (9, (7, 8, 6)),
 (7, (7, 8, 8)),
 (6, (7, 8, 9)),
 (8, (7, 9, 8)),
 (7, (7, 9, 9)),
 (8, (8, 1, 1)),
 (7, (8, 1, 2)),
 (6, (8, 1, 3)),
 (5, (8, 1, 4)),
 (4, (8, 1, 5)),
 (3, (8, 1, 6)),
 (2, (8, 1, 7)),
 (9, (8, 2, 1)),
 (8, (8, 2, 2)),
 (7, (8, 2, 3)),
 (6, (8, 2, 4)),
 (5, (8, 2, 5)),
 (4, (8, 2, 6)),
 (3, (8, 2, 7)),
 (1, (8, 2, 9)),
 (9, (8, 3, 2)),
 (8, (8, 3, 3)),
 (7, (8, 3, 4)),
 (6, (8, 3, 5)),
 (5, (8, 3, 6)),
 (4, (8, 3, 7)),
 (2, (8, 3, 9)),
 (9, (8, 4, 3)),
 (8, (8, 4, 4)),
 (7, (8, 4, 5)),
 (6, (8, 4, 6)),
 (5, (8, 4, 7)),
 (3, (8, 4, 9)),
 (9, (8, 5, 4)),
 (8, (8, 5, 5)),
 (7, (8, 5, 6)),
 (6, (8, 5, 7)),
 (4, (8, 5, 9)),
 (9, (8, 6, 5)),
 (8, (8, 6, 6)),
 (7, (8, 6, 7)),
 (5, (8, 6, 9)),
 (9, (8, 7, 6)),
 (8, (8, 7, 7)),
 (6, (8, 7, 9)),
 (9, (8, 8, 7)),
 (7, (8, 8, 9)),
 (8, (8, 9, 9)),
 (9, (9, 1, 1)),
 (8, (9, 1, 2)),
 (7, (9, 1, 3)),
 (6, (9, 1, 4)),
 (5, (9, 1, 5)),
 (4, (9, 1, 6)),
 (3, (9, 1, 7)),
 (2, (9, 1, 8)),
 (9, (9, 2, 2)),
 (8, (9, 2, 3)),
 (7, (9, 2, 4)),
 (6, (9, 2, 5)),
 (5, (9, 2, 6)),
 (4, (9, 2, 7)),
 (3, (9, 2, 8)),
 (9, (9, 3, 3)),
 (8, (9, 3, 4)),
 (7, (9, 3, 5)),
 (6, (9, 3, 6)),
 (5, (9, 3, 7)),
 (4, (9, 3, 8)),
 (9, (9, 4, 4)),
 (8, (9, 4, 5)),
 (7, (9, 4, 6)),
 (6, (9, 4, 7)),
 (5, (9, 4, 8)),
 (9, (9, 5, 5)),
 (8, (9, 5, 6)),
 (7, (9, 5, 7)),
 (6, (9, 5, 8)),
 (9, (9, 6, 6)),
 (8, (9, 6, 7)),
 (7, (9, 6, 8)),
 (9, (9, 7, 7)),
 (8, (9, 7, 8)),
 (9, (9, 8, 8))]
i: 1
shape (20,)
i: 2
shape (20,)
i: 3
shape (20,)
i: 4
shape (20,)
i: 5
shape (20,)
i: 6
shape (20,)
i: 7
shape (20,)
i: 8
shape (20,)
i: 9
shape (20,)
mean_all: [None, array([-0.2772004 ,  0.03245274,  0.3182044 ,  0.34783593, -0.08127427,
       -0.06140204,  0.36474642, -0.14055543, -0.03012975, -0.01945593,
        2.2175689 , -0.24725424,  1.2993643 , -0.12781866,  0.01854473,
       -0.30996183,  0.00466786, -0.20264733, -0.9232168 ,  0.03127834],
      dtype=float32), array([-0.14669724,  0.00824568,  0.73573935,  0.88237846, -0.09626056,
       -0.05703942,  1.177822  , -0.00510627,  0.01197941,  0.02332134,
        0.13468783, -0.9754822 ,  0.00602335, -0.05663562, -0.04904537,
        0.73063874, -0.03059186, -0.12824404,  1.3875049 , -0.01137854],
      dtype=float32), array([-0.24667552,  0.05200683, -0.0395325 ,  0.6667932 , -0.18593302,
       -0.12990706,  0.37571388, -0.14984296,  0.02872261,  0.01171656,
        0.2237541 , -1.4426342 , -0.12496243, -0.18498352, -0.05703324,
       -0.7367088 , -0.06914367, -0.31385913, -0.04157585,  0.01923486],
      dtype=float32), array([-0.10807905, -0.02689151,  0.25385725, -0.63676214, -0.1931262 ,
       -0.03645644,  0.3079308 , -0.08067881,  0.09806482,  0.05485687,
       -0.5823385 ,  0.9156187 , -0.55277187, -0.13154756, -0.05178118,
       -0.8172357 , -0.09709962, -0.10715669,  0.06988215, -0.0698832 ],
      dtype=float32), array([-2.3055379e-01,  5.8500551e-02, -4.3461391e-01, -3.6427308e-02,
       -8.9209042e-02, -5.9123095e-02, -3.2253438e-01, -2.0221488e-01,
       -1.3545844e-03,  9.1574840e-02,  4.0985227e-02, -3.5333821e-01,
       -7.5357670e-01, -1.5267225e-01, -8.8159911e-02, -1.7663342e+00,
       -8.0101013e-02, -2.6577401e-01,  1.0065838e-01,  1.3592373e-01],
      dtype=float32), array([-0.15448539,  0.03408058, -0.32620862,  1.3597628 , -0.07239545,
       -0.01058264,  0.132765  , -0.13785243, -0.04581372,  0.10548957,
       -0.791217  ,  0.18763202, -1.2349622 , -0.12409179, -0.07059184,
       -0.26249602, -0.07806636, -0.0856964 , -0.14812864,  0.1826251 ],
      dtype=float32), array([-0.11436305,  0.06815506,  0.7326456 , -1.6494    , -0.10697331,
       -0.02498884, -0.86330307, -0.05879317,  0.07473193,  0.0440962 ,
       -0.30356342,  0.8811472 ,  0.395213  , -0.12106356, -0.05670316,
        0.35034114, -0.01427684, -0.12270225,  0.07447772,  0.0256084 ],
      dtype=float32), array([-0.2938182 , -0.03905385, -1.4553137 , -0.32862803,  0.06399352,
       -0.02803006, -0.25658187,  0.05556835, -0.04287599,  0.20302176,
        0.15402724, -0.45385715, -0.43774348, -0.10122172,  0.0559332 ,
        0.92179966, -0.09284995, -0.08614761,  0.12388211,  0.33920488],
      dtype=float32), array([-0.12258917,  0.02874063, -1.1681635 , -0.9073973 ,  0.02899916,
       -0.01685587, -0.96082526,  0.14599378, -0.08225488,  0.05756109,
       -0.5943044 ,  1.1689496 , -0.12157718, -0.12818918,  0.03474854,
        1.2360767 , -0.09005439, -0.00784099, -0.33731157,  0.22395788],
      dtype=float32)]
---
Target calculation: 1+1-1
pred: tensor([5, 7, 1, 1, 7, 7, 7, 7, 7, 1, 5, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1,
        7, 1, 7, 7, 7, 5, 1, 7, 1, 7, 7, 7, 1, 1, 7, 1, 7, 1, 7, 5, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 5, 1, 7, 7, 7, 1]) 
tar: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
Accuracy (count): tensor(15) 
Accuracy (ratio) tensor(0.2344)
Accuracy:
 [[15  0  0  0  5  0 44  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[0.234 0.    0.    0.    0.078 0.    0.688 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.3  0.0  0.3  0.3 -0.1 -0.1  0.4 -0.1 -0.0 -0.0  2.2 -0.2  1.3 -0.1  0.0 -0.3  0.0 -0.2 -0.9  0.0 
-0.1  0.0  0.7  0.9 -0.1 -0.1  1.2 -0.0  0.0  0.0  0.1 -1.0  0.0 -0.1 -0.0  0.7 -0.0 -0.1  1.4 -0.0 
-0.2  0.1 -0.0  0.7 -0.2 -0.1  0.4 -0.1  0.0  0.0  0.2 -1.4 -0.1 -0.2 -0.1 -0.7 -0.1 -0.3 -0.0  0.0 
-0.1 -0.0  0.3 -0.6 -0.2 -0.0  0.3 -0.1  0.1  0.1 -0.6  0.9 -0.6 -0.1 -0.1 -0.8 -0.1 -0.1  0.1 -0.1 
-0.2  0.1 -0.4 -0.0 -0.1 -0.1 -0.3 -0.2 -0.0  0.1  0.0 -0.4 -0.8 -0.2 -0.1 -1.8 -0.1 -0.3  0.1  0.1 
-0.2  0.0 -0.3  1.4 -0.1 -0.0  0.1 -0.1 -0.0  0.1 -0.8  0.2 -1.2 -0.1 -0.1 -0.3 -0.1 -0.1 -0.1  0.2 
-0.1  0.1  0.7 -1.6 -0.1 -0.0 -0.9 -0.1  0.1  0.0 -0.3  0.9  0.4 -0.1 -0.1  0.4 -0.0 -0.1  0.1  0.0 
-0.3 -0.0 -1.5 -0.3  0.1 -0.0 -0.3  0.1 -0.0  0.2  0.2 -0.5 -0.4 -0.1  0.1  0.9 -0.1 -0.1  0.1  0.3 
-0.1  0.0 -1.2 -0.9  0.0 -0.0 -1.0  0.1 -0.1  0.1 -0.6  1.2 -0.1 -0.1  0.0  1.2 -0.1 -0.0 -0.3  0.2 
Minimum distance of calculation. 
true answer: 1 
indices: 1 
distance: 0.0
---
Target calculation: 1+9-8
pred: tensor([1, 7, 2, 6, 7, 1, 7, 7, 7, 7, 2, 7, 7, 7, 7, 7, 7, 7, 2, 1, 7, 1, 7, 7,
        1, 7, 1, 7, 7, 6, 7, 7, 1, 1, 1, 7, 5, 7, 1, 7, 1, 7, 7, 6, 7, 7, 7, 1,
        7, 1, 1, 7, 7, 7, 1, 1, 6, 7, 7, 1, 7, 7, 7, 7]) 
tar: tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
Accuracy (count): tensor(3) 
Accuracy (ratio) tensor(0.0469)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [17  3  0  0  1  4 39  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.266 0.047 0.    0.    0.016 0.062 0.609 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.3  0.0  0.3  0.3 -0.1 -0.1  0.4 -0.1 -0.0 -0.0  2.2 -0.2  1.3 -0.1  0.0 -0.3  0.0 -0.2 -0.9  0.0 
-0.1  0.0  0.7  0.9 -0.1 -0.1  1.2 -0.0  0.0  0.0  0.1 -1.0  0.0 -0.1 -0.0  0.7 -0.0 -0.1  1.4 -0.0 
-0.2  0.1 -0.0  0.7 -0.2 -0.1  0.4 -0.1  0.0  0.0  0.2 -1.4 -0.1 -0.2 -0.1 -0.7 -0.1 -0.3 -0.0  0.0 
-0.1 -0.0  0.3 -0.6 -0.2 -0.0  0.3 -0.1  0.1  0.1 -0.6  0.9 -0.6 -0.1 -0.1 -0.8 -0.1 -0.1  0.1 -0.1 
-0.2  0.1 -0.4 -0.0 -0.1 -0.1 -0.3 -0.2 -0.0  0.1  0.0 -0.4 -0.8 -0.2 -0.1 -1.8 -0.1 -0.3  0.1  0.1 
-0.2  0.0 -0.3  1.4 -0.1 -0.0  0.1 -0.1 -0.0  0.1 -0.8  0.2 -1.2 -0.1 -0.1 -0.3 -0.1 -0.1 -0.1  0.2 
-0.1  0.1  0.7 -1.6 -0.1 -0.0 -0.9 -0.1  0.1  0.0 -0.3  0.9  0.4 -0.1 -0.1  0.4 -0.0 -0.1  0.1  0.0 
-0.3 -0.0 -1.5 -0.3  0.1 -0.0 -0.3  0.1 -0.0  0.2  0.2 -0.5 -0.4 -0.1  0.1  0.9 -0.1 -0.1  0.1  0.3 
-0.1  0.0 -1.2 -0.9  0.0 -0.0 -1.0  0.1 -0.1  0.1 -0.6  1.2 -0.1 -0.1  0.0  1.2 -0.1 -0.0 -0.3  0.2 
Minimum distance of calculation. 
true answer: 2 
indices: 1 
distance: 2.1459427
---
Target calculation: 1+8-4
pred: tensor([5, 7, 1, 1, 7, 7, 1, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 1, 7, 1,
        7, 7, 1, 1, 1, 1, 1, 7, 7, 7, 1, 7, 1, 7, 1, 1, 7, 1, 1, 1, 1, 7, 1, 7,
        7, 5, 7, 1, 7, 1, 7, 7, 7, 7, 1, 1, 1, 7, 7, 7]) 
tar: tensor([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])
Accuracy (count): tensor(2) 
Accuracy (ratio) tensor(0.0312)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [27  0  0  0  2  0 35  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.422 0.    0.    0.    0.031 0.    0.547 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.3  0.0  0.3  0.3 -0.1 -0.1  0.4 -0.1 -0.0 -0.0  2.2 -0.2  1.3 -0.1  0.0 -0.3  0.0 -0.2 -0.9  0.0 
-0.1  0.0  0.7  0.9 -0.1 -0.1  1.2 -0.0  0.0  0.0  0.1 -1.0  0.0 -0.1 -0.0  0.7 -0.0 -0.1  1.4 -0.0 
-0.2  0.1 -0.0  0.7 -0.2 -0.1  0.4 -0.1  0.0  0.0  0.2 -1.4 -0.1 -0.2 -0.1 -0.7 -0.1 -0.3 -0.0  0.0 
-0.1 -0.0  0.3 -0.6 -0.2 -0.0  0.3 -0.1  0.1  0.1 -0.6  0.9 -0.6 -0.1 -0.1 -0.8 -0.1 -0.1  0.1 -0.1 
-0.2  0.1 -0.4 -0.0 -0.1 -0.1 -0.3 -0.2 -0.0  0.1  0.0 -0.4 -0.8 -0.2 -0.1 -1.8 -0.1 -0.3  0.1  0.1 
-0.2  0.0 -0.3  1.4 -0.1 -0.0  0.1 -0.1 -0.0  0.1 -0.8  0.2 -1.2 -0.1 -0.1 -0.3 -0.1 -0.1 -0.1  0.2 
-0.1  0.1  0.7 -1.6 -0.1 -0.0 -0.9 -0.1  0.1  0.0 -0.3  0.9  0.4 -0.1 -0.1  0.4 -0.0 -0.1  0.1  0.0 
-0.3 -0.0 -1.5 -0.3  0.1 -0.0 -0.3  0.1 -0.0  0.2  0.2 -0.5 -0.4 -0.1  0.1  0.9 -0.1 -0.1  0.1  0.3 
-0.1  0.0 -1.2 -0.9  0.0 -0.0 -1.0  0.1 -0.1  0.1 -0.6  1.2 -0.1 -0.1  0.0  1.2 -0.1 -0.0 -0.3  0.2 
Minimum distance of calculation. 
true answer: 5 
indices: 1 
distance: 3.022337
---
Target calculation: 2+7-1
pred: tensor([7, 7, 1, 1, 1, 1, 7, 1, 7, 7, 1, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 5, 7, 7,
        1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 7, 1, 7, 7,
        1, 7, 7, 7, 7, 7, 7, 1, 1, 7, 7, 1, 7, 7, 7, 1]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [17  0  0  0  1  0 46  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.266 0.    0.    0.    0.016 0.    0.719 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.3  0.0  0.3  0.3 -0.1 -0.1  0.4 -0.1 -0.0 -0.0  2.2 -0.2  1.3 -0.1  0.0 -0.3  0.0 -0.2 -0.9  0.0 
-0.1  0.0  0.7  0.9 -0.1 -0.1  1.2 -0.0  0.0  0.0  0.1 -1.0  0.0 -0.1 -0.0  0.7 -0.0 -0.1  1.4 -0.0 
-0.2  0.1 -0.0  0.7 -0.2 -0.1  0.4 -0.1  0.0  0.0  0.2 -1.4 -0.1 -0.2 -0.1 -0.7 -0.1 -0.3 -0.0  0.0 
-0.1 -0.0  0.3 -0.6 -0.2 -0.0  0.3 -0.1  0.1  0.1 -0.6  0.9 -0.6 -0.1 -0.1 -0.8 -0.1 -0.1  0.1 -0.1 
-0.2  0.1 -0.4 -0.0 -0.1 -0.1 -0.3 -0.2 -0.0  0.1  0.0 -0.4 -0.8 -0.2 -0.1 -1.8 -0.1 -0.3  0.1  0.1 
-0.2  0.0 -0.3  1.4 -0.1 -0.0  0.1 -0.1 -0.0  0.1 -0.8  0.2 -1.2 -0.1 -0.1 -0.3 -0.1 -0.1 -0.1  0.2 
-0.1  0.1  0.7 -1.6 -0.1 -0.0 -0.9 -0.1  0.1  0.0 -0.3  0.9  0.4 -0.1 -0.1  0.4 -0.0 -0.1  0.1  0.0 
-0.3 -0.0 -1.5 -0.3  0.1 -0.0 -0.3  0.1 -0.0  0.2  0.2 -0.5 -0.4 -0.1  0.1  0.9 -0.1 -0.1  0.1  0.3 
-0.1  0.0 -1.2 -0.9  0.0 -0.0 -1.0  0.1 -0.1  0.1 -0.6  1.2 -0.1 -0.1  0.0  1.2 -0.1 -0.0 -0.3  0.2 
Minimum distance of calculation. 
true answer: 8 
indices: 7 
distance: 3.7607093
---
Target calculation: 2+7-2
pred: tensor([7, 7, 1, 7, 1, 7, 7, 7, 7, 1, 6, 7, 1, 7, 1, 7, 7, 1, 7, 1, 7, 1, 7, 1,
        1, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 5, 1, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 1,
        7, 7, 7, 7, 7, 1, 1, 7, 7, 1, 7, 1, 1, 5, 1, 7]) 
tar: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])
Accuracy (count): tensor(41) 
Accuracy (ratio) tensor(0.6406)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [20  0  0  0  2  1 41  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.312 0.    0.    0.    0.031 0.016 0.641 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.3  0.0  0.3  0.3 -0.1 -0.1  0.4 -0.1 -0.0 -0.0  2.2 -0.2  1.3 -0.1  0.0 -0.3  0.0 -0.2 -0.9  0.0 
-0.1  0.0  0.7  0.9 -0.1 -0.1  1.2 -0.0  0.0  0.0  0.1 -1.0  0.0 -0.1 -0.0  0.7 -0.0 -0.1  1.4 -0.0 
-0.2  0.1 -0.0  0.7 -0.2 -0.1  0.4 -0.1  0.0  0.0  0.2 -1.4 -0.1 -0.2 -0.1 -0.7 -0.1 -0.3 -0.0  0.0 
-0.1 -0.0  0.3 -0.6 -0.2 -0.0  0.3 -0.1  0.1  0.1 -0.6  0.9 -0.6 -0.1 -0.1 -0.8 -0.1 -0.1  0.1 -0.1 
-0.2  0.1 -0.4 -0.0 -0.1 -0.1 -0.3 -0.2 -0.0  0.1  0.0 -0.4 -0.8 -0.2 -0.1 -1.8 -0.1 -0.3  0.1  0.1 
-0.2  0.0 -0.3  1.4 -0.1 -0.0  0.1 -0.1 -0.0  0.1 -0.8  0.2 -1.2 -0.1 -0.1 -0.3 -0.1 -0.1 -0.1  0.2 
-0.1  0.1  0.7 -1.6 -0.1 -0.0 -0.9 -0.1  0.1  0.0 -0.3  0.9  0.4 -0.1 -0.1  0.4 -0.0 -0.1  0.1  0.0 
-0.3 -0.0 -1.5 -0.3  0.1 -0.0 -0.3  0.1 -0.0  0.2  0.2 -0.5 -0.4 -0.1  0.1  0.9 -0.1 -0.1  0.1  0.3 
-0.1  0.0 -1.2 -0.9  0.0 -0.0 -1.0  0.1 -0.1  0.1 -0.6  1.2 -0.1 -0.1  0.0  1.2 -0.1 -0.0 -0.3  0.2 
Minimum distance of calculation. 
true answer: 7 
indices: 7 
distance: 1.0018538e-07
---
Target calculation: 3+3-3
pred: tensor([7, 7, 7, 1, 7, 1, 7, 1, 1, 7, 7, 7, 2, 7, 7, 7, 7, 1, 1, 7, 1, 1, 1, 7,
        1, 1, 1, 7, 1, 7, 1, 1, 1, 1, 1, 7, 1, 1, 1, 7, 1, 7, 7, 7, 1, 1, 7, 1,
        1, 7, 7, 1, 1, 1, 1, 7, 7, 7, 7, 1, 7, 1, 1, 7]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [33  1  0  0  0  0 30  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.516 0.016 0.    0.    0.    0.    0.469 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.3  0.0  0.3  0.3 -0.1 -0.1  0.4 -0.1 -0.0 -0.0  2.2 -0.2  1.3 -0.1  0.0 -0.3  0.0 -0.2 -0.9  0.0 
-0.1  0.0  0.7  0.9 -0.1 -0.1  1.2 -0.0  0.0  0.0  0.1 -1.0  0.0 -0.1 -0.0  0.7 -0.0 -0.1  1.4 -0.0 
-0.2  0.1 -0.0  0.7 -0.2 -0.1  0.4 -0.1  0.0  0.0  0.2 -1.4 -0.1 -0.2 -0.1 -0.7 -0.1 -0.3 -0.0  0.0 
-0.1 -0.0  0.3 -0.6 -0.2 -0.0  0.3 -0.1  0.1  0.1 -0.6  0.9 -0.6 -0.1 -0.1 -0.8 -0.1 -0.1  0.1 -0.1 
-0.2  0.1 -0.4 -0.0 -0.1 -0.1 -0.3 -0.2 -0.0  0.1  0.0 -0.4 -0.8 -0.2 -0.1 -1.8 -0.1 -0.3  0.1  0.1 
-0.2  0.0 -0.3  1.4 -0.1 -0.0  0.1 -0.1 -0.0  0.1 -0.8  0.2 -1.2 -0.1 -0.1 -0.3 -0.1 -0.1 -0.1  0.2 
-0.1  0.1  0.7 -1.6 -0.1 -0.0 -0.9 -0.1  0.1  0.0 -0.3  0.9  0.4 -0.1 -0.1  0.4 -0.0 -0.1  0.1  0.0 
-0.3 -0.0 -1.5 -0.3  0.1 -0.0 -0.3  0.1 -0.0  0.2  0.2 -0.5 -0.4 -0.1  0.1  0.9 -0.1 -0.1  0.1  0.3 
-0.1  0.0 -1.2 -0.9  0.0 -0.0 -1.0  0.1 -0.1  0.1 -0.6  1.2 -0.1 -0.1  0.0  1.2 -0.1 -0.0 -0.3  0.2 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 0.0
---
Target calculation: 3+5-2
pred: tensor([1, 1, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 7, 7, 7, 7, 1,
        1, 1, 1, 7, 1, 7, 7, 1, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 1, 1, 7, 7, 7,
        7, 1, 7, 7, 1, 7, 1, 7, 7, 1, 1, 7, 7, 1, 7, 7]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [22  0  0  0  0  0 42  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.344 0.    0.    0.    0.    0.    0.656 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.3  0.0  0.3  0.3 -0.1 -0.1  0.4 -0.1 -0.0 -0.0  2.2 -0.2  1.3 -0.1  0.0 -0.3  0.0 -0.2 -0.9  0.0 
-0.1  0.0  0.7  0.9 -0.1 -0.1  1.2 -0.0  0.0  0.0  0.1 -1.0  0.0 -0.1 -0.0  0.7 -0.0 -0.1  1.4 -0.0 
-0.2  0.1 -0.0  0.7 -0.2 -0.1  0.4 -0.1  0.0  0.0  0.2 -1.4 -0.1 -0.2 -0.1 -0.7 -0.1 -0.3 -0.0  0.0 
-0.1 -0.0  0.3 -0.6 -0.2 -0.0  0.3 -0.1  0.1  0.1 -0.6  0.9 -0.6 -0.1 -0.1 -0.8 -0.1 -0.1  0.1 -0.1 
-0.2  0.1 -0.4 -0.0 -0.1 -0.1 -0.3 -0.2 -0.0  0.1  0.0 -0.4 -0.8 -0.2 -0.1 -1.8 -0.1 -0.3  0.1  0.1 
-0.2  0.0 -0.3  1.4 -0.1 -0.0  0.1 -0.1 -0.0  0.1 -0.8  0.2 -1.2 -0.1 -0.1 -0.3 -0.1 -0.1 -0.1  0.2 
-0.1  0.1  0.7 -1.6 -0.1 -0.0 -0.9 -0.1  0.1  0.0 -0.3  0.9  0.4 -0.1 -0.1  0.4 -0.0 -0.1  0.1  0.0 
-0.3 -0.0 -1.5 -0.3  0.1 -0.0 -0.3  0.1 -0.0  0.2  0.2 -0.5 -0.4 -0.1  0.1  0.9 -0.1 -0.1  0.1  0.3 
-0.1  0.0 -1.2 -0.9  0.0 -0.0 -1.0  0.1 -0.1  0.1 -0.6  1.2 -0.1 -0.1  0.0  1.2 -0.1 -0.0 -0.3  0.2 
Minimum distance of calculation. 
true answer: 6 
indices: 5 
distance: 2.414465
---
Target calculation: 3+6-3
pred: tensor([1, 7, 1, 1, 1, 7, 7, 1, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 1, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 1, 1, 7, 7, 1, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 1, 7, 1, 7, 1, 7, 7, 7, 1]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [16  0  0  0  0  0 48  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[ nan  nan  nan  nan  nan  nan  nan  nan  nan]
 [ nan  nan  nan  nan  nan  nan  nan  nan  nan]
 [ nan  nan  nan  nan  nan  nan  nan  nan  nan]
 [ nan  nan  nan  nan  nan  nan  nan  nan  nan]
 [ nan  nan  nan  nan  nan  nan  nan  nan  nan]
 [0.25 0.   0.   0.   0.   0.   0.75 0.   0.  ]
 [ nan  nan  nan  nan  nan  nan  nan  nan  nan]
 [ nan  nan  nan  nan  nan  nan  nan  nan  nan]
 [ nan  nan  nan  nan  nan  nan  nan  nan  nan]]
-0.3  0.0  0.3  0.3 -0.1 -0.1  0.4 -0.1 -0.0 -0.0  2.2 -0.2  1.3 -0.1  0.0 -0.3  0.0 -0.2 -0.9  0.0 
-0.1  0.0  0.7  0.9 -0.1 -0.1  1.2 -0.0  0.0  0.0  0.1 -1.0  0.0 -0.1 -0.0  0.7 -0.0 -0.1  1.4 -0.0 
-0.2  0.1 -0.0  0.7 -0.2 -0.1  0.4 -0.1  0.0  0.0  0.2 -1.4 -0.1 -0.2 -0.1 -0.7 -0.1 -0.3 -0.0  0.0 
-0.1 -0.0  0.3 -0.6 -0.2 -0.0  0.3 -0.1  0.1  0.1 -0.6  0.9 -0.6 -0.1 -0.1 -0.8 -0.1 -0.1  0.1 -0.1 
-0.2  0.1 -0.4 -0.0 -0.1 -0.1 -0.3 -0.2 -0.0  0.1  0.0 -0.4 -0.8 -0.2 -0.1 -1.8 -0.1 -0.3  0.1  0.1 
-0.2  0.0 -0.3  1.4 -0.1 -0.0  0.1 -0.1 -0.0  0.1 -0.8  0.2 -1.2 -0.1 -0.1 -0.3 -0.1 -0.1 -0.1  0.2 
-0.1  0.1  0.7 -1.6 -0.1 -0.0 -0.9 -0.1  0.1  0.0 -0.3  0.9  0.4 -0.1 -0.1  0.4 -0.0 -0.1  0.1  0.0 
-0.3 -0.0 -1.5 -0.3  0.1 -0.0 -0.3  0.1 -0.0  0.2  0.2 -0.5 -0.4 -0.1  0.1  0.9 -0.1 -0.1  0.1  0.3 
-0.1  0.0 -1.2 -0.9  0.0 -0.0 -1.0  0.1 -0.1  0.1 -0.6  1.2 -0.1 -0.1  0.0  1.2 -0.1 -0.0 -0.3  0.2 
Minimum distance of calculation. 
true answer: 6 
indices: 6 
distance: 7.233206e-08
---
Target calculation: 5+3-5
pred: tensor([1, 7, 1, 1, 7, 1, 1, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 1, 1, 1, 7, 1, 7,
        1, 1, 1, 7, 1, 7, 1, 7, 1, 1, 1, 7, 7, 1, 7, 1, 7, 7, 7, 1, 1, 7, 1, 1,
        7, 1, 1, 1, 7, 1, 7, 7, 7, 7, 1, 1, 1, 1, 7, 1]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [33  0  0  0  0  0 31  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.516 0.    0.    0.    0.    0.    0.484 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.3  0.0  0.3  0.3 -0.1 -0.1  0.4 -0.1 -0.0 -0.0  2.2 -0.2  1.3 -0.1  0.0 -0.3  0.0 -0.2 -0.9  0.0 
-0.1  0.0  0.7  0.9 -0.1 -0.1  1.2 -0.0  0.0  0.0  0.1 -1.0  0.0 -0.1 -0.0  0.7 -0.0 -0.1  1.4 -0.0 
-0.2  0.1 -0.0  0.7 -0.2 -0.1  0.4 -0.1  0.0  0.0  0.2 -1.4 -0.1 -0.2 -0.1 -0.7 -0.1 -0.3 -0.0  0.0 
-0.1 -0.0  0.3 -0.6 -0.2 -0.0  0.3 -0.1  0.1  0.1 -0.6  0.9 -0.6 -0.1 -0.1 -0.8 -0.1 -0.1  0.1 -0.1 
-0.2  0.1 -0.4 -0.0 -0.1 -0.1 -0.3 -0.2 -0.0  0.1  0.0 -0.4 -0.8 -0.2 -0.1 -1.8 -0.1 -0.3  0.1  0.1 
-0.2  0.0 -0.3  1.4 -0.1 -0.0  0.1 -0.1 -0.0  0.1 -0.8  0.2 -1.2 -0.1 -0.1 -0.3 -0.1 -0.1 -0.1  0.2 
-0.1  0.1  0.7 -1.6 -0.1 -0.0 -0.9 -0.1  0.1  0.0 -0.3  0.9  0.4 -0.1 -0.1  0.4 -0.0 -0.1  0.1  0.0 
-0.3 -0.0 -1.5 -0.3  0.1 -0.0 -0.3  0.1 -0.0  0.2  0.2 -0.5 -0.4 -0.1  0.1  0.9 -0.1 -0.1  0.1  0.3 
-0.1  0.0 -1.2 -0.9  0.0 -0.0 -1.0  0.1 -0.1  0.1 -0.6  1.2 -0.1 -0.1  0.0  1.2 -0.1 -0.0 -0.3  0.2 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 7.388036e-08
---
Target calculation: 9+7-8
pred: tensor([1, 1, 7, 1, 7, 7, 7, 1, 1, 7, 7, 7, 5, 7, 7, 1, 7, 1, 1, 1, 1, 1, 1, 7,
        1, 1, 1, 1, 7, 7, 1, 1, 7, 1, 1, 7, 7, 1, 1, 1, 1, 1, 7, 7, 7, 1, 7, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [42  0  0  0  1  0 21  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.656 0.    0.    0.    0.016 0.    0.328 0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.3  0.0  0.3  0.3 -0.1 -0.1  0.4 -0.1 -0.0 -0.0  2.2 -0.2  1.3 -0.1  0.0 -0.3  0.0 -0.2 -0.9  0.0 
-0.1  0.0  0.7  0.9 -0.1 -0.1  1.2 -0.0  0.0  0.0  0.1 -1.0  0.0 -0.1 -0.0  0.7 -0.0 -0.1  1.4 -0.0 
-0.2  0.1 -0.0  0.7 -0.2 -0.1  0.4 -0.1  0.0  0.0  0.2 -1.4 -0.1 -0.2 -0.1 -0.7 -0.1 -0.3 -0.0  0.0 
-0.1 -0.0  0.3 -0.6 -0.2 -0.0  0.3 -0.1  0.1  0.1 -0.6  0.9 -0.6 -0.1 -0.1 -0.8 -0.1 -0.1  0.1 -0.1 
-0.2  0.1 -0.4 -0.0 -0.1 -0.1 -0.3 -0.2 -0.0  0.1  0.0 -0.4 -0.8 -0.2 -0.1 -1.8 -0.1 -0.3  0.1  0.1 
-0.2  0.0 -0.3  1.4 -0.1 -0.0  0.1 -0.1 -0.0  0.1 -0.8  0.2 -1.2 -0.1 -0.1 -0.3 -0.1 -0.1 -0.1  0.2 
-0.1  0.1  0.7 -1.6 -0.1 -0.0 -0.9 -0.1  0.1  0.0 -0.3  0.9  0.4 -0.1 -0.1  0.4 -0.0 -0.1  0.1  0.0 
-0.3 -0.0 -1.5 -0.3  0.1 -0.0 -0.3  0.1 -0.0  0.2  0.2 -0.5 -0.4 -0.1  0.1  0.9 -0.1 -0.1  0.1  0.3 
-0.1  0.0 -1.2 -0.9  0.0 -0.0 -1.0  0.1 -0.1  0.1 -0.6  1.2 -0.1 -0.1  0.0  1.2 -0.1 -0.0 -0.3  0.2 
Minimum distance of calculation. 
true answer: 8 
indices: 7 
distance: 2.1459424
---
pred: tensor([7, 1, 7, 7, 1, 7, 7, 7, 1, 7, 1, 7, 1, 7, 7, 1, 1, 7, 7, 1, 1, 1, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 1, 7, 7, 1, 7, 7, 1, 7, 7, 7,
        7, 1, 7, 7, 7, 1, 7, 1, 7, 7, 1, 1, 1, 1, 1, 7, 7, 7, 7, 1, 7, 1, 7, 1,
        7, 7, 7, 7, 1, 7, 1, 7, 7, 1, 1, 1, 1, 7, 1, 1, 7, 7, 1, 1, 7, 7, 1, 1,
        1, 1, 1, 1, 7, 7, 1, 1, 1, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7,
        1, 1, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 7, 1,
        7, 7, 1, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 7, 7,
        7, 7, 7, 1, 7, 1, 1, 7, 7, 7, 7, 2, 7, 1, 7, 7, 1, 7, 1, 7, 7, 7, 7, 7,
        1, 7, 1, 7, 7, 7, 1, 1, 7, 7, 7, 1, 7, 1, 1, 7, 7, 7, 7, 7, 1, 7, 7, 7,
        1, 7, 1, 7, 1, 7, 7, 1, 7, 1, 7, 7, 7, 1, 1, 1, 7, 1, 7, 7, 7, 1, 7, 7,
        1, 7, 1, 7, 1, 7, 1, 1, 1, 7, 7, 1, 7, 1, 7, 1, 7, 7, 7, 7, 1, 7, 7, 1,
        7, 7, 7, 7, 7, 7, 5, 7, 1, 7, 1, 7, 7, 1, 7, 7, 7, 1, 1, 5, 7, 7, 1, 7,
        7, 1, 7, 1, 7, 7, 7, 1, 7, 7, 1, 7, 7, 1, 1, 1, 7, 1, 1, 1, 7, 7, 1, 7,
        7, 7, 7, 1, 7, 1, 1, 1, 1, 1, 7, 7, 2, 1, 7, 7, 1, 7, 1, 1, 7, 7, 7, 1,
        7, 1, 7, 1, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 7, 7, 7, 7, 1, 1, 1, 1,
        1, 1, 7, 5, 1, 1, 1, 7, 1, 1, 1, 7, 1, 7, 1, 7, 1, 1, 1, 1, 7, 7, 7, 1,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 1, 7, 1, 1, 1, 7, 7, 7, 7, 7, 7, 1, 1]) 
tar: tensor([1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 7, 6, 5,
        4, 3, 2, 1, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1, 4, 2, 1, 5, 3, 2, 1, 6, 4,
        3, 2, 1, 7, 5, 4, 3, 2, 1, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3, 2, 1,
        8, 7, 6, 5, 4, 3, 2, 3, 2, 4, 3, 1, 5, 4, 2, 1, 6, 5, 3, 2, 1, 7, 6, 4,
        3, 2, 1, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3,
        2, 8, 7, 6, 5, 4, 3, 4, 3, 2, 5, 4, 3, 1, 6, 5, 4, 2, 1, 7, 6, 5, 3, 2,
        1, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 9,
        7, 6, 5, 4, 3, 8, 7, 6, 5, 4, 5, 4, 3, 2, 6, 5, 4, 3, 1, 7, 6, 5, 4, 2,
        1, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 9,
        8, 6, 5, 4, 3, 9, 7, 6, 5, 4, 8, 7, 6, 5, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3,
        1, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 9,
        8, 7, 5, 4, 3, 9, 8, 6, 5, 4, 9, 7, 6, 5, 8, 7, 6, 7, 6, 5, 4, 3, 2, 8,
        7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 9, 8, 7,
        6, 4, 3, 9, 8, 7, 5, 4, 9, 8, 6, 5, 9, 7, 6, 8, 7, 8, 7, 6, 5, 4, 3, 2,
        9, 8, 7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 9, 8, 7, 6, 5, 3, 9, 8, 7,
        6, 4, 9, 8, 7, 5, 9, 8, 6, 9, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 9, 8, 7, 6,
        5, 4, 3, 9, 8, 7, 6, 5, 4, 9, 8, 7, 6, 5, 9, 8, 7, 6, 9, 8, 7, 9, 8, 9])
Accuracy (count): tensor(48) 
Accuracy (ratio) tensor(0.1176)
Accuracy:
 [[16  0  0  0  0  0 20  0  0]
 [24  0  0  0  0  0 19  0  0]
 [17  0  0  0  0  0 31  0  0]
 [19  1  0  0  0  0 31  0  0]
 [22  0  0  0  1  0 29  0  0]
 [19  0  0  0  0  0 32  0  0]
 [17  0  0  0  0  0 31  0  0]
 [13  0  0  0  2  0 28  0  0]
 [16  1  0  0  0  0 19  0  0]]
Accuracy:
 [[0.444 0.    0.    0.    0.    0.    0.556 0.    0.   ]
 [0.558 0.    0.    0.    0.    0.    0.442 0.    0.   ]
 [0.354 0.    0.    0.    0.    0.    0.646 0.    0.   ]
 [0.373 0.02  0.    0.    0.    0.    0.608 0.    0.   ]
 [0.423 0.    0.    0.    0.019 0.    0.558 0.    0.   ]
 [0.373 0.    0.    0.    0.    0.    0.627 0.    0.   ]
 [0.354 0.    0.    0.    0.    0.    0.646 0.    0.   ]
 [0.302 0.    0.    0.    0.047 0.    0.651 0.    0.   ]
 [0.444 0.028 0.    0.    0.    0.    0.528 0.    0.   ]]
results (all): {'reconst_0x0_avg': 0.09375, 'reconst_0x0_all': nan, 'cross_1x0_avg': 0.1328125, 'cross_1x0_all': nan, 'cluster_avg': 0.08829491, 'cluster_all': array([ 0.3594429 ,  0.07592133,  0.01169682, ...,  0.16760936,
       -0.07150716,  0.10966486], dtype=float32), 'magnitude_avg': 0.6228880648706288, 'magnitude_all': 0.6228880648706288, 'tsne-2d_avg': nan, 'tsne-2d_all': nan, 'mathematics_1+1-1_avg': 0.234375, 'mathematics_1+1-1_all': nan, 'mathematics_1+9-8_avg': 0.046875, 'mathematics_1+9-8_all': nan, 'mathematics_1+8-4_avg': 0.03125, 'mathematics_1+8-4_all': nan, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-1_all': nan, 'mathematics_2+7-2_avg': 0.640625, 'mathematics_2+7-2_all': nan, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+3-3_all': nan, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+5-2_all': nan, 'mathematics_3+6-3_avg': 0.0, 'mathematics_3+6-3_all': nan, 'mathematics_5+3-5_avg': 0.0, 'mathematics_5+3-5_all': nan, 'mathematics_9+7-8_avg': 0.0, 'mathematics_9+7-8_all': nan, 'mathematics_avg': 0.11764705926179886, 'mathematics_all': nan}
results (only averages): {'id': 'mmvae_cmnist_oscn_seed_3', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 0, 'target_property': 1, 'reconst_0x0_avg': 0.09375, 'cross_1x0_avg': 0.1328125, 'cluster_avg': 0.08829491, 'magnitude_avg': 0.6228880648706288, 'tsne-2d_avg': nan, 'mathematics_1+1-1_avg': 0.234375, 'mathematics_1+9-8_avg': 0.046875, 'mathematics_1+8-4_avg': 0.03125, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-2_avg': 0.640625, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+6-3_avg': 0.0, 'mathematics_5+3-5_avg': 0.0, 'mathematics_9+7-8_avg': 0.0, 'mathematics_avg': 0.11764705926179886}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([8, 2, 1, 7, 8, 1, 2, 5, 7, 9, 3, 6, 1, 4, 5, 3, 8, 4, 7, 2, 4, 8, 8, 5,
        9, 1, 2, 4, 1, 5, 1, 8, 7, 8, 3, 5, 3, 5, 4, 4, 4, 3, 2, 8, 4, 8, 1, 7,
        3, 7, 9, 5, 3, 2, 6, 6, 1, 7, 4, 6, 4, 6, 2, 7, 4, 4, 3, 6, 4, 6, 3, 2,
        3, 8, 6, 1, 5, 8, 2, 9, 6, 7, 1, 7, 7, 8, 6, 6, 6, 8, 9, 2, 7, 8, 3, 9,
        5, 5, 3, 1, 2, 6, 5, 3, 8, 2, 4, 7, 5, 4, 1, 2, 1, 2, 7, 2, 1, 9, 1, 5,
        9, 3, 1, 5, 7, 8, 1, 1]), ['r8j', 'w2j', 'r1j', 'w7s', 'w8s', 'b1s', 'g2j', 'g5t', 'g7s', 'w9t', 'r3t', 'r6t', 'w1j', 'b4t', 'w5t', 'b3s', 'g8t', 'b4t', 'b7t', 'b2j', 'w4j', 'b8t', 'g8s', 'r5t', 'w9j', 'b1j', 'g2j', 'r4t', 'r1s', 'g5s', 'b1j', 'b8t', 'g7t', 'g8t', 'w3s', 'g5s', 'r3t', 'r5t', 'r4t', 'w4j', 'b4s', 'w3j', 'r2s', 'w8j', 'g4t', 'g8t', 'b1s', 'g7s', 'w3j', 'r7j', 'r9s', 'w5s', 'g3j', 'b2s', 'g6t', 'b6s', 'w1t', 'b7s', 'b4t', 'r6s', 'r4s', 'r6s', 'r2t', 'r7t', 'b4t', 'b4s', 'g3s', 'g6t', 'b4j', 'r6j', 'g3t', 'g2t', 'g3j', 'r8s', 'r6s', 'w1j', 'b5t', 'g8s', 'r2t', 'g9t', 'r6t', 'g7j', 'w1j', 'r7s', 'w7s', 'w8j', 'b6j', 'g6t', 'b6j', 'w8j', 'b9t', 'w2t', 'b7t', 'b8t', 'r3s', 'g9j', 'w5t', 'r5j', 'w3j', 'b1s', 'g2t', 'g6j', 'r5t', 'g3j', 'b8t', 'b2t', 'g4j', 'r7j', 'w5t', 'g4j', 'w1t', 'b2t', 'r1s', 'r2j', 'b7t', 'g2j', 'b1j', 'r9j', 'g1j', 'g5t', 'g9t', 'r3t', 'r1t', 'b5t', 'w7s', 'g8s', 'w1j', 'w1j']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 0 
Target property: 2 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3/analyse/0_2 
Number of category 3 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2} 
Start index: 0 
End index: 3 
withzero: False
---
Silhouette values: [ 0.00503178 -0.00774395  0.00139182 ... -0.03051187 -0.00863482
 -0.01530427]
Average of silhouette coef: -0.005160827
---

Distance matrix between labels.
  0   1   2
0 0.0 0.3 0.3 
1 0.3 0.0 0.2 
2 0.3 0.2 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 1] 
Latent embbeding: [0.27441803, 0.26395407, 0.2045525] 
Flatten array: [[0.         0.        ]
 [1.         0.27441803]
 [2.         0.26395407]
 [0.         0.        ]
 [1.         0.2045525 ]
 [0.         0.        ]]
Correlation: [[1.         0.37491049]
 [0.37491049 1.        ]]
---
[[], [], []] [0 0 0 ... 2 1 2] [[ -2.289599  -45.259922 ]
 [  1.6313425  41.72067  ]
 [ 20.78837    62.37034  ]
 ...
 [ 34.465816  -16.679577 ]
 [ 27.456175   62.687603 ]
 [-32.172718   43.286953 ]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3/analyse/0_2/latent__0_2.svg
results (all): {'cluster_avg': -0.005160827, 'cluster_all': array([ 0.00503178, -0.00774395,  0.00139182, ..., -0.03051187,
       -0.00863482, -0.01530427], dtype=float32), 'magnitude_avg': 0.37491049464888937, 'magnitude_all': 0.37491049464888937, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'mmvae_cmnist_oscn_seed_3', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 0, 'target_property': 2, 'cluster_avg': -0.005160827, 'magnitude_avg': 0.37491049464888937, 'tsne-2d_avg': nan}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn',
 'run_id': 'test_classifier_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]       1,229,200
              ReLU-2                  [-1, 400]               0
            Linear-3                   [-1, 20]           8,020
            Linear-4                   [-1, 20]           8,020
            EncMLP-5       [[-1, 20], [-1, 20]]               0
            Linear-6                    [-1, 9]             189
================================================================
Total params: 1,245,429
Trainable params: 1,245,429
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.00
Params size (MB): 4.75
Estimated Total Size (MB): 4.77
----------------------------------------------------------------
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: cross 
t_objectives: cross


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([8, 5, 8, 8, 7, 2, 5, 3, 2, 7, 1, 9, 4, 1, 8, 9, 2, 7, 5, 3, 5, 2, 4, 3,
        5, 9, 4, 9, 8, 9, 3, 1, 9, 8, 3, 1, 2, 9, 2, 5, 7, 2, 7, 9, 4, 8, 4, 5,
        5, 1, 7, 3, 6, 2, 5, 9, 2, 2, 3, 4, 8, 7, 3, 1, 2, 8, 1, 8, 9, 9, 7, 1,
        7, 4, 3, 4, 7, 5, 8, 1, 8, 4, 1, 3, 7, 9, 3, 7, 6, 7, 9, 4, 1, 1, 3, 5,
        7, 2, 5, 3, 9, 4, 6, 1, 4, 8, 1, 3, 4, 8, 6, 9, 5, 9, 2, 1, 8, 2, 5, 7,
        4, 5, 4, 8, 2, 7, 7, 7]), ['w8s', 'b5t', 'r8s', 'g8t', 'w7t', 'g2t', 'r5j', 'b3s', 'b2s', 'b7t', 'b1s', 'w9t', 'b4t', 'w1t', 'g8t', 'w9j', 'g2t', 'w7t', 'w5s', 'b3s', 'b5t', 'r2j', 'g4s', 'b3s', 'w5s', 'r9s', 'w4s', 'r9j', 'r8j', 'w9s', 'w3t', 'w1s', 'w9j', 'r8t', 'g3t', 'b1t', 'g2j', 'b9t', 'g2t', 'r5s', 'b7j', 'w2s', 'g7j', 'w9t', 'g4s', 'g8t', 'b4j', 'b5t', 'w5s', 'g1t', 'b7t', 'b3j', 'g6j', 'b2j', 'g5j', 'b9j', 'r2j', 'r2s', 'r3s', 'g4s', 'r8s', 'r7s', 'r3s', 'w1t', 'g2j', 'r8j', 'w1j', 'g8t', 'r9s', 'r9s', 'b7j', 'w1j', 'w7s', 'g4j', 'b3t', 'w4s', 'w7s', 'r5j', 'g8j', 'g1j', 'b8t', 'w4j', 'r1t', 'g3t', 'g7t', 'g9s', 'g3j', 'w7s', 'w6j', 'w7j', 'r9j', 'w4j', 'w1s', 'g1s', 'w3j', 'w5t', 'w7t', 'g2t', 'b5t', 'g3s', 'r9t', 'r4s', 'b6s', 'w1j', 'r4s', 'b8s', 'r1t', 'w3s', 'w4t', 'g8t', 'w6s', 'w9s', 'w5t', 'r9t', 'b2j', 'b1j', 'g8s', 'g2s', 'b5j', 'r7j', 'r4s', 'g5t', 'r4s', 'r8j', 'r2s', 'b7s', 'w7j', 'r7t']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 1 
Target property: 0 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3/analyse/1_0 
Number of category 4 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2, 3} 
Start index: 0 
End index: 4 
withzero: False
---
Silhouette values: [ 0.15806717 -0.30762938  0.03610387 ... -0.6733675   0.14323463
  0.1969515 ]
Average of silhouette coef: -0.114019364
---

Distance matrix between labels.
  0   1   2   3
0 0.0 21.3 25.6 27.6 
1 21.3 0.0 6.0 8.3 
2 25.6 6.0 0.0 5.5 
3 27.6 8.3 5.5 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 1, 2, 1] 
Latent embbeding: [21.275671, 25.577946, 27.586395, 5.9542446, 8.298563, 5.5341034] 
Flatten array: [[ 0.          0.        ]
 [ 1.         21.27567101]
 [ 2.         25.57794571]
 [ 3.         27.58639526]
 [ 0.          0.        ]
 [ 1.          5.95424461]
 [ 2.          8.298563  ]
 [ 0.          0.        ]
 [ 1.          5.53410339]
 [ 0.          0.        ]]
Correlation: [[1.         0.62821419]
 [0.62821419 1.        ]]
---
[[], [], [], []] [0 1 3 ... 0 3 3] [[ -8.305826   72.98717  ]
 [ 41.337563   47.15813  ]
 [-54.706337  -47.29819  ]
 ...
 [ 53.407154    5.3180213]
 [ 13.458003   -4.0372586]
 [  7.870812  -19.7591   ]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3/analyse/1_0/latent__1_0.svg
results (all): {'cluster_avg': -0.114019364, 'cluster_all': array([ 0.15806717, -0.30762938,  0.03610387, ..., -0.6733675 ,
        0.14323463,  0.1969515 ], dtype=float32), 'magnitude_avg': 0.6282141881371355, 'magnitude_all': 0.6282141881371355, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'mmvae_cmnist_oscn_seed_3', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 1, 'target_property': 0, 'cluster_avg': -0.114019364, 'magnitude_avg': 0.6282141881371355, 'tsne-2d_avg': nan}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([6, 1, 3, 3, 9, 6, 4, 9, 6, 1, 3, 5, 9, 6, 1, 8, 6, 3, 6, 4, 3, 1, 5, 1,
        2, 1, 8, 7, 9, 6, 3, 9, 6, 8, 4, 1, 9, 4, 9, 8, 4, 7, 2, 8, 7, 6, 2, 6,
        2, 1, 5, 9, 5, 9, 1, 3, 3, 1, 5, 5, 7, 7, 3, 1, 6, 5, 1, 8, 8, 9, 6, 1,
        3, 5, 8, 6, 3, 1, 8, 1, 3, 1, 2, 7, 9, 7, 7, 9, 4, 2, 4, 1, 8, 5, 8, 2,
        6, 9, 6, 7, 4, 8, 9, 1, 6, 5, 7, 2, 6, 5, 7, 3, 8, 7, 5, 4, 1, 6, 2, 9,
        8, 8, 2, 6, 4, 6, 1, 8]), ['g6j', 'r1s', 'b3s', 'b3t', 'r9s', 'g6s', 'r4j', 'b9j', 'w6j', 'g1t', 'r3t', 'b5s', 'r9t', 'g6j', 'g1j', 'b8s', 'b6s', 'w3j', 'w6j', 'g4s', 'b3s', 'w1s', 'w5t', 'b1s', 'g2t', 'b1j', 'r8j', 'w7j', 'r9t', 'r6t', 'b3s', 'b9j', 'r6j', 'w8j', 'r4t', 'b1t', 'g9t', 'w4j', 'g9t', 'g8s', 'b4j', 'b7t', 'g2s', 'b8s', 'b7j', 'g6j', 'r2s', 'r6t', 'b2j', 'r1j', 'w5t', 'w9s', 'r5s', 'g9t', 'g1j', 'g3s', 'g3t', 'b1t', 'g5s', 'w5t', 'r7s', 'r7s', 'w3s', 'g1t', 'r6j', 'g5t', 'w1t', 'r8s', 'b8s', 'b9s', 'b6j', 'w1j', 'w3t', 'g5s', 'g8j', 'b6j', 'g3j', 'g1t', 'b8t', 'r1j', 'g3s', 'b1j', 'b2j', 'g7j', 'w9t', 'r7s', 'r7s', 'w9j', 'w4t', 'b2j', 'w4t', 'w1j', 'r8t', 'w5s', 'r8t', 'g2s', 'r6j', 'r9t', 'r6s', 'g7j', 'g4t', 'b8t', 'g9s', 'r1s', 'r6j', 'w5s', 'w7j', 'g2t', 'r6t', 'b5s', 'w7s', 'g3t', 'r8s', 'b7j', 'b5t', 'r4t', 'b1j', 'g6j', 'r2s', 'w9t', 'b8t', 'r8t', 'w2j', 'g6s', 'r4t', 'w6t', 'r1s', 'b8s']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 1 
Target property: 1 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3/analyse/1_1 
Number of category 10 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {1, 2, 3, 4, 5, 6, 7, 8, 9} 
Start index: 1 
End index: 10 
withzero: False
---
size of extracted recon in MMVAE: <class 'list'>
size of extracted recon in MMVAE: torch.Size([1, 128, 3, 32, 32])
size of extracted recon in MMVAE: torch.Size([128, 3, 32, 32])
pred: tensor([2, 2, 2, 2, 4, 6, 2, 6, 4, 6, 6, 2, 2, 4, 2, 6, 6, 4, 2, 4, 6, 6, 6, 6,
        4, 6, 6, 6, 6, 6, 6, 2, 6, 2, 4, 6, 2, 2, 4, 6, 4, 4, 6, 2, 4, 6, 6, 2,
        6, 2, 4, 6, 6, 6, 2, 2, 6, 4, 4, 2, 6, 2, 2, 6, 2, 2, 2, 2, 2, 6, 6, 6,
        6, 4, 6, 4, 6, 2, 4, 4, 2, 6, 6, 6, 4, 6, 4, 4, 2, 2, 6, 6, 2, 6, 6, 6,
        6, 2, 6, 4, 4, 6, 2, 2, 6, 4, 2, 6, 2, 6, 3, 6, 2, 6, 2, 6, 6, 2, 6, 6,
        6, 6, 6, 6, 6, 4, 2, 6]) 
tar: tensor([2, 5, 9, 1, 1, 4, 4, 8, 4, 4, 7, 3, 1, 2, 1, 3, 3, 6, 1, 2, 2, 9, 9, 1,
        1, 9, 1, 9, 4, 9, 6, 7, 2, 3, 9, 9, 1, 6, 2, 9, 5, 2, 3, 9, 6, 7, 5, 4,
        1, 8, 2, 6, 1, 5, 3, 5, 2, 2, 3, 1, 5, 6, 8, 7, 3, 2, 5, 8, 2, 3, 6, 9,
        5, 1, 2, 4, 2, 2, 5, 7, 8, 6, 2, 3, 3, 5, 8, 9, 7, 4, 2, 4, 1, 8, 2, 4,
        8, 1, 3, 1, 1, 2, 4, 3, 8, 6, 2, 6, 2, 9, 6, 5, 9, 7, 4, 8, 4, 1, 3, 8,
        2, 9, 6, 1, 9, 1, 9, 6])
Accuracy (count): tensor(15) 
Accuracy (ratio) tensor(0.1172)
Accuracy:
 [[ 0  9  0  6  0  5  0  0  0]
 [ 0  6  0  6  0 10  0  0  0]
 [ 0  5  0  2  0  7  0  0  0]
 [ 0  5  0  2  0  6  0  0  0]
 [ 0  3  0  2  0  6  0  0  0]
 [ 0  2  1  3  0  7  0  0  0]
 [ 0  2  0  1  0  4  0  0  0]
 [ 0  4  0  1  0  6  0  0  0]
 [ 0  4  0  2  0 11  0  0  0]]
Accuracy:
 [[0.    0.45  0.    0.3   0.    0.25  0.    0.    0.   ]
 [0.    0.273 0.    0.273 0.    0.455 0.    0.    0.   ]
 [0.    0.357 0.    0.143 0.    0.5   0.    0.    0.   ]
 [0.    0.385 0.    0.154 0.    0.462 0.    0.    0.   ]
 [0.    0.273 0.    0.182 0.    0.545 0.    0.    0.   ]
 [0.    0.154 0.077 0.231 0.    0.538 0.    0.    0.   ]
 [0.    0.286 0.    0.143 0.    0.571 0.    0.    0.   ]
 [0.    0.364 0.    0.091 0.    0.545 0.    0.    0.   ]
 [0.    0.235 0.    0.118 0.    0.647 0.    0.    0.   ]]
---
size of extracted recon in MMVAE: <class 'list'>
size of extracted recon in MMVAE: torch.Size([1, 128, 3, 32, 32])
size of extracted recon in MMVAE: torch.Size([128, 3, 32, 32])
pred: tensor([2, 2, 6, 6, 2, 6, 2, 2, 6, 6, 4, 2, 4, 2, 2, 6, 2, 2, 2, 6, 6, 6, 2, 4,
        6, 2, 4, 6, 2, 6, 2, 2, 2, 4, 6, 2, 6, 2, 6, 2, 2, 2, 2, 6, 2, 4, 6, 6,
        6, 4, 2, 6, 6, 2, 2, 4, 2, 6, 2, 2, 6, 2, 2, 6, 2, 4, 2, 6, 6, 6, 2, 2,
        2, 2, 6, 2, 6, 6, 2, 2, 2, 2, 2, 6, 2, 4, 6, 6, 2, 4, 6, 4, 2, 6, 2, 2,
        2, 4, 6, 6, 2, 2, 6, 6, 2, 2, 2, 2, 4, 6, 2, 6, 6, 2, 6, 2, 2, 4, 6, 6,
        2, 2, 6, 2, 6, 2, 2, 2]) 
tar: tensor([1, 1, 4, 2, 5, 7, 1, 2, 7, 1, 8, 1, 3, 5, 9, 7, 6, 7, 2, 3, 7, 4, 1, 3,
        1, 4, 7, 8, 8, 7, 9, 2, 3, 9, 4, 7, 1, 2, 7, 2, 9, 9, 6, 5, 5, 2, 3, 8,
        9, 8, 2, 8, 2, 3, 5, 7, 3, 5, 5, 4, 2, 3, 3, 9, 1, 5, 6, 6, 2, 1, 4, 3,
        3, 2, 6, 2, 5, 5, 2, 1, 1, 5, 7, 6, 2, 3, 5, 8, 2, 7, 5, 9, 7, 7, 4, 7,
        1, 6, 1, 3, 5, 8, 7, 9, 3, 7, 3, 5, 1, 6, 3, 2, 6, 6, 6, 1, 1, 7, 6, 5,
        6, 3, 1, 3, 5, 2, 3, 3])
Accuracy (count): tensor(19) 
Accuracy (ratio) tensor(0.1484)
Accuracy:
 [[ 0 11  0  1  0  6  0  0  0]
 [ 0 12  0  1  0  5  0  0  0]
 [ 0 14  0  3  0  3  0  0  0]
 [ 0  4  0  0  0  3  0  0  0]
 [ 0  8  0  1  0  8  0  0  0]
 [ 0  5  0  1  0  7  0  0  0]
 [ 0  6  0  4  0  8  0  0  0]
 [ 0  2  0  2  0  4  0  0  0]
 [ 0  4  0  2  0  3  0  0  0]]
Accuracy:
 [[0.    0.611 0.    0.056 0.    0.333 0.    0.    0.   ]
 [0.    0.667 0.    0.056 0.    0.278 0.    0.    0.   ]
 [0.    0.7   0.    0.15  0.    0.15  0.    0.    0.   ]
 [0.    0.571 0.    0.    0.    0.429 0.    0.    0.   ]
 [0.    0.471 0.    0.059 0.    0.471 0.    0.    0.   ]
 [0.    0.385 0.    0.077 0.    0.538 0.    0.    0.   ]
 [0.    0.333 0.    0.222 0.    0.444 0.    0.    0.   ]
 [0.    0.25  0.    0.25  0.    0.5   0.    0.    0.   ]
 [0.    0.444 0.    0.222 0.    0.333 0.    0.    0.   ]]
---
Silhouette values: [-0.58148384  0.3496083   0.04160522 ... -0.04081953 -0.5783052
  0.33985388]
Average of silhouette coef: -0.28477955
---

Distance matrix between labels.
  1   2   3   4   5   6   7   8   9
1 0.0 3.4 6.2 10.6 17.5 16.5 20.6 24.2 26.0 
2 3.4 0.0 2.7 7.2 14.1 13.1 17.2 20.8 22.6 
3 6.2 2.7 0.0 4.5 11.4 10.3 14.5 18.0 19.9 
4 10.6 7.2 4.5 0.0 7.0 5.9 10.0 13.6 15.4 
5 17.5 14.1 11.4 7.0 0.0 1.3 3.1 6.7 8.5 
6 16.5 13.1 10.3 5.9 1.3 0.0 4.1 7.7 9.6 
7 20.6 17.2 14.5 10.0 3.1 4.1 0.0 3.6 5.4 
8 24.2 20.8 18.0 13.6 6.7 7.7 3.6 0.0 1.9 
9 26.0 22.6 19.9 15.4 8.5 9.6 5.4 1.9 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
Latent embbeding: [3.4161322, 6.15563, 10.609852, 17.544224, 16.46071, 20.580545, 24.152525, 26.00777, 2.7466135, 7.2009335, 14.143561, 13.059484, 17.182472, 20.757946, 22.611156, 4.480441, 11.42544, 10.336629, 14.463101, 18.039726, 19.890238, 6.970856, 5.877356, 9.996246, 13.57895, 15.429058, 1.3270546, 3.1058238, 6.66697, 8.507379, 4.14774, 7.730695, 9.566408, 3.6174922, 5.4437814, 1.9149328] 
Flatten array: [[ 0.          0.        ]
 [ 1.          3.41613221]
 [ 2.          6.15563011]
 [ 3.         10.60985184]
 [ 4.         17.54422379]
 [ 5.         16.46071053]
 [ 6.         20.58054543]
 [ 7.         24.15252495]
 [ 8.         26.00777054]
 [ 0.          0.        ]
 [ 1.          2.7466135 ]
 [ 2.          7.20093346]
 [ 3.         14.14356136]
 [ 4.         13.05948353]
 [ 5.         17.18247223]
 [ 6.         20.75794601]
 [ 7.         22.61115646]
 [ 0.          0.        ]
 [ 1.          4.48044109]
 [ 2.         11.42543983]
 [ 3.         10.33662891]
 [ 4.         14.46310139]
 [ 5.         18.03972626]
 [ 6.         19.89023781]
 [ 0.          0.        ]
 [ 1.          6.97085619]
 [ 2.          5.87735605]
 [ 3.          9.99624634]
 [ 4.         13.57894993]
 [ 5.         15.42905807]
 [ 0.          0.        ]
 [ 1.          1.32705462]
 [ 2.          3.10582376]
 [ 3.          6.66696978]
 [ 4.          8.50737858]
 [ 0.          0.        ]
 [ 1.          4.14773989]
 [ 2.          7.73069477]
 [ 3.          9.56640816]
 [ 0.          0.        ]
 [ 1.          3.6174922 ]
 [ 2.          5.44378138]
 [ 0.          0.        ]
 [ 1.          1.91493285]
 [ 0.          0.        ]]
Correlation: [[1.         0.95786575]
 [0.95786575 1.        ]]
---
[[], [], [], [], [], [], [], [], [], []] [6 1 3 ... 6 4 1] [[-25.19864    -8.126124 ]
 [ 19.567183   16.212463 ]
 [-55.515182    6.2104707]
 ...
 [-54.255867  -15.18094  ]
 [ -2.8507185 -30.277512 ]
 [  4.0163803 -11.692023 ]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3/analyse/1_1/latent__1_1.svg
---
length of elements: 408 408
length of 1: 36
length of 2: 43
length of 3: 48
length of 4: 51
length of 5: 52
length of 6: 51
length of 7: 48
length of 8: 43
length of 9: 36
all elements:

[(1, (1, 2, 2)),
 (2, (1, 3, 2)),
 (1, (1, 3, 3)),
 (3, (1, 4, 2)),
 (2, (1, 4, 3)),
 (1, (1, 4, 4)),
 (4, (1, 5, 2)),
 (3, (1, 5, 3)),
 (2, (1, 5, 4)),
 (1, (1, 5, 5)),
 (5, (1, 6, 2)),
 (4, (1, 6, 3)),
 (3, (1, 6, 4)),
 (2, (1, 6, 5)),
 (1, (1, 6, 6)),
 (6, (1, 7, 2)),
 (5, (1, 7, 3)),
 (4, (1, 7, 4)),
 (3, (1, 7, 5)),
 (2, (1, 7, 6)),
 (1, (1, 7, 7)),
 (7, (1, 8, 2)),
 (6, (1, 8, 3)),
 (5, (1, 8, 4)),
 (4, (1, 8, 5)),
 (3, (1, 8, 6)),
 (2, (1, 8, 7)),
 (1, (1, 8, 8)),
 (8, (1, 9, 2)),
 (7, (1, 9, 3)),
 (6, (1, 9, 4)),
 (5, (1, 9, 5)),
 (4, (1, 9, 6)),
 (3, (1, 9, 7)),
 (2, (1, 9, 8)),
 (1, (1, 9, 9)),
 (2, (2, 1, 1)),
 (3, (2, 2, 1)),
 (1, (2, 2, 3)),
 (4, (2, 3, 1)),
 (2, (2, 3, 3)),
 (1, (2, 3, 4)),
 (5, (2, 4, 1)),
 (3, (2, 4, 3)),
 (2, (2, 4, 4)),
 (1, (2, 4, 5)),
 (6, (2, 5, 1)),
 (4, (2, 5, 3)),
 (3, (2, 5, 4)),
 (2, (2, 5, 5)),
 (1, (2, 5, 6)),
 (7, (2, 6, 1)),
 (5, (2, 6, 3)),
 (4, (2, 6, 4)),
 (3, (2, 6, 5)),
 (2, (2, 6, 6)),
 (1, (2, 6, 7)),
 (8, (2, 7, 1)),
 (6, (2, 7, 3)),
 (5, (2, 7, 4)),
 (4, (2, 7, 5)),
 (3, (2, 7, 6)),
 (2, (2, 7, 7)),
 (1, (2, 7, 8)),
 (9, (2, 8, 1)),
 (7, (2, 8, 3)),
 (6, (2, 8, 4)),
 (5, (2, 8, 5)),
 (4, (2, 8, 6)),
 (3, (2, 8, 7)),
 (2, (2, 8, 8)),
 (1, (2, 8, 9)),
 (8, (2, 9, 3)),
 (7, (2, 9, 4)),
 (6, (2, 9, 5)),
 (5, (2, 9, 6)),
 (4, (2, 9, 7)),
 (3, (2, 9, 8)),
 (2, (2, 9, 9)),
 (3, (3, 1, 1)),
 (2, (3, 1, 2)),
 (4, (3, 2, 1)),
 (3, (3, 2, 2)),
 (1, (3, 2, 4)),
 (5, (3, 3, 1)),
 (4, (3, 3, 2)),
 (2, (3, 3, 4)),
 (1, (3, 3, 5)),
 (6, (3, 4, 1)),
 (5, (3, 4, 2)),
 (3, (3, 4, 4)),
 (2, (3, 4, 5)),
 (1, (3, 4, 6)),
 (7, (3, 5, 1)),
 (6, (3, 5, 2)),
 (4, (3, 5, 4)),
 (3, (3, 5, 5)),
 (2, (3, 5, 6)),
 (1, (3, 5, 7)),
 (8, (3, 6, 1)),
 (7, (3, 6, 2)),
 (5, (3, 6, 4)),
 (4, (3, 6, 5)),
 (3, (3, 6, 6)),
 (2, (3, 6, 7)),
 (1, (3, 6, 8)),
 (9, (3, 7, 1)),
 (8, (3, 7, 2)),
 (6, (3, 7, 4)),
 (5, (3, 7, 5)),
 (4, (3, 7, 6)),
 (3, (3, 7, 7)),
 (2, (3, 7, 8)),
 (1, (3, 7, 9)),
 (9, (3, 8, 2)),
 (7, (3, 8, 4)),
 (6, (3, 8, 5)),
 (5, (3, 8, 6)),
 (4, (3, 8, 7)),
 (3, (3, 8, 8)),
 (2, (3, 8, 9)),
 (8, (3, 9, 4)),
 (7, (3, 9, 5)),
 (6, (3, 9, 6)),
 (5, (3, 9, 7)),
 (4, (3, 9, 8)),
 (3, (3, 9, 9)),
 (4, (4, 1, 1)),
 (3, (4, 1, 2)),
 (2, (4, 1, 3)),
 (5, (4, 2, 1)),
 (4, (4, 2, 2)),
 (3, (4, 2, 3)),
 (1, (4, 2, 5)),
 (6, (4, 3, 1)),
 (5, (4, 3, 2)),
 (4, (4, 3, 3)),
 (2, (4, 3, 5)),
 (1, (4, 3, 6)),
 (7, (4, 4, 1)),
 (6, (4, 4, 2)),
 (5, (4, 4, 3)),
 (3, (4, 4, 5)),
 (2, (4, 4, 6)),
 (1, (4, 4, 7)),
 (8, (4, 5, 1)),
 (7, (4, 5, 2)),
 (6, (4, 5, 3)),
 (4, (4, 5, 5)),
 (3, (4, 5, 6)),
 (2, (4, 5, 7)),
 (1, (4, 5, 8)),
 (9, (4, 6, 1)),
 (8, (4, 6, 2)),
 (7, (4, 6, 3)),
 (5, (4, 6, 5)),
 (4, (4, 6, 6)),
 (3, (4, 6, 7)),
 (2, (4, 6, 8)),
 (1, (4, 6, 9)),
 (9, (4, 7, 2)),
 (8, (4, 7, 3)),
 (6, (4, 7, 5)),
 (5, (4, 7, 6)),
 (4, (4, 7, 7)),
 (3, (4, 7, 8)),
 (2, (4, 7, 9)),
 (9, (4, 8, 3)),
 (7, (4, 8, 5)),
 (6, (4, 8, 6)),
 (5, (4, 8, 7)),
 (4, (4, 8, 8)),
 (3, (4, 8, 9)),
 (8, (4, 9, 5)),
 (7, (4, 9, 6)),
 (6, (4, 9, 7)),
 (5, (4, 9, 8)),
 (4, (4, 9, 9)),
 (5, (5, 1, 1)),
 (4, (5, 1, 2)),
 (3, (5, 1, 3)),
 (2, (5, 1, 4)),
 (6, (5, 2, 1)),
 (5, (5, 2, 2)),
 (4, (5, 2, 3)),
 (3, (5, 2, 4)),
 (1, (5, 2, 6)),
 (7, (5, 3, 1)),
 (6, (5, 3, 2)),
 (5, (5, 3, 3)),
 (4, (5, 3, 4)),
 (2, (5, 3, 6)),
 (1, (5, 3, 7)),
 (8, (5, 4, 1)),
 (7, (5, 4, 2)),
 (6, (5, 4, 3)),
 (5, (5, 4, 4)),
 (3, (5, 4, 6)),
 (2, (5, 4, 7)),
 (1, (5, 4, 8)),
 (9, (5, 5, 1)),
 (8, (5, 5, 2)),
 (7, (5, 5, 3)),
 (6, (5, 5, 4)),
 (4, (5, 5, 6)),
 (3, (5, 5, 7)),
 (2, (5, 5, 8)),
 (1, (5, 5, 9)),
 (9, (5, 6, 2)),
 (8, (5, 6, 3)),
 (7, (5, 6, 4)),
 (5, (5, 6, 6)),
 (4, (5, 6, 7)),
 (3, (5, 6, 8)),
 (2, (5, 6, 9)),
 (9, (5, 7, 3)),
 (8, (5, 7, 4)),
 (6, (5, 7, 6)),
 (5, (5, 7, 7)),
 (4, (5, 7, 8)),
 (3, (5, 7, 9)),
 (9, (5, 8, 4)),
 (7, (5, 8, 6)),
 (6, (5, 8, 7)),
 (5, (5, 8, 8)),
 (4, (5, 8, 9)),
 (8, (5, 9, 6)),
 (7, (5, 9, 7)),
 (6, (5, 9, 8)),
 (5, (5, 9, 9)),
 (6, (6, 1, 1)),
 (5, (6, 1, 2)),
 (4, (6, 1, 3)),
 (3, (6, 1, 4)),
 (2, (6, 1, 5)),
 (7, (6, 2, 1)),
 (6, (6, 2, 2)),
 (5, (6, 2, 3)),
 (4, (6, 2, 4)),
 (3, (6, 2, 5)),
 (1, (6, 2, 7)),
 (8, (6, 3, 1)),
 (7, (6, 3, 2)),
 (6, (6, 3, 3)),
 (5, (6, 3, 4)),
 (4, (6, 3, 5)),
 (2, (6, 3, 7)),
 (1, (6, 3, 8)),
 (9, (6, 4, 1)),
 (8, (6, 4, 2)),
 (7, (6, 4, 3)),
 (6, (6, 4, 4)),
 (5, (6, 4, 5)),
 (3, (6, 4, 7)),
 (2, (6, 4, 8)),
 (1, (6, 4, 9)),
 (9, (6, 5, 2)),
 (8, (6, 5, 3)),
 (7, (6, 5, 4)),
 (6, (6, 5, 5)),
 (4, (6, 5, 7)),
 (3, (6, 5, 8)),
 (2, (6, 5, 9)),
 (9, (6, 6, 3)),
 (8, (6, 6, 4)),
 (7, (6, 6, 5)),
 (5, (6, 6, 7)),
 (4, (6, 6, 8)),
 (3, (6, 6, 9)),
 (9, (6, 7, 4)),
 (8, (6, 7, 5)),
 (6, (6, 7, 7)),
 (5, (6, 7, 8)),
 (4, (6, 7, 9)),
 (9, (6, 8, 5)),
 (7, (6, 8, 7)),
 (6, (6, 8, 8)),
 (5, (6, 8, 9)),
 (8, (6, 9, 7)),
 (7, (6, 9, 8)),
 (6, (6, 9, 9)),
 (7, (7, 1, 1)),
 (6, (7, 1, 2)),
 (5, (7, 1, 3)),
 (4, (7, 1, 4)),
 (3, (7, 1, 5)),
 (2, (7, 1, 6)),
 (8, (7, 2, 1)),
 (7, (7, 2, 2)),
 (6, (7, 2, 3)),
 (5, (7, 2, 4)),
 (4, (7, 2, 5)),
 (3, (7, 2, 6)),
 (1, (7, 2, 8)),
 (9, (7, 3, 1)),
 (8, (7, 3, 2)),
 (7, (7, 3, 3)),
 (6, (7, 3, 4)),
 (5, (7, 3, 5)),
 (4, (7, 3, 6)),
 (2, (7, 3, 8)),
 (1, (7, 3, 9)),
 (9, (7, 4, 2)),
 (8, (7, 4, 3)),
 (7, (7, 4, 4)),
 (6, (7, 4, 5)),
 (5, (7, 4, 6)),
 (3, (7, 4, 8)),
 (2, (7, 4, 9)),
 (9, (7, 5, 3)),
 (8, (7, 5, 4)),
 (7, (7, 5, 5)),
 (6, (7, 5, 6)),
 (4, (7, 5, 8)),
 (3, (7, 5, 9)),
 (9, (7, 6, 4)),
 (8, (7, 6, 5)),
 (7, (7, 6, 6)),
 (5, (7, 6, 8)),
 (4, (7, 6, 9)),
 (9, (7, 7, 5)),
 (8, (7, 7, 6)),
 (6, (7, 7, 8)),
 (5, (7, 7, 9)),
 (9, (7, 8, 6)),
 (7, (7, 8, 8)),
 (6, (7, 8, 9)),
 (8, (7, 9, 8)),
 (7, (7, 9, 9)),
 (8, (8, 1, 1)),
 (7, (8, 1, 2)),
 (6, (8, 1, 3)),
 (5, (8, 1, 4)),
 (4, (8, 1, 5)),
 (3, (8, 1, 6)),
 (2, (8, 1, 7)),
 (9, (8, 2, 1)),
 (8, (8, 2, 2)),
 (7, (8, 2, 3)),
 (6, (8, 2, 4)),
 (5, (8, 2, 5)),
 (4, (8, 2, 6)),
 (3, (8, 2, 7)),
 (1, (8, 2, 9)),
 (9, (8, 3, 2)),
 (8, (8, 3, 3)),
 (7, (8, 3, 4)),
 (6, (8, 3, 5)),
 (5, (8, 3, 6)),
 (4, (8, 3, 7)),
 (2, (8, 3, 9)),
 (9, (8, 4, 3)),
 (8, (8, 4, 4)),
 (7, (8, 4, 5)),
 (6, (8, 4, 6)),
 (5, (8, 4, 7)),
 (3, (8, 4, 9)),
 (9, (8, 5, 4)),
 (8, (8, 5, 5)),
 (7, (8, 5, 6)),
 (6, (8, 5, 7)),
 (4, (8, 5, 9)),
 (9, (8, 6, 5)),
 (8, (8, 6, 6)),
 (7, (8, 6, 7)),
 (5, (8, 6, 9)),
 (9, (8, 7, 6)),
 (8, (8, 7, 7)),
 (6, (8, 7, 9)),
 (9, (8, 8, 7)),
 (7, (8, 8, 9)),
 (8, (8, 9, 9)),
 (9, (9, 1, 1)),
 (8, (9, 1, 2)),
 (7, (9, 1, 3)),
 (6, (9, 1, 4)),
 (5, (9, 1, 5)),
 (4, (9, 1, 6)),
 (3, (9, 1, 7)),
 (2, (9, 1, 8)),
 (9, (9, 2, 2)),
 (8, (9, 2, 3)),
 (7, (9, 2, 4)),
 (6, (9, 2, 5)),
 (5, (9, 2, 6)),
 (4, (9, 2, 7)),
 (3, (9, 2, 8)),
 (9, (9, 3, 3)),
 (8, (9, 3, 4)),
 (7, (9, 3, 5)),
 (6, (9, 3, 6)),
 (5, (9, 3, 7)),
 (4, (9, 3, 8)),
 (9, (9, 4, 4)),
 (8, (9, 4, 5)),
 (7, (9, 4, 6)),
 (6, (9, 4, 7)),
 (5, (9, 4, 8)),
 (9, (9, 5, 5)),
 (8, (9, 5, 6)),
 (7, (9, 5, 7)),
 (6, (9, 5, 8)),
 (9, (9, 6, 6)),
 (8, (9, 6, 7)),
 (7, (9, 6, 8)),
 (9, (9, 7, 7)),
 (8, (9, 7, 8)),
 (9, (9, 8, 8))]
i: 1
shape (20,)
i: 2
shape (20,)
i: 3
shape (20,)
i: 4
shape (20,)
i: 5
shape (20,)
i: 6
shape (20,)
i: 7
shape (20,)
i: 8
shape (20,)
i: 9
shape (20,)
mean_all: [None, array([ 2.1036539e+00,  5.5016297e-01,  3.4429884e-01, -1.6355315e-01,
        6.9906229e-01, -2.4055298e-01,  3.0679798e-01,  1.1260433e+00,
        3.4124333e-01, -2.2205307e-01,  2.7542584e+00, -2.0560801e-01,
        1.7233868e+00,  3.8838238e-03,  1.7761615e-01,  2.8164268e-01,
       -2.1698928e-01, -1.0741882e-01, -9.2423642e-01, -1.2238402e-03],
      dtype=float32), array([ 4.3036356 ,  1.6353635 ,  0.19739649, -1.119127  ,  0.96895295,
       -0.6424276 ,  0.1499727 ,  2.4065716 ,  0.48316497, -0.24291193,
        3.8047721 , -0.04363967,  1.7862363 , -0.32995865,  0.45930377,
        0.72855693, -0.62403005, -0.70477086, -1.7492287 ,  0.26521912],
      dtype=float32), array([ 5.976452  ,  2.616163  ,  0.008177  , -1.9115896 ,  1.1327682 ,
       -1.001056  ,  0.01241414,  3.4977074 ,  0.58531684, -0.17942756,
        4.5765266 ,  0.17140684,  1.9069412 , -0.60934705,  0.68186015,
        1.0132822 , -0.97861683, -1.2505245 , -2.38167   ,  0.49270472],
      dtype=float32), array([ 8.849628  ,  4.1910005 , -0.20630902, -3.13538   ,  1.4491286 ,
       -1.4302155 , -0.07515852,  4.9889565 ,  0.6825848 , -0.25570032,
        6.086784  ,  0.48511165,  2.1021655 , -0.99774617,  0.98923117,
        1.9257647 , -1.295829  , -1.8904308 , -3.466466  ,  0.77932966],
      dtype=float32), array([12.959513  ,  6.402978  , -0.5931083 , -5.225786  ,  1.6623901 ,
       -2.364663  , -0.44663432,  7.56908   ,  0.8210049 , -0.11356711,
        8.510915  ,  0.7361296 ,  2.7771876 , -1.8481436 ,  1.3624792 ,
        3.3790135 , -1.9621994 , -2.9261916 , -5.2642407 ,  1.4258794 ],
      dtype=float32), array([12.417779  ,  6.4706955 , -0.6358214 , -4.855821  ,  1.7104706 ,
       -2.0893    , -0.5656518 ,  6.8826146 ,  0.8024429 , -0.12011858,
        7.861799  ,  0.7441884 ,  2.530049  , -1.6537632 ,  1.324737  ,
        3.067695  , -1.8169637 , -2.957164  , -4.9312377 ,  1.3319361 ],
      dtype=float32), array([14.944038  ,  7.775987  , -0.9856042 , -6.0554924 ,  1.9653819 ,
       -2.5629363 , -0.5902937 ,  8.408446  ,  0.8557396 , -0.19516242,
        9.297838  ,  1.0439959 ,  2.9980028 , -2.009509  ,  1.5595176 ,
        3.998252  , -2.1018147 , -3.585194  , -5.9082026 ,  1.6168046 ],
      dtype=float32), array([16.992413  ,  9.046344  , -1.2160738 , -6.7652807 ,  2.1697536 ,
       -2.9600546 , -1.0737841 ,  9.804645  ,  1.0078217 , -0.16315366,
       10.5563755 ,  1.3833756 ,  3.345123  , -2.3004527 ,  1.769775  ,
        4.864359  , -2.4545615 , -4.3230724 , -6.845473  ,  1.8756095 ],
      dtype=float32), array([18.178257  ,  9.705179  , -1.4407955 , -7.569641  ,  2.30728   ,
       -3.1841102 , -1.1115263 , 10.355488  ,  1.0527644 , -0.10371812,
       10.986692  ,  1.2802141 ,  3.3327358 , -2.5225801 ,  1.8678274 ,
        5.177093  , -2.6733685 , -4.686271  , -7.2426653 ,  2.1192973 ],
      dtype=float32)]
---
Target calculation: 1+1-1
pred: tensor([2, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 2, 6, 2, 2, 2, 6, 2, 4, 4, 4,
        4, 2, 2, 6, 2, 6, 4, 4, 2, 2, 4, 2, 2, 2, 4, 2, 4, 4, 4, 6, 6, 4, 2, 2,
        2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 6, 4, 6, 2, 6]) 
tar: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0 35  0 14  0 15  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[0.    0.547 0.    0.219 0.    0.234 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 2.1  0.6  0.3 -0.2  0.7 -0.2  0.3  1.1  0.3 -0.2  2.8 -0.2  1.7  0.0  0.2  0.3 -0.2 -0.1 -0.9 -0.0 
 4.3  1.6  0.2 -1.1  1.0 -0.6  0.1  2.4  0.5 -0.2  3.8 -0.0  1.8 -0.3  0.5  0.7 -0.6 -0.7 -1.7  0.3 
 6.0  2.6  0.0 -1.9  1.1 -1.0  0.0  3.5  0.6 -0.2  4.6  0.2  1.9 -0.6  0.7  1.0 -1.0 -1.3 -2.4  0.5 
 8.8  4.2 -0.2 -3.1  1.4 -1.4 -0.1  5.0  0.7 -0.3  6.1  0.5  2.1 -1.0  1.0  1.9 -1.3 -1.9 -3.5  0.8 
 13.0  6.4 -0.6 -5.2  1.7 -2.4 -0.4  7.6  0.8 -0.1  8.5  0.7  2.8 -1.8  1.4  3.4 -2.0 -2.9 -5.3  1.4 
 12.4  6.5 -0.6 -4.9  1.7 -2.1 -0.6  6.9  0.8 -0.1  7.9  0.7  2.5 -1.7  1.3  3.1 -1.8 -3.0 -4.9  1.3 
 14.9  7.8 -1.0 -6.1  2.0 -2.6 -0.6  8.4  0.9 -0.2  9.3  1.0  3.0 -2.0  1.6  4.0 -2.1 -3.6 -5.9  1.6 
 17.0  9.0 -1.2 -6.8  2.2 -3.0 -1.1  9.8  1.0 -0.2  10.6  1.4  3.3 -2.3  1.8  4.9 -2.5 -4.3 -6.8  1.9 
 18.2  9.7 -1.4 -7.6  2.3 -3.2 -1.1  10.4  1.1 -0.1  11.0  1.3  3.3 -2.5  1.9  5.2 -2.7 -4.7 -7.2  2.1 
Minimum distance of calculation. 
true answer: 1 
indices: 1 
distance: 0.0
---
Target calculation: 1+9-8
pred: tensor([4, 4, 6, 2, 2, 2, 2, 2, 4, 6, 2, 2, 2, 2, 4, 6, 2, 2, 6, 2, 6, 2, 4, 6,
        4, 4, 2, 4, 4, 4, 6, 6, 2, 6, 2, 4, 4, 2, 6, 4, 6, 2, 2, 2, 2, 6, 4, 2,
        2, 2, 2, 4, 2, 4, 2, 2, 2, 4, 4, 2, 4, 4, 6, 2]) 
tar: tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
Accuracy (count): tensor(31) 
Accuracy (ratio) tensor(0.4844)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0 31  0 20  0 13  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.484 0.    0.312 0.    0.203 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 2.1  0.6  0.3 -0.2  0.7 -0.2  0.3  1.1  0.3 -0.2  2.8 -0.2  1.7  0.0  0.2  0.3 -0.2 -0.1 -0.9 -0.0 
 4.3  1.6  0.2 -1.1  1.0 -0.6  0.1  2.4  0.5 -0.2  3.8 -0.0  1.8 -0.3  0.5  0.7 -0.6 -0.7 -1.7  0.3 
 6.0  2.6  0.0 -1.9  1.1 -1.0  0.0  3.5  0.6 -0.2  4.6  0.2  1.9 -0.6  0.7  1.0 -1.0 -1.3 -2.4  0.5 
 8.8  4.2 -0.2 -3.1  1.4 -1.4 -0.1  5.0  0.7 -0.3  6.1  0.5  2.1 -1.0  1.0  1.9 -1.3 -1.9 -3.5  0.8 
 13.0  6.4 -0.6 -5.2  1.7 -2.4 -0.4  7.6  0.8 -0.1  8.5  0.7  2.8 -1.8  1.4  3.4 -2.0 -2.9 -5.3  1.4 
 12.4  6.5 -0.6 -4.9  1.7 -2.1 -0.6  6.9  0.8 -0.1  7.9  0.7  2.5 -1.7  1.3  3.1 -1.8 -3.0 -4.9  1.3 
 14.9  7.8 -1.0 -6.1  2.0 -2.6 -0.6  8.4  0.9 -0.2  9.3  1.0  3.0 -2.0  1.6  4.0 -2.1 -3.6 -5.9  1.6 
 17.0  9.0 -1.2 -6.8  2.2 -3.0 -1.1  9.8  1.0 -0.2  10.6  1.4  3.3 -2.3  1.8  4.9 -2.5 -4.3 -6.8  1.9 
 18.2  9.7 -1.4 -7.6  2.3 -3.2 -1.1  10.4  1.1 -0.1  11.0  1.3  3.3 -2.5  1.9  5.2 -2.7 -4.7 -7.2  2.1 
Minimum distance of calculation. 
true answer: 2 
indices: 2 
distance: 1.6276957
---
Target calculation: 1+8-4
pred: tensor([2, 6, 6, 2, 6, 6, 6, 6, 6, 4, 6, 4, 6, 4, 6, 4, 6, 2, 6, 6, 6, 6, 4, 6,
        6, 4, 6, 6, 6, 6, 2, 4, 6, 4, 4, 6, 2, 6, 4, 4, 6, 6, 4, 2, 6, 6, 6, 2,
        6, 4, 4, 6, 2, 6, 2, 6, 2, 6, 6, 6, 6, 6, 6, 6]) 
tar: tensor([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0 10  0 14  0 40  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.156 0.    0.219 0.    0.625 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 2.1  0.6  0.3 -0.2  0.7 -0.2  0.3  1.1  0.3 -0.2  2.8 -0.2  1.7  0.0  0.2  0.3 -0.2 -0.1 -0.9 -0.0 
 4.3  1.6  0.2 -1.1  1.0 -0.6  0.1  2.4  0.5 -0.2  3.8 -0.0  1.8 -0.3  0.5  0.7 -0.6 -0.7 -1.7  0.3 
 6.0  2.6  0.0 -1.9  1.1 -1.0  0.0  3.5  0.6 -0.2  4.6  0.2  1.9 -0.6  0.7  1.0 -1.0 -1.3 -2.4  0.5 
 8.8  4.2 -0.2 -3.1  1.4 -1.4 -0.1  5.0  0.7 -0.3  6.1  0.5  2.1 -1.0  1.0  1.9 -1.3 -1.9 -3.5  0.8 
 13.0  6.4 -0.6 -5.2  1.7 -2.4 -0.4  7.6  0.8 -0.1  8.5  0.7  2.8 -1.8  1.4  3.4 -2.0 -2.9 -5.3  1.4 
 12.4  6.5 -0.6 -4.9  1.7 -2.1 -0.6  6.9  0.8 -0.1  7.9  0.7  2.5 -1.7  1.3  3.1 -1.8 -3.0 -4.9  1.3 
 14.9  7.8 -1.0 -6.1  2.0 -2.6 -0.6  8.4  0.9 -0.2  9.3  1.0  3.0 -2.0  1.6  4.0 -2.1 -3.6 -5.9  1.6 
 17.0  9.0 -1.2 -6.8  2.2 -3.0 -1.1  9.8  1.0 -0.2  10.6  1.4  3.3 -2.3  1.8  4.9 -2.5 -4.3 -6.8  1.9 
 18.2  9.7 -1.4 -7.6  2.3 -3.2 -1.1  10.4  1.1 -0.1  11.0  1.3  3.3 -2.5  1.9  5.2 -2.7 -4.7 -7.2  2.1 
Minimum distance of calculation. 
true answer: 5 
indices: 6 
distance: 3.1285214
---
Target calculation: 2+7-1
pred: tensor([6, 6, 6, 6, 4, 2, 6, 6, 6, 6, 4, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 2, 4, 6, 6, 6, 6, 6, 6, 4, 6, 6, 6]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  2  0  6  0 56  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.031 0.    0.094 0.    0.875 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 2.1  0.6  0.3 -0.2  0.7 -0.2  0.3  1.1  0.3 -0.2  2.8 -0.2  1.7  0.0  0.2  0.3 -0.2 -0.1 -0.9 -0.0 
 4.3  1.6  0.2 -1.1  1.0 -0.6  0.1  2.4  0.5 -0.2  3.8 -0.0  1.8 -0.3  0.5  0.7 -0.6 -0.7 -1.7  0.3 
 6.0  2.6  0.0 -1.9  1.1 -1.0  0.0  3.5  0.6 -0.2  4.6  0.2  1.9 -0.6  0.7  1.0 -1.0 -1.3 -2.4  0.5 
 8.8  4.2 -0.2 -3.1  1.4 -1.4 -0.1  5.0  0.7 -0.3  6.1  0.5  2.1 -1.0  1.0  1.9 -1.3 -1.9 -3.5  0.8 
 13.0  6.4 -0.6 -5.2  1.7 -2.4 -0.4  7.6  0.8 -0.1  8.5  0.7  2.8 -1.8  1.4  3.4 -2.0 -2.9 -5.3  1.4 
 12.4  6.5 -0.6 -4.9  1.7 -2.1 -0.6  6.9  0.8 -0.1  7.9  0.7  2.5 -1.7  1.3  3.1 -1.8 -3.0 -4.9  1.3 
 14.9  7.8 -1.0 -6.1  2.0 -2.6 -0.6  8.4  0.9 -0.2  9.3  1.0  3.0 -2.0  1.6  4.0 -2.1 -3.6 -5.9  1.6 
 17.0  9.0 -1.2 -6.8  2.2 -3.0 -1.1  9.8  1.0 -0.2  10.6  1.4  3.3 -2.3  1.8  4.9 -2.5 -4.3 -6.8  1.9 
 18.2  9.7 -1.4 -7.6  2.3 -3.2 -1.1  10.4  1.1 -0.1  11.0  1.3  3.3 -2.5  1.9  5.2 -2.7 -4.7 -7.2  2.1 
Minimum distance of calculation. 
true answer: 8 
indices: 8 
distance: 0.79091626
---
Target calculation: 2+7-2
pred: tensor([6, 6, 6, 4, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 2]) 
tar: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  3  0  3  0 58  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.047 0.    0.047 0.    0.906 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 2.1  0.6  0.3 -0.2  0.7 -0.2  0.3  1.1  0.3 -0.2  2.8 -0.2  1.7  0.0  0.2  0.3 -0.2 -0.1 -0.9 -0.0 
 4.3  1.6  0.2 -1.1  1.0 -0.6  0.1  2.4  0.5 -0.2  3.8 -0.0  1.8 -0.3  0.5  0.7 -0.6 -0.7 -1.7  0.3 
 6.0  2.6  0.0 -1.9  1.1 -1.0  0.0  3.5  0.6 -0.2  4.6  0.2  1.9 -0.6  0.7  1.0 -1.0 -1.3 -2.4  0.5 
 8.8  4.2 -0.2 -3.1  1.4 -1.4 -0.1  5.0  0.7 -0.3  6.1  0.5  2.1 -1.0  1.0  1.9 -1.3 -1.9 -3.5  0.8 
 13.0  6.4 -0.6 -5.2  1.7 -2.4 -0.4  7.6  0.8 -0.1  8.5  0.7  2.8 -1.8  1.4  3.4 -2.0 -2.9 -5.3  1.4 
 12.4  6.5 -0.6 -4.9  1.7 -2.1 -0.6  6.9  0.8 -0.1  7.9  0.7  2.5 -1.7  1.3  3.1 -1.8 -3.0 -4.9  1.3 
 14.9  7.8 -1.0 -6.1  2.0 -2.6 -0.6  8.4  0.9 -0.2  9.3  1.0  3.0 -2.0  1.6  4.0 -2.1 -3.6 -5.9  1.6 
 17.0  9.0 -1.2 -6.8  2.2 -3.0 -1.1  9.8  1.0 -0.2  10.6  1.4  3.3 -2.3  1.8  4.9 -2.5 -4.3 -6.8  1.9 
 18.2  9.7 -1.4 -7.6  2.3 -3.2 -1.1  10.4  1.1 -0.1  11.0  1.3  3.3 -2.5  1.9  5.2 -2.7 -4.7 -7.2  2.1 
Minimum distance of calculation. 
true answer: 7 
indices: 7 
distance: 1.2474328e-06
---
Target calculation: 3+3-3
pred: tensor([2, 2, 6, 2, 6, 2, 6, 4, 6, 4, 4, 4, 6, 2, 2, 6, 6, 6, 2, 6, 2, 6, 2, 2,
        4, 6, 6, 2, 2, 2, 2, 6, 6, 4, 6, 4, 6, 4, 6, 6, 6, 6, 2, 6, 4, 6, 4, 2,
        6, 6, 6, 4, 2, 2, 6, 6, 6, 4, 2, 2, 4, 2, 6, 4]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0 21  0 14  0 29  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.328 0.    0.219 0.    0.453 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 2.1  0.6  0.3 -0.2  0.7 -0.2  0.3  1.1  0.3 -0.2  2.8 -0.2  1.7  0.0  0.2  0.3 -0.2 -0.1 -0.9 -0.0 
 4.3  1.6  0.2 -1.1  1.0 -0.6  0.1  2.4  0.5 -0.2  3.8 -0.0  1.8 -0.3  0.5  0.7 -0.6 -0.7 -1.7  0.3 
 6.0  2.6  0.0 -1.9  1.1 -1.0  0.0  3.5  0.6 -0.2  4.6  0.2  1.9 -0.6  0.7  1.0 -1.0 -1.3 -2.4  0.5 
 8.8  4.2 -0.2 -3.1  1.4 -1.4 -0.1  5.0  0.7 -0.3  6.1  0.5  2.1 -1.0  1.0  1.9 -1.3 -1.9 -3.5  0.8 
 13.0  6.4 -0.6 -5.2  1.7 -2.4 -0.4  7.6  0.8 -0.1  8.5  0.7  2.8 -1.8  1.4  3.4 -2.0 -2.9 -5.3  1.4 
 12.4  6.5 -0.6 -4.9  1.7 -2.1 -0.6  6.9  0.8 -0.1  7.9  0.7  2.5 -1.7  1.3  3.1 -1.8 -3.0 -4.9  1.3 
 14.9  7.8 -1.0 -6.1  2.0 -2.6 -0.6  8.4  0.9 -0.2  9.3  1.0  3.0 -2.0  1.6  4.0 -2.1 -3.6 -5.9  1.6 
 17.0  9.0 -1.2 -6.8  2.2 -3.0 -1.1  9.8  1.0 -0.2  10.6  1.4  3.3 -2.3  1.8  4.9 -2.5 -4.3 -6.8  1.9 
 18.2  9.7 -1.4 -7.6  2.3 -3.2 -1.1  10.4  1.1 -0.1  11.0  1.3  3.3 -2.5  1.9  5.2 -2.7 -4.7 -7.2  2.1 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 0.0
---
Target calculation: 3+5-2
pred: tensor([6, 6, 6, 6, 2, 6, 6, 6, 2, 6, 6, 6, 6, 6, 6, 6, 2, 4, 6, 6, 6, 6, 4, 6,
        6, 6, 2, 6, 6, 6, 6, 6, 4, 4, 6, 6, 4, 6, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6,
        6, 6, 6, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(53) 
Accuracy (ratio) tensor(0.8281)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  5  0  6  0 53  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.078 0.    0.094 0.    0.828 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 2.1  0.6  0.3 -0.2  0.7 -0.2  0.3  1.1  0.3 -0.2  2.8 -0.2  1.7  0.0  0.2  0.3 -0.2 -0.1 -0.9 -0.0 
 4.3  1.6  0.2 -1.1  1.0 -0.6  0.1  2.4  0.5 -0.2  3.8 -0.0  1.8 -0.3  0.5  0.7 -0.6 -0.7 -1.7  0.3 
 6.0  2.6  0.0 -1.9  1.1 -1.0  0.0  3.5  0.6 -0.2  4.6  0.2  1.9 -0.6  0.7  1.0 -1.0 -1.3 -2.4  0.5 
 8.8  4.2 -0.2 -3.1  1.4 -1.4 -0.1  5.0  0.7 -0.3  6.1  0.5  2.1 -1.0  1.0  1.9 -1.3 -1.9 -3.5  0.8 
 13.0  6.4 -0.6 -5.2  1.7 -2.4 -0.4  7.6  0.8 -0.1  8.5  0.7  2.8 -1.8  1.4  3.4 -2.0 -2.9 -5.3  1.4 
 12.4  6.5 -0.6 -4.9  1.7 -2.1 -0.6  6.9  0.8 -0.1  7.9  0.7  2.5 -1.7  1.3  3.1 -1.8 -3.0 -4.9  1.3 
 14.9  7.8 -1.0 -6.1  2.0 -2.6 -0.6  8.4  0.9 -0.2  9.3  1.0  3.0 -2.0  1.6  4.0 -2.1 -3.6 -5.9  1.6 
 17.0  9.0 -1.2 -6.8  2.2 -3.0 -1.1  9.8  1.0 -0.2  10.6  1.4  3.3 -2.3  1.8  4.9 -2.5 -4.3 -6.8  1.9 
 18.2  9.7 -1.4 -7.6  2.3 -3.2 -1.1  10.4  1.1 -0.1  11.0  1.3  3.3 -2.5  1.9  5.2 -2.7 -4.7 -7.2  2.1 
Minimum distance of calculation. 
true answer: 6 
indices: 7 
distance: 0.7960254
---
Target calculation: 3+6-3
pred: tensor([4, 6, 6, 4, 6, 6, 2, 6, 4, 6, 6, 4, 6, 6, 6, 2, 6, 6, 6, 6, 2, 6, 4, 6,
        6, 6, 6, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4,
        6, 6, 6, 4, 2, 6, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(51) 
Accuracy (ratio) tensor(0.7969)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  6  0  7  0 51  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.094 0.    0.109 0.    0.797 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 2.1  0.6  0.3 -0.2  0.7 -0.2  0.3  1.1  0.3 -0.2  2.8 -0.2  1.7  0.0  0.2  0.3 -0.2 -0.1 -0.9 -0.0 
 4.3  1.6  0.2 -1.1  1.0 -0.6  0.1  2.4  0.5 -0.2  3.8 -0.0  1.8 -0.3  0.5  0.7 -0.6 -0.7 -1.7  0.3 
 6.0  2.6  0.0 -1.9  1.1 -1.0  0.0  3.5  0.6 -0.2  4.6  0.2  1.9 -0.6  0.7  1.0 -1.0 -1.3 -2.4  0.5 
 8.8  4.2 -0.2 -3.1  1.4 -1.4 -0.1  5.0  0.7 -0.3  6.1  0.5  2.1 -1.0  1.0  1.9 -1.3 -1.9 -3.5  0.8 
 13.0  6.4 -0.6 -5.2  1.7 -2.4 -0.4  7.6  0.8 -0.1  8.5  0.7  2.8 -1.8  1.4  3.4 -2.0 -2.9 -5.3  1.4 
 12.4  6.5 -0.6 -4.9  1.7 -2.1 -0.6  6.9  0.8 -0.1  7.9  0.7  2.5 -1.7  1.3  3.1 -1.8 -3.0 -4.9  1.3 
 14.9  7.8 -1.0 -6.1  2.0 -2.6 -0.6  8.4  0.9 -0.2  9.3  1.0  3.0 -2.0  1.6  4.0 -2.1 -3.6 -5.9  1.6 
 17.0  9.0 -1.2 -6.8  2.2 -3.0 -1.1  9.8  1.0 -0.2  10.6  1.4  3.3 -2.3  1.8  4.9 -2.5 -4.3 -6.8  1.9 
 18.2  9.7 -1.4 -7.6  2.3 -3.2 -1.1  10.4  1.1 -0.1  11.0  1.3  3.3 -2.5  1.9  5.2 -2.7 -4.7 -7.2  2.1 
Minimum distance of calculation. 
true answer: 6 
indices: 6 
distance: 1.2403146e-06
---
Target calculation: 5+3-5
pred: tensor([2, 2, 6, 2, 2, 2, 6, 6, 4, 6, 4, 6, 6, 6, 6, 2, 2, 6, 6, 2, 2, 4, 4, 6,
        6, 6, 2, 2, 4, 2, 4, 6, 6, 2, 4, 4, 6, 6, 2, 4, 2, 6, 6, 6, 2, 4, 4, 4,
        6, 2, 2, 6, 4, 6, 6, 2, 4, 4, 6, 4, 4, 6, 4, 6]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0 19  0 18  0 27  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.297 0.    0.281 0.    0.422 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 2.1  0.6  0.3 -0.2  0.7 -0.2  0.3  1.1  0.3 -0.2  2.8 -0.2  1.7  0.0  0.2  0.3 -0.2 -0.1 -0.9 -0.0 
 4.3  1.6  0.2 -1.1  1.0 -0.6  0.1  2.4  0.5 -0.2  3.8 -0.0  1.8 -0.3  0.5  0.7 -0.6 -0.7 -1.7  0.3 
 6.0  2.6  0.0 -1.9  1.1 -1.0  0.0  3.5  0.6 -0.2  4.6  0.2  1.9 -0.6  0.7  1.0 -1.0 -1.3 -2.4  0.5 
 8.8  4.2 -0.2 -3.1  1.4 -1.4 -0.1  5.0  0.7 -0.3  6.1  0.5  2.1 -1.0  1.0  1.9 -1.3 -1.9 -3.5  0.8 
 13.0  6.4 -0.6 -5.2  1.7 -2.4 -0.4  7.6  0.8 -0.1  8.5  0.7  2.8 -1.8  1.4  3.4 -2.0 -2.9 -5.3  1.4 
 12.4  6.5 -0.6 -4.9  1.7 -2.1 -0.6  6.9  0.8 -0.1  7.9  0.7  2.5 -1.7  1.3  3.1 -1.8 -3.0 -4.9  1.3 
 14.9  7.8 -1.0 -6.1  2.0 -2.6 -0.6  8.4  0.9 -0.2  9.3  1.0  3.0 -2.0  1.6  4.0 -2.1 -3.6 -5.9  1.6 
 17.0  9.0 -1.2 -6.8  2.2 -3.0 -1.1  9.8  1.0 -0.2  10.6  1.4  3.3 -2.3  1.8  4.9 -2.5 -4.3 -6.8  1.9 
 18.2  9.7 -1.4 -7.6  2.3 -3.2 -1.1  10.4  1.1 -0.1  11.0  1.3  3.3 -2.5  1.9  5.2 -2.7 -4.7 -7.2  2.1 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 6.2685757e-07
---
Target calculation: 9+7-8
pred: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 6,
        2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  3  0  2  0 59  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.047 0.    0.031 0.    0.922 0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
 2.1  0.6  0.3 -0.2  0.7 -0.2  0.3  1.1  0.3 -0.2  2.8 -0.2  1.7  0.0  0.2  0.3 -0.2 -0.1 -0.9 -0.0 
 4.3  1.6  0.2 -1.1  1.0 -0.6  0.1  2.4  0.5 -0.2  3.8 -0.0  1.8 -0.3  0.5  0.7 -0.6 -0.7 -1.7  0.3 
 6.0  2.6  0.0 -1.9  1.1 -1.0  0.0  3.5  0.6 -0.2  4.6  0.2  1.9 -0.6  0.7  1.0 -1.0 -1.3 -2.4  0.5 
 8.8  4.2 -0.2 -3.1  1.4 -1.4 -0.1  5.0  0.7 -0.3  6.1  0.5  2.1 -1.0  1.0  1.9 -1.3 -1.9 -3.5  0.8 
 13.0  6.4 -0.6 -5.2  1.7 -2.4 -0.4  7.6  0.8 -0.1  8.5  0.7  2.8 -1.8  1.4  3.4 -2.0 -2.9 -5.3  1.4 
 12.4  6.5 -0.6 -4.9  1.7 -2.1 -0.6  6.9  0.8 -0.1  7.9  0.7  2.5 -1.7  1.3  3.1 -1.8 -3.0 -4.9  1.3 
 14.9  7.8 -1.0 -6.1  2.0 -2.6 -0.6  8.4  0.9 -0.2  9.3  1.0  3.0 -2.0  1.6  4.0 -2.1 -3.6 -5.9  1.6 
 17.0  9.0 -1.2 -6.8  2.2 -3.0 -1.1  9.8  1.0 -0.2  10.6  1.4  3.3 -2.3  1.8  4.9 -2.5 -4.3 -6.8  1.9 
 18.2  9.7 -1.4 -7.6  2.3 -3.2 -1.1  10.4  1.1 -0.1  11.0  1.3  3.3 -2.5  1.9  5.2 -2.7 -4.7 -7.2  2.1 
Minimum distance of calculation. 
true answer: 8 
indices: 7 
distance: 1.9149331
---
pred: tensor([6, 6, 2, 4, 4, 2, 4, 4, 6, 4, 4, 3, 4, 4, 2, 6, 2, 6, 2, 2, 6, 6, 6, 4,
        6, 4, 2, 2, 6, 6, 6, 6, 4, 2, 2, 6, 6, 6, 2, 4, 6, 2, 6, 6, 2, 2, 6, 2,
        6, 6, 2, 6, 4, 6, 6, 6, 4, 6, 6, 6, 4, 6, 6, 4, 6, 2, 6, 4, 4, 6, 2, 2,
        6, 6, 2, 6, 6, 2, 6, 4, 6, 4, 4, 6, 6, 4, 2, 6, 2, 4, 2, 4, 6, 6, 6, 6,
        6, 6, 2, 6, 6, 6, 4, 2, 6, 6, 6, 3, 6, 2, 2, 6, 2, 4, 6, 6, 6, 4, 6, 2,
        2, 6, 6, 6, 4, 6, 6, 6, 2, 4, 4, 6, 2, 2, 6, 6, 6, 6, 6, 6, 6, 2, 6, 4,
        4, 6, 6, 6, 6, 2, 6, 4, 6, 6, 6, 6, 6, 2, 6, 2, 6, 2, 6, 6, 4, 6, 6, 6,
        6, 6, 6, 6, 2, 6, 6, 2, 2, 6, 3, 6, 6, 2, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6,
        4, 6, 6, 6, 6, 4, 4, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 4, 6,
        6, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 4, 6, 6, 6, 6, 6, 2,
        2, 6, 6, 6, 6, 4, 2, 4, 6, 6, 2, 2, 4, 2, 2, 2, 6, 6, 6, 6, 6, 2, 4, 6,
        6, 6, 6, 4, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 6, 4, 2, 6,
        6, 6, 6, 6, 6, 4, 6, 6, 6, 2, 6, 6, 2, 4, 6, 6, 6, 4, 6, 2, 4, 6, 6, 6,
        6, 2, 6, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 4, 6, 4, 2,
        6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 2, 6, 4, 4, 2, 6, 6, 4, 6, 6, 2, 6, 6, 6,
        6, 4, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 2, 6, 6, 6, 2, 6,
        2, 2, 6, 6, 6, 6, 6, 2, 4, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]) 
tar: tensor([1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 7, 6, 5,
        4, 3, 2, 1, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1, 4, 2, 1, 5, 3, 2, 1, 6, 4,
        3, 2, 1, 7, 5, 4, 3, 2, 1, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3, 2, 1,
        8, 7, 6, 5, 4, 3, 2, 3, 2, 4, 3, 1, 5, 4, 2, 1, 6, 5, 3, 2, 1, 7, 6, 4,
        3, 2, 1, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3,
        2, 8, 7, 6, 5, 4, 3, 4, 3, 2, 5, 4, 3, 1, 6, 5, 4, 2, 1, 7, 6, 5, 3, 2,
        1, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 9,
        7, 6, 5, 4, 3, 8, 7, 6, 5, 4, 5, 4, 3, 2, 6, 5, 4, 3, 1, 7, 6, 5, 4, 2,
        1, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 9,
        8, 6, 5, 4, 3, 9, 7, 6, 5, 4, 8, 7, 6, 5, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3,
        1, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 9,
        8, 7, 5, 4, 3, 9, 8, 6, 5, 4, 9, 7, 6, 5, 8, 7, 6, 7, 6, 5, 4, 3, 2, 8,
        7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 9, 8, 7,
        6, 4, 3, 9, 8, 7, 5, 4, 9, 8, 6, 5, 9, 7, 6, 8, 7, 8, 7, 6, 5, 4, 3, 2,
        9, 8, 7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 9, 8, 7, 6, 5, 3, 9, 8, 7,
        6, 4, 9, 8, 7, 5, 9, 8, 6, 9, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 9, 8, 7, 6,
        5, 4, 3, 9, 8, 7, 6, 5, 4, 9, 8, 7, 6, 5, 9, 8, 7, 6, 9, 8, 7, 9, 8, 9])
Accuracy (count): tensor(73) 
Accuracy (ratio) tensor(0.1789)
Accuracy:
 [[ 0 15  0 10  0 11  0  0  0]
 [ 0 15  0  9  0 19  0  0  0]
 [ 0 18  0 10  0 20  0  0  0]
 [ 0  5  1 15  0 30  0  0  0]
 [ 0  7  1 14  0 30  0  0  0]
 [ 0  7  0  1  0 43  0  0  0]
 [ 0  5  0  1  0 42  0  0  0]
 [ 0  2  1  1  0 39  0  0  0]
 [ 0  0  0  0  0 36  0  0  0]]
Accuracy:
 [[0.    0.417 0.    0.278 0.    0.306 0.    0.    0.   ]
 [0.    0.349 0.    0.209 0.    0.442 0.    0.    0.   ]
 [0.    0.375 0.    0.208 0.    0.417 0.    0.    0.   ]
 [0.    0.098 0.02  0.294 0.    0.588 0.    0.    0.   ]
 [0.    0.135 0.019 0.269 0.    0.577 0.    0.    0.   ]
 [0.    0.137 0.    0.02  0.    0.843 0.    0.    0.   ]
 [0.    0.104 0.    0.021 0.    0.875 0.    0.    0.   ]
 [0.    0.047 0.023 0.023 0.    0.907 0.    0.    0.   ]
 [0.    0.    0.    0.    0.    1.    0.    0.    0.   ]]
results (all): {'reconst_1x1_avg': 0.1171875, 'reconst_1x1_all': nan, 'cross_0x1_avg': 0.1484375, 'cross_0x1_all': nan, 'cluster_avg': -0.28477955, 'cluster_all': array([-0.58148384,  0.3496083 ,  0.04160522, ..., -0.04081953,
       -0.5783052 ,  0.33985388], dtype=float32), 'magnitude_avg': 0.9578657518038651, 'magnitude_all': 0.9578657518038651, 'tsne-2d_avg': nan, 'tsne-2d_all': nan, 'mathematics_1+1-1_avg': 0.0, 'mathematics_1+1-1_all': nan, 'mathematics_1+9-8_avg': 0.484375, 'mathematics_1+9-8_all': nan, 'mathematics_1+8-4_avg': 0.0, 'mathematics_1+8-4_all': nan, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-1_all': nan, 'mathematics_2+7-2_avg': 0.0, 'mathematics_2+7-2_all': nan, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+3-3_all': nan, 'mathematics_3+5-2_avg': 0.828125, 'mathematics_3+5-2_all': nan, 'mathematics_3+6-3_avg': 0.796875, 'mathematics_3+6-3_all': nan, 'mathematics_5+3-5_avg': 0.0, 'mathematics_5+3-5_all': nan, 'mathematics_9+7-8_avg': 0.0, 'mathematics_9+7-8_all': nan, 'mathematics_avg': 0.17892156541347504, 'mathematics_all': nan}
results (only averages): {'id': 'mmvae_cmnist_oscn_seed_3', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 1, 'target_property': 1, 'reconst_1x1_avg': 0.1171875, 'cross_0x1_avg': 0.1484375, 'cluster_avg': -0.28477955, 'magnitude_avg': 0.9578657518038651, 'tsne-2d_avg': nan, 'mathematics_1+1-1_avg': 0.0, 'mathematics_1+9-8_avg': 0.484375, 'mathematics_1+8-4_avg': 0.0, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-2_avg': 0.0, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+5-2_avg': 0.828125, 'mathematics_3+6-3_avg': 0.796875, 'mathematics_5+3-5_avg': 0.0, 'mathematics_9+7-8_avg': 0.0, 'mathematics_avg': 0.17892156541347504}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([8, 2, 7, 8, 9, 9, 9, 5, 8, 1, 6, 3, 2, 6, 8, 6, 9, 7, 1, 1, 8, 9, 2, 4,
        5, 6, 7, 4, 9, 4, 1, 4, 9, 6, 8, 5, 1, 4, 1, 9, 1, 9, 1, 1, 7, 9, 2, 8,
        4, 4, 8, 2, 8, 9, 7, 6, 1, 7, 8, 5, 3, 7, 4, 8, 9, 2, 8, 1, 9, 5, 3, 1,
        4, 6, 6, 2, 5, 2, 8, 1, 8, 5, 7, 4, 1, 5, 6, 7, 6, 2, 8, 3, 8, 6, 9, 8,
        7, 5, 4, 2, 9, 3, 7, 8, 6, 4, 1, 9, 7, 6, 9, 7, 1, 3, 9, 3, 1, 1, 3, 6,
        4, 7, 9, 9, 6, 3, 6, 3]), ['r8s', 'b2t', 'g7s', 'g8t', 'b9s', 'r9t', 'r9j', 'w5s', 'g8t', 'g1t', 'r6t', 'w3j', 'w2t', 'w6t', 'r8t', 'b6s', 'w9s', 'w7j', 'b1t', 'w1t', 'w8t', 'b9s', 'b2s', 'w4j', 'r5t', 'r6s', 'r7s', 'w4j', 'w9s', 'g4t', 'g1j', 'r4s', 'g9t', 'w6j', 'w8t', 'r5s', 'w1t', 'r4s', 'b1t', 'w9t', 'w1j', 'r9s', 'g1t', 'g1t', 'r7j', 'g9j', 'w2s', 'w8s', 'w4j', 'g4t', 'w8t', 'r2s', 'b8t', 'w9j', 'g7s', 'b6t', 'w1j', 'w7t', 'w8j', 'b5j', 'r3s', 'b7t', 'r4t', 'b8j', 'g9s', 'r2s', 'b8t', 'b1s', 'r9j', 'r5j', 'w3s', 'w1j', 'w4t', 'w6s', 'r6s', 'r2t', 'b5s', 'w2t', 'g8j', 'b1t', 'b8j', 'g5j', 'w7j', 'g4s', 'g1t', 'r5s', 'g6s', 'w7j', 'w6s', 'g2t', 'b8t', 'g3j', 'g8j', 'b6s', 'r9j', 'b8t', 'b7j', 'r5s', 'g4t', 'g2s', 'b9t', 'r3j', 'g7j', 'g8t', 'w6j', 'g4t', 'b1t', 'w9j', 'r7t', 'b6s', 'g9t', 'w7j', 'w1t', 'b3j', 'g9j', 'g3t', 'b1j', 'r1s', 'g3t', 'w6s', 'b4t', 'g7j', 'r9s', 'w9s', 'b6s', 'g3s', 'w6t', 'r3j']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 1 
Target property: 2 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3/analyse/1_2 
Number of category 3 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2} 
Start index: 0 
End index: 3 
withzero: False
---
Silhouette values: [-0.04547035  0.57339054  0.05801621 ...  0.04984896  0.0212973
  0.56918883]
Average of silhouette coef: 0.102499016
---

Distance matrix between labels.
  0   1   2
0 0.0 33.0 10.4 
1 33.0 0.0 41.4 
2 10.4 41.4 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 1] 
Latent embbeding: [32.974422, 10.371019, 41.42318] 
Flatten array: [[ 0.          0.        ]
 [ 1.         32.97442245]
 [ 2.         10.37101936]
 [ 0.          0.        ]
 [ 1.         41.42317963]
 [ 0.          0.        ]]
Correlation: [[ 1.         -0.96476226]
 [-0.96476226  1.        ]]
---
[[], [], []] [1 2 1 ... 1 1 2] [[-36.11394   -55.906807 ]
 [-20.0758      1.1234332]
 [ 41.290943  -15.91781  ]
 ...
 [ 40.64665   -14.56046  ]
 [ 39.97594   -13.799032 ]
 [  2.5303254 -23.05711  ]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3/analyse/1_2/latent__1_2.svg
results (all): {'cluster_avg': 0.102499016, 'cluster_all': array([-0.04547035,  0.57339054,  0.05801621, ...,  0.04984896,
        0.0212973 ,  0.56918883], dtype=float32), 'magnitude_avg': 0.9647622637753401, 'magnitude_all': -0.9647622637753401, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'mmvae_cmnist_oscn_seed_3', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 1, 'target_property': 2, 'cluster_avg': 0.102499016, 'magnitude_avg': 0.9647622637753401, 'tsne-2d_avg': nan}
Arguments (initial):
{'pretrained_path': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn',
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'analyse'}
args are updated using pretrained_path:
 {'experiment': 'test_loop_1', 'model': 'MMVAE_CMNIST_OSCN', 'run_type': 'train', 'seed': 4, 'num_hidden_layers': 2, 'use_conditional': False, 'use_cnn': False, 'latent_dim': 20, 'obj': 'dreg', 'batch_size': 128, 'epochs': 3, 'K': 20, 'learn_prior': False, 'llik_scaling': 0.0, 'logp': False, 'looser': False, 'print_freq': 100, 'no_analytics': False, 'no_cuda': False, 'run_id': 'test_mmvae_cmnist_oscn', 'pretrained_path': '', 'run_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn', 'output_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/train', 'device': 'cuda'}
Parameters were loaded for classifier
Run ID:
 mmvae_cmnist_oscn_seed_4
Run Directory:
 ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'MMVAE_CMNIST_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'dreg',
 'output_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn',
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'MMVAE_CMNIST_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'dreg',
 'output_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn',
 'run_id': 'test_mmvae_cmnist_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
Encoder based on MLP was constructed.
Decoder based on MLP was constructed.
Print of model summary was skipped because 'MMVAE_CMNIST_OSCN' object has no attribute 'data_size'
Loading model MMVAE_CMNIST_OSCN from ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4

length of cmnist and oscn dataset (train): 240000 
length of cmnist and oscn dataset (test): 8000

length of dataset (train): 240000 
length of dataset (test): 8000
objectives: m_dreg 
t_objectives: m_iwae


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_CMNIST',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_CMNIST/test_classifier_cmnist',
 'run_id': 'test_classifier_cmnist',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]         941,200
              ReLU-2                  [-1, 400]               0
            Linear-3                   [-1, 20]           8,020
            Linear-4                   [-1, 20]           8,020
            EncMLP-5       [[-1, 20], [-1, 20]]               0
            Linear-6                    [-1, 9]             189
================================================================
Total params: 957,429
Trainable params: 957,429
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.00
Params size (MB): 3.65
Estimated Total Size (MB): 3.66
----------------------------------------------------------------
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: cross 
t_objectives: cross


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([5, 9, 8, 7, 9, 5, 3, 1, 1, 4, 7, 5, 6, 4, 2, 6, 2, 2, 4, 8, 3, 5, 4, 8,
        4, 3, 8, 4, 6, 3, 9, 7, 6, 2, 7, 7, 1, 4, 8, 6, 9, 1, 6, 2, 3, 3, 3, 9,
        7, 9, 5, 8, 7, 2, 6, 1, 7, 4, 1, 4, 1, 1, 8, 1, 6, 1, 5, 8, 2, 8, 4, 3,
        3, 6, 5, 2, 6, 6, 9, 4, 2, 4, 5, 3, 4, 4, 7, 3, 7, 8, 4, 3, 3, 5, 2, 9,
        7, 5, 4, 9, 5, 2, 6, 1, 9, 9, 9, 1, 2, 7, 7, 4, 8, 3, 7, 8, 9, 7, 3, 4,
        9, 9, 1, 9, 2, 7, 5, 7]), ['b5s', 'g9t', 'b8j', 'g7t', 'g9t', 'w5t', 'r3t', 'r1j', 'g1s', 'g4j', 'r7j', 'g5j', 'r6s', 'b4s', 'r2t', 'w6s', 'r2j', 'w2s', 'r4j', 'r8j', 'r3s', 'r5j', 'r4j', 'g8t', 'b4t', 'b3s', 'g8t', 'g4t', 'w6j', 'r3s', 'w9t', 'g7s', 'g6s', 'w2s', 'g7j', 'w7s', 'r1t', 'w4s', 'b8t', 'r6j', 'r9j', 'b1s', 'w6j', 'b2t', 'w3j', 'r3t', 'r3s', 'b9t', 'r7t', 'g9t', 'w5s', 'g8j', 'r7s', 'r2s', 'w6s', 'r1s', 'g7s', 'r4s', 'g1s', 'g4s', 'w1s', 'r1t', 'w8s', 'b1j', 'b6s', 'r1j', 'w5t', 'w8t', 'g2s', 'w8s', 'w4t', 'r3s', 'b3s', 'g6t', 'b5j', 'w2t', 'r6s', 'b6j', 'b9s', 'g4t', 'b2t', 'r4s', 'w5t', 'b3t', 'w4s', 'r4j', 'w7t', 'w3t', 'r7t', 'b8j', 'b4s', 'b3t', 'g3s', 'r5t', 'g2j', 'g9s', 'w7j', 'w5s', 'b4t', 'b9s', 'b5t', 'w2s', 'r6t', 'r1j', 'r9t', 'g9t', 'w9j', 'w1j', 'r2j', 'b7j', 'b7j', 'r4t', 'r8t', 'w3j', 'b7t', 'r8s', 'g9t', 'b7s', 'b3j', 'b4s', 'g9t', 'r9t', 'g1s', 'b9j', 'b2t', 'b7t', 'g5j', 'b7t']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 0 
Target property: 0 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4/analyse/0_0 
Number of category 4 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2, 3} 
Start index: 0 
End index: 4 
withzero: False
---
Silhouette values: [0.21579197 0.27922586 0.2737396  ... 0.28743264 0.24436381 0.11042601]
Average of silhouette coef: 0.15261474
---

Distance matrix between labels.
  0   1   2   3
0 0.0 4.2 3.6 4.0 
1 4.2 0.0 3.6 4.0 
2 3.6 3.6 0.0 3.8 
3 4.0 4.0 3.8 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 1, 2, 1] 
Latent embbeding: [4.1740336, 3.6033137, 3.9972985, 3.5923703, 3.960763, 3.7521892] 
Flatten array: [[0.         0.        ]
 [1.         4.17403364]
 [2.         3.60331368]
 [3.         3.99729848]
 [0.         0.        ]
 [1.         3.59237027]
 [2.         3.96076298]
 [0.         0.        ]
 [1.         3.75218916]
 [0.         0.        ]]
Correlation: [[1.         0.17945242]
 [0.17945242 1.        ]]
---
[[], [], [], []] [1 2 1 ... 3 3 3] [[  9.857486   48.576023 ]
 [  7.6551747 -55.05736  ]
 [ 14.7383795  60.217705 ]
 ...
 [-48.609127   14.944034 ]
 [-60.33074    -4.8475556]
 [-65.42299   -17.632576 ]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4/analyse/0_0/latent__0_0.svg
results (all): {'cluster_avg': 0.15261474, 'cluster_all': array([0.21579197, 0.27922586, 0.2737396 , ..., 0.28743264, 0.24436381,
       0.11042601], dtype=float32), 'magnitude_avg': 0.1794524235205721, 'magnitude_all': 0.1794524235205721, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'mmvae_cmnist_oscn_seed_4', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 0, 'target_property': 0, 'cluster_avg': 0.15261474, 'magnitude_avg': 0.1794524235205721, 'tsne-2d_avg': nan}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([6, 9, 7, 1, 4, 5, 7, 3, 4, 2, 8, 3, 9, 9, 2, 1, 1, 7, 2, 3, 9, 3, 7, 4,
        8, 7, 2, 1, 1, 3, 9, 3, 2, 2, 7, 6, 3, 4, 7, 1, 8, 7, 1, 6, 6, 4, 6, 1,
        9, 7, 2, 7, 9, 1, 3, 4, 5, 3, 6, 2, 9, 6, 2, 2, 2, 6, 5, 6, 9, 1, 8, 6,
        7, 3, 9, 5, 3, 8, 4, 2, 5, 8, 8, 7, 9, 3, 1, 6, 4, 7, 6, 9, 2, 7, 1, 7,
        3, 5, 3, 3, 8, 9, 4, 5, 9, 6, 5, 8, 5, 5, 6, 9, 4, 8, 7, 9, 8, 2, 4, 2,
        9, 8, 7, 8, 6, 5, 1, 5]), ['r6s', 'w9t', 'w7s', 'r1t', 'w4j', 'b5s', 'b7s', 'w3t', 'r4t', 'w2t', 'r8s', 'r3t', 'b9s', 'b9t', 'w2j', 'b1s', 'b1s', 'r7t', 'b2s', 'b3t', 'w9j', 'r3s', 'b7s', 'r4t', 'w8t', 'b7j', 'g2j', 'w1s', 'b1t', 'w3s', 'r9s', 'r3s', 'w2j', 'b2s', 'r7t', 'w6s', 'b3s', 'w4s', 'b7t', 'b1j', 'g8s', 'w7s', 'w1t', 'g6s', 'b6t', 'b4j', 'r6j', 'g1s', 'r9s', 'w7s', 'b2t', 'g7t', 'g9s', 'g1j', 'g3t', 'b4s', 'g5s', 'w3j', 'r6t', 'r2t', 'g9j', 'w6j', 'w2j', 'r2t', 'g2s', 'r6j', 'w5s', 'w6t', 'g9j', 'w1t', 'r8j', 'g6s', 'b7j', 'b3t', 'g9j', 'g5j', 'g3s', 'r8t', 'b4j', 'r2j', 'g5j', 'r8s', 'r8j', 'r7t', 'b9j', 'g3j', 'b1s', 'r6t', 'r4j', 'g7s', 'r6s', 'w9s', 'g2s', 'w7t', 'b1t', 'g7s', 'b3s', 'b5t', 'r3j', 'r3t', 'b8t', 'b9s', 'g4j', 'g5s', 'r9s', 'g6t', 'g5s', 'w8t', 'w5t', 'w5s', 'r6s', 'b9t', 'r4s', 'g8j', 'b7s', 'r9t', 'w8j', 'r2s', 'b4t', 'b2s', 'b9s', 'b8s', 'w7j', 'b8j', 'b6j', 'g5s', 'w1s', 'g5t']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 0 
Target property: 1 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4/analyse/0_1 
Number of category 10 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {1, 2, 3, 4, 5, 6, 7, 8, 9} 
Start index: 1 
End index: 10 
withzero: False
---
size of extracted recon in MMVAE: <class 'list'>
size of extracted recon in MMVAE: torch.Size([1, 128, 3, 28, 28])
size of extracted recon in MMVAE: torch.Size([128, 3, 28, 28])
pred: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3]) 
tar: tensor([1, 7, 5, 4, 6, 2, 1, 9, 2, 4, 2, 8, 6, 8, 3, 4, 3, 2, 4, 6, 3, 4, 7, 1,
        5, 1, 5, 9, 1, 7, 3, 4, 3, 7, 1, 3, 5, 1, 6, 4, 1, 4, 2, 4, 8, 3, 2, 1,
        2, 7, 9, 2, 7, 3, 9, 7, 2, 9, 3, 7, 3, 8, 3, 5, 9, 3, 5, 8, 6, 8, 2, 3,
        6, 4, 7, 3, 2, 4, 6, 6, 5, 2, 5, 1, 2, 9, 5, 1, 3, 1, 4, 9, 4, 3, 7, 1,
        1, 2, 4, 4, 3, 8, 1, 6, 1, 9, 1, 5, 6, 3, 2, 8, 2, 9, 5, 8, 5, 1, 7, 4,
        4, 9, 2, 6, 7, 2, 9, 8])
Accuracy (count): tensor(18) 
Accuracy (ratio) tensor(0.1406)
Accuracy:
 [[ 0  0 18  0  0  0  0  0  0]
 [ 0  0 18  0  0  0  0  0  0]
 [ 0  0 18  0  0  0  0  0  0]
 [ 0  0 17  0  0  0  0  0  0]
 [ 0  0 12  0  0  0  0  0  0]
 [ 0  1 10  0  0  0  0  0  0]
 [ 0  0 12  0  0  0  0  0  0]
 [ 0  0 10  0  0  0  0  0  0]
 [ 0  0 12  0  0  0  0  0  0]]
Accuracy:
 [[0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.091 0.909 0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]]
---
size of extracted recon in MMVAE: <class 'list'>
size of extracted recon in MMVAE: torch.Size([1, 128, 3, 28, 28])
size of extracted recon in MMVAE: torch.Size([128, 3, 28, 28])
pred: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 2, 3, 3, 3]) 
tar: tensor([1, 7, 2, 3, 4, 5, 5, 2, 1, 2, 5, 3, 7, 5, 3, 4, 8, 3, 2, 1, 4, 3, 2, 1,
        8, 2, 5, 8, 1, 4, 3, 1, 9, 8, 6, 4, 2, 6, 9, 3, 6, 8, 4, 7, 7, 5, 3, 7,
        9, 7, 8, 8, 1, 4, 3, 3, 1, 1, 8, 3, 2, 3, 5, 3, 5, 9, 2, 9, 9, 6, 1, 1,
        7, 9, 3, 2, 6, 9, 8, 5, 1, 4, 8, 4, 6, 4, 1, 4, 7, 3, 4, 4, 2, 1, 9, 8,
        4, 1, 7, 6, 2, 2, 3, 3, 7, 7, 8, 4, 5, 8, 1, 9, 5, 7, 8, 5, 8, 6, 7, 8,
        7, 6, 9, 9, 5, 4, 5, 4])
Accuracy (count): tensor(17) 
Accuracy (ratio) tensor(0.1328)
Accuracy:
 [[ 0  0 16  0  0  0  0  0  0]
 [ 0  0 13  0  0  0  0  0  0]
 [ 0  0 17  0  0  0  0  0  0]
 [ 0  0 17  0  0  0  0  0  0]
 [ 0  1 13  0  0  0  0  0  0]
 [ 0  0  9  0  0  0  0  0  0]
 [ 0  0 14  0  0  0  0  0  0]
 [ 0  0 16  0  0  0  0  0  0]
 [ 0  0 12  0  0  0  0  0  0]]
Accuracy:
 [[0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.071 0.929 0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]]
---
Silhouette values: [ 0.149812   -0.07777821  0.15557407 ...  0.29056847  0.15216196
  0.21530442]
Average of silhouette coef: 0.054300822
---

Distance matrix between labels.
  1   2   3   4   5   6   7   8   9
1 0.0 4.4 4.8 6.2 5.4 5.8 5.8 6.1 6.5 
2 4.4 0.0 2.8 4.0 2.9 1.9 4.6 3.5 4.9 
3 4.8 2.8 0.0 4.8 1.6 3.9 4.2 2.4 4.9 
4 6.2 4.0 4.8 0.0 3.4 3.1 2.7 3.5 1.8 
5 5.4 2.9 1.6 3.4 0.0 3.3 3.0 1.4 3.6 
6 5.8 1.9 3.9 3.1 3.3 0.0 4.6 3.5 4.2 
7 5.8 4.6 4.2 2.7 3.0 4.6 0.0 3.1 2.2 
8 6.1 3.5 2.4 3.5 1.4 3.5 3.1 0.0 3.3 
9 6.5 4.9 4.9 1.8 3.6 4.2 2.2 3.3 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
Latent embbeding: [4.4431543, 4.8007436, 6.162807, 5.3661838, 5.7917466, 5.8215127, 6.082831, 6.4758143, 2.770601, 4.0067053, 2.91064, 1.9103451, 4.644424, 3.507417, 4.9019055, 4.760573, 1.6213577, 3.8564324, 4.198297, 2.4375515, 4.9085526, 3.4468641, 3.071781, 2.6785965, 3.540927, 1.78505, 3.2993128, 3.022049, 1.4048727, 3.616196, 4.616853, 3.4697685, 4.156018, 3.141183, 2.1790233, 3.263961] 
Flatten array: [[0.         0.        ]
 [1.         4.44315434]
 [2.         4.80074358]
 [3.         6.16280699]
 [4.         5.36618376]
 [5.         5.79174662]
 [6.         5.8215127 ]
 [7.         6.08283091]
 [8.         6.47581434]
 [0.         0.        ]
 [1.         2.77060103]
 [2.         4.00670528]
 [3.         2.91064   ]
 [4.         1.91034508]
 [5.         4.64442396]
 [6.         3.50741696]
 [7.         4.90190554]
 [0.         0.        ]
 [1.         4.76057291]
 [2.         1.62135768]
 [3.         3.85643244]
 [4.         4.19829702]
 [5.         2.4375515 ]
 [6.         4.90855265]
 [0.         0.        ]
 [1.         3.44686413]
 [2.         3.07178092]
 [3.         2.6785965 ]
 [4.         3.54092693]
 [5.         1.78505003]
 [0.         0.        ]
 [1.         3.29931283]
 [2.         3.02204895]
 [3.         1.40487266]
 [4.         3.61619592]
 [0.         0.        ]
 [1.         4.61685324]
 [2.         3.46976852]
 [3.         4.15601778]
 [0.         0.        ]
 [1.         3.1411829 ]
 [2.         2.17902327]
 [0.         0.        ]
 [1.         3.26396108]
 [0.         0.        ]]
Correlation: [[1.         0.41798807]
 [0.41798807 1.        ]]
---
[[], [], [], [], [], [], [], [], [], []] [6 9 7 ... 1 7 6] [[ -3.1475174  26.57532  ]
 [ 39.880016   -5.4210706]
 [ 48.702732  -17.913767 ]
 ...
 [ 15.302723  -72.47881  ]
 [ 46.349247  -16.838827 ]
 [ 13.602856   27.965132 ]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4/analyse/0_1/latent__0_1.svg
---
length of elements: 408 408
length of 1: 36
length of 2: 43
length of 3: 48
length of 4: 51
length of 5: 52
length of 6: 51
length of 7: 48
length of 8: 43
length of 9: 36
all elements:

[(1, (1, 2, 2)),
 (2, (1, 3, 2)),
 (1, (1, 3, 3)),
 (3, (1, 4, 2)),
 (2, (1, 4, 3)),
 (1, (1, 4, 4)),
 (4, (1, 5, 2)),
 (3, (1, 5, 3)),
 (2, (1, 5, 4)),
 (1, (1, 5, 5)),
 (5, (1, 6, 2)),
 (4, (1, 6, 3)),
 (3, (1, 6, 4)),
 (2, (1, 6, 5)),
 (1, (1, 6, 6)),
 (6, (1, 7, 2)),
 (5, (1, 7, 3)),
 (4, (1, 7, 4)),
 (3, (1, 7, 5)),
 (2, (1, 7, 6)),
 (1, (1, 7, 7)),
 (7, (1, 8, 2)),
 (6, (1, 8, 3)),
 (5, (1, 8, 4)),
 (4, (1, 8, 5)),
 (3, (1, 8, 6)),
 (2, (1, 8, 7)),
 (1, (1, 8, 8)),
 (8, (1, 9, 2)),
 (7, (1, 9, 3)),
 (6, (1, 9, 4)),
 (5, (1, 9, 5)),
 (4, (1, 9, 6)),
 (3, (1, 9, 7)),
 (2, (1, 9, 8)),
 (1, (1, 9, 9)),
 (2, (2, 1, 1)),
 (3, (2, 2, 1)),
 (1, (2, 2, 3)),
 (4, (2, 3, 1)),
 (2, (2, 3, 3)),
 (1, (2, 3, 4)),
 (5, (2, 4, 1)),
 (3, (2, 4, 3)),
 (2, (2, 4, 4)),
 (1, (2, 4, 5)),
 (6, (2, 5, 1)),
 (4, (2, 5, 3)),
 (3, (2, 5, 4)),
 (2, (2, 5, 5)),
 (1, (2, 5, 6)),
 (7, (2, 6, 1)),
 (5, (2, 6, 3)),
 (4, (2, 6, 4)),
 (3, (2, 6, 5)),
 (2, (2, 6, 6)),
 (1, (2, 6, 7)),
 (8, (2, 7, 1)),
 (6, (2, 7, 3)),
 (5, (2, 7, 4)),
 (4, (2, 7, 5)),
 (3, (2, 7, 6)),
 (2, (2, 7, 7)),
 (1, (2, 7, 8)),
 (9, (2, 8, 1)),
 (7, (2, 8, 3)),
 (6, (2, 8, 4)),
 (5, (2, 8, 5)),
 (4, (2, 8, 6)),
 (3, (2, 8, 7)),
 (2, (2, 8, 8)),
 (1, (2, 8, 9)),
 (8, (2, 9, 3)),
 (7, (2, 9, 4)),
 (6, (2, 9, 5)),
 (5, (2, 9, 6)),
 (4, (2, 9, 7)),
 (3, (2, 9, 8)),
 (2, (2, 9, 9)),
 (3, (3, 1, 1)),
 (2, (3, 1, 2)),
 (4, (3, 2, 1)),
 (3, (3, 2, 2)),
 (1, (3, 2, 4)),
 (5, (3, 3, 1)),
 (4, (3, 3, 2)),
 (2, (3, 3, 4)),
 (1, (3, 3, 5)),
 (6, (3, 4, 1)),
 (5, (3, 4, 2)),
 (3, (3, 4, 4)),
 (2, (3, 4, 5)),
 (1, (3, 4, 6)),
 (7, (3, 5, 1)),
 (6, (3, 5, 2)),
 (4, (3, 5, 4)),
 (3, (3, 5, 5)),
 (2, (3, 5, 6)),
 (1, (3, 5, 7)),
 (8, (3, 6, 1)),
 (7, (3, 6, 2)),
 (5, (3, 6, 4)),
 (4, (3, 6, 5)),
 (3, (3, 6, 6)),
 (2, (3, 6, 7)),
 (1, (3, 6, 8)),
 (9, (3, 7, 1)),
 (8, (3, 7, 2)),
 (6, (3, 7, 4)),
 (5, (3, 7, 5)),
 (4, (3, 7, 6)),
 (3, (3, 7, 7)),
 (2, (3, 7, 8)),
 (1, (3, 7, 9)),
 (9, (3, 8, 2)),
 (7, (3, 8, 4)),
 (6, (3, 8, 5)),
 (5, (3, 8, 6)),
 (4, (3, 8, 7)),
 (3, (3, 8, 8)),
 (2, (3, 8, 9)),
 (8, (3, 9, 4)),
 (7, (3, 9, 5)),
 (6, (3, 9, 6)),
 (5, (3, 9, 7)),
 (4, (3, 9, 8)),
 (3, (3, 9, 9)),
 (4, (4, 1, 1)),
 (3, (4, 1, 2)),
 (2, (4, 1, 3)),
 (5, (4, 2, 1)),
 (4, (4, 2, 2)),
 (3, (4, 2, 3)),
 (1, (4, 2, 5)),
 (6, (4, 3, 1)),
 (5, (4, 3, 2)),
 (4, (4, 3, 3)),
 (2, (4, 3, 5)),
 (1, (4, 3, 6)),
 (7, (4, 4, 1)),
 (6, (4, 4, 2)),
 (5, (4, 4, 3)),
 (3, (4, 4, 5)),
 (2, (4, 4, 6)),
 (1, (4, 4, 7)),
 (8, (4, 5, 1)),
 (7, (4, 5, 2)),
 (6, (4, 5, 3)),
 (4, (4, 5, 5)),
 (3, (4, 5, 6)),
 (2, (4, 5, 7)),
 (1, (4, 5, 8)),
 (9, (4, 6, 1)),
 (8, (4, 6, 2)),
 (7, (4, 6, 3)),
 (5, (4, 6, 5)),
 (4, (4, 6, 6)),
 (3, (4, 6, 7)),
 (2, (4, 6, 8)),
 (1, (4, 6, 9)),
 (9, (4, 7, 2)),
 (8, (4, 7, 3)),
 (6, (4, 7, 5)),
 (5, (4, 7, 6)),
 (4, (4, 7, 7)),
 (3, (4, 7, 8)),
 (2, (4, 7, 9)),
 (9, (4, 8, 3)),
 (7, (4, 8, 5)),
 (6, (4, 8, 6)),
 (5, (4, 8, 7)),
 (4, (4, 8, 8)),
 (3, (4, 8, 9)),
 (8, (4, 9, 5)),
 (7, (4, 9, 6)),
 (6, (4, 9, 7)),
 (5, (4, 9, 8)),
 (4, (4, 9, 9)),
 (5, (5, 1, 1)),
 (4, (5, 1, 2)),
 (3, (5, 1, 3)),
 (2, (5, 1, 4)),
 (6, (5, 2, 1)),
 (5, (5, 2, 2)),
 (4, (5, 2, 3)),
 (3, (5, 2, 4)),
 (1, (5, 2, 6)),
 (7, (5, 3, 1)),
 (6, (5, 3, 2)),
 (5, (5, 3, 3)),
 (4, (5, 3, 4)),
 (2, (5, 3, 6)),
 (1, (5, 3, 7)),
 (8, (5, 4, 1)),
 (7, (5, 4, 2)),
 (6, (5, 4, 3)),
 (5, (5, 4, 4)),
 (3, (5, 4, 6)),
 (2, (5, 4, 7)),
 (1, (5, 4, 8)),
 (9, (5, 5, 1)),
 (8, (5, 5, 2)),
 (7, (5, 5, 3)),
 (6, (5, 5, 4)),
 (4, (5, 5, 6)),
 (3, (5, 5, 7)),
 (2, (5, 5, 8)),
 (1, (5, 5, 9)),
 (9, (5, 6, 2)),
 (8, (5, 6, 3)),
 (7, (5, 6, 4)),
 (5, (5, 6, 6)),
 (4, (5, 6, 7)),
 (3, (5, 6, 8)),
 (2, (5, 6, 9)),
 (9, (5, 7, 3)),
 (8, (5, 7, 4)),
 (6, (5, 7, 6)),
 (5, (5, 7, 7)),
 (4, (5, 7, 8)),
 (3, (5, 7, 9)),
 (9, (5, 8, 4)),
 (7, (5, 8, 6)),
 (6, (5, 8, 7)),
 (5, (5, 8, 8)),
 (4, (5, 8, 9)),
 (8, (5, 9, 6)),
 (7, (5, 9, 7)),
 (6, (5, 9, 8)),
 (5, (5, 9, 9)),
 (6, (6, 1, 1)),
 (5, (6, 1, 2)),
 (4, (6, 1, 3)),
 (3, (6, 1, 4)),
 (2, (6, 1, 5)),
 (7, (6, 2, 1)),
 (6, (6, 2, 2)),
 (5, (6, 2, 3)),
 (4, (6, 2, 4)),
 (3, (6, 2, 5)),
 (1, (6, 2, 7)),
 (8, (6, 3, 1)),
 (7, (6, 3, 2)),
 (6, (6, 3, 3)),
 (5, (6, 3, 4)),
 (4, (6, 3, 5)),
 (2, (6, 3, 7)),
 (1, (6, 3, 8)),
 (9, (6, 4, 1)),
 (8, (6, 4, 2)),
 (7, (6, 4, 3)),
 (6, (6, 4, 4)),
 (5, (6, 4, 5)),
 (3, (6, 4, 7)),
 (2, (6, 4, 8)),
 (1, (6, 4, 9)),
 (9, (6, 5, 2)),
 (8, (6, 5, 3)),
 (7, (6, 5, 4)),
 (6, (6, 5, 5)),
 (4, (6, 5, 7)),
 (3, (6, 5, 8)),
 (2, (6, 5, 9)),
 (9, (6, 6, 3)),
 (8, (6, 6, 4)),
 (7, (6, 6, 5)),
 (5, (6, 6, 7)),
 (4, (6, 6, 8)),
 (3, (6, 6, 9)),
 (9, (6, 7, 4)),
 (8, (6, 7, 5)),
 (6, (6, 7, 7)),
 (5, (6, 7, 8)),
 (4, (6, 7, 9)),
 (9, (6, 8, 5)),
 (7, (6, 8, 7)),
 (6, (6, 8, 8)),
 (5, (6, 8, 9)),
 (8, (6, 9, 7)),
 (7, (6, 9, 8)),
 (6, (6, 9, 9)),
 (7, (7, 1, 1)),
 (6, (7, 1, 2)),
 (5, (7, 1, 3)),
 (4, (7, 1, 4)),
 (3, (7, 1, 5)),
 (2, (7, 1, 6)),
 (8, (7, 2, 1)),
 (7, (7, 2, 2)),
 (6, (7, 2, 3)),
 (5, (7, 2, 4)),
 (4, (7, 2, 5)),
 (3, (7, 2, 6)),
 (1, (7, 2, 8)),
 (9, (7, 3, 1)),
 (8, (7, 3, 2)),
 (7, (7, 3, 3)),
 (6, (7, 3, 4)),
 (5, (7, 3, 5)),
 (4, (7, 3, 6)),
 (2, (7, 3, 8)),
 (1, (7, 3, 9)),
 (9, (7, 4, 2)),
 (8, (7, 4, 3)),
 (7, (7, 4, 4)),
 (6, (7, 4, 5)),
 (5, (7, 4, 6)),
 (3, (7, 4, 8)),
 (2, (7, 4, 9)),
 (9, (7, 5, 3)),
 (8, (7, 5, 4)),
 (7, (7, 5, 5)),
 (6, (7, 5, 6)),
 (4, (7, 5, 8)),
 (3, (7, 5, 9)),
 (9, (7, 6, 4)),
 (8, (7, 6, 5)),
 (7, (7, 6, 6)),
 (5, (7, 6, 8)),
 (4, (7, 6, 9)),
 (9, (7, 7, 5)),
 (8, (7, 7, 6)),
 (6, (7, 7, 8)),
 (5, (7, 7, 9)),
 (9, (7, 8, 6)),
 (7, (7, 8, 8)),
 (6, (7, 8, 9)),
 (8, (7, 9, 8)),
 (7, (7, 9, 9)),
 (8, (8, 1, 1)),
 (7, (8, 1, 2)),
 (6, (8, 1, 3)),
 (5, (8, 1, 4)),
 (4, (8, 1, 5)),
 (3, (8, 1, 6)),
 (2, (8, 1, 7)),
 (9, (8, 2, 1)),
 (8, (8, 2, 2)),
 (7, (8, 2, 3)),
 (6, (8, 2, 4)),
 (5, (8, 2, 5)),
 (4, (8, 2, 6)),
 (3, (8, 2, 7)),
 (1, (8, 2, 9)),
 (9, (8, 3, 2)),
 (8, (8, 3, 3)),
 (7, (8, 3, 4)),
 (6, (8, 3, 5)),
 (5, (8, 3, 6)),
 (4, (8, 3, 7)),
 (2, (8, 3, 9)),
 (9, (8, 4, 3)),
 (8, (8, 4, 4)),
 (7, (8, 4, 5)),
 (6, (8, 4, 6)),
 (5, (8, 4, 7)),
 (3, (8, 4, 9)),
 (9, (8, 5, 4)),
 (8, (8, 5, 5)),
 (7, (8, 5, 6)),
 (6, (8, 5, 7)),
 (4, (8, 5, 9)),
 (9, (8, 6, 5)),
 (8, (8, 6, 6)),
 (7, (8, 6, 7)),
 (5, (8, 6, 9)),
 (9, (8, 7, 6)),
 (8, (8, 7, 7)),
 (6, (8, 7, 9)),
 (9, (8, 8, 7)),
 (7, (8, 8, 9)),
 (8, (8, 9, 9)),
 (9, (9, 1, 1)),
 (8, (9, 1, 2)),
 (7, (9, 1, 3)),
 (6, (9, 1, 4)),
 (5, (9, 1, 5)),
 (4, (9, 1, 6)),
 (3, (9, 1, 7)),
 (2, (9, 1, 8)),
 (9, (9, 2, 2)),
 (8, (9, 2, 3)),
 (7, (9, 2, 4)),
 (6, (9, 2, 5)),
 (5, (9, 2, 6)),
 (4, (9, 2, 7)),
 (3, (9, 2, 8)),
 (9, (9, 3, 3)),
 (8, (9, 3, 4)),
 (7, (9, 3, 5)),
 (6, (9, 3, 6)),
 (5, (9, 3, 7)),
 (4, (9, 3, 8)),
 (9, (9, 4, 4)),
 (8, (9, 4, 5)),
 (7, (9, 4, 6)),
 (6, (9, 4, 7)),
 (5, (9, 4, 8)),
 (9, (9, 5, 5)),
 (8, (9, 5, 6)),
 (7, (9, 5, 7)),
 (6, (9, 5, 8)),
 (9, (9, 6, 6)),
 (8, (9, 6, 7)),
 (7, (9, 6, 8)),
 (9, (9, 7, 7)),
 (8, (9, 7, 8)),
 (9, (9, 8, 8))]
i: 1
shape (20,)
i: 2
shape (20,)
i: 3
shape (20,)
i: 4
shape (20,)
i: 5
shape (20,)
i: 6
shape (20,)
i: 7
shape (20,)
i: 8
shape (20,)
i: 9
shape (20,)
mean_all: [None, array([-0.39168638, -3.560546  ,  0.4396541 ,  0.17493762, -0.29930404,
       -0.21116878,  0.22829013,  0.46572778,  0.5965467 ,  0.02923767,
       -0.51831406, -0.6859187 ,  0.0905865 ,  0.69856006,  0.07553872,
        0.43982998,  0.57660353, -0.31841856,  0.22883332, -0.27793232],
      dtype=float32), array([-0.2737149 , -0.20506279, -0.2766504 ,  0.5305805 , -0.45302105,
       -0.1157273 , -1.9575708 ,  0.34173325,  0.13476303,  0.21376851,
       -0.3282705 , -0.14949915, -0.29213396, -0.3128795 , -0.12155591,
        0.15096256, -0.3687681 , -0.7536602 ,  0.32523915, -0.06028619],
      dtype=float32), array([ 0.16397928,  0.30940112,  1.2477959 ,  0.12186116, -0.497464  ,
        0.83354944, -0.7891533 ,  0.01527965,  1.2852536 ,  0.42011404,
        0.11900439,  0.131369  , -0.95727235, -0.38479316, -0.33082125,
        0.0931015 ,  0.08651536, -0.7278112 ,  0.2613444 , -0.01320095],
      dtype=float32), array([ 0.29562664,  0.9539194 , -1.6974821 , -0.4909604 ,  0.05980935,
       -0.26251495, -0.28950754, -0.70772016, -0.02173855,  0.37159735,
       -1.782697  ,  0.46558934,  0.23774846, -1.4587487 ,  0.3409683 ,
        0.06381547,  0.04586926,  0.22704226, -0.963502  , -0.11222459],
      dtype=float32), array([ 0.28606865,  1.005289  ,  0.3275655 , -0.14058979, -0.34459472,
        0.7520498 , -0.4509239 , -0.00346198,  1.1241752 ,  0.37882927,
       -0.32713044,  0.39107102, -0.8078264 , -0.9434024 , -0.12759328,
        0.02719721,  0.14495966, -0.27831623, -0.16929846,  0.05082155],
      dtype=float32), array([-0.30541018,  0.5838883 , -0.9281977 ,  0.2932989 , -0.43013167,
       -0.3575084 , -2.5092602 , -0.15371172, -0.08855823,  0.34682956,
       -1.2043865 ,  0.26032755, -0.1446349 , -1.081981  , -0.02145842,
        0.07168779, -0.43690506, -0.41520226, -0.0860627 ,  0.06335533],
      dtype=float32), array([ 0.5169792 ,  1.1771991 , -0.35875532, -0.51231855, -0.03132616,
        0.10070682,  1.7133482 , -0.03093694,  0.16670914,  0.50208265,
       -1.3240322 ,  0.48683468,  0.06604975, -1.0296688 ,  0.0722689 ,
        0.08004712, -0.00179396,  0.20006362, -0.6160561 , -0.13557462],
      dtype=float32), array([ 0.618767  ,  1.4843668 ,  0.91225165, -0.38054934, -0.35021913,
        0.6368536 , -0.76871055,  0.3741673 ,  0.8385961 ,  0.52727354,
       -0.9303553 ,  0.7345618 , -0.6340369 , -1.2765144 , -0.25284445,
       -0.02637249,  0.10973219, -0.00203098, -0.5605985 ,  0.01533369],
      dtype=float32), array([ 0.726672  ,  1.1201001 , -0.5650566 , -0.97674423,  0.03118436,
       -0.11560523,  0.4288657 , -0.66291404,  0.13705154,  0.6005727 ,
       -2.5263674 ,  0.74518615,  0.2101722 , -1.6213363 ,  0.15818264,
        0.08143149,  0.15000173,  0.5063487 , -1.1822082 , -0.19983879],
      dtype=float32)]
---
Target calculation: 1+1-1
pred: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) 
tar: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0 64  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[ 0.  0.  1.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.6  0.4  0.2 -0.3 -0.2  0.2  0.5  0.6  0.0 -0.5 -0.7  0.1  0.7  0.1  0.4  0.6 -0.3  0.2 -0.3 
-0.3 -0.2 -0.3  0.5 -0.5 -0.1 -2.0  0.3  0.1  0.2 -0.3 -0.1 -0.3 -0.3 -0.1  0.2 -0.4 -0.8  0.3 -0.1 
 0.2  0.3  1.2  0.1 -0.5  0.8 -0.8  0.0  1.3  0.4  0.1  0.1 -1.0 -0.4 -0.3  0.1  0.1 -0.7  0.3 -0.0 
 0.3  1.0 -1.7 -0.5  0.1 -0.3 -0.3 -0.7 -0.0  0.4 -1.8  0.5  0.2 -1.5  0.3  0.1  0.0  0.2 -1.0 -0.1 
 0.3  1.0  0.3 -0.1 -0.3  0.8 -0.5 -0.0  1.1  0.4 -0.3  0.4 -0.8 -0.9 -0.1  0.0  0.1 -0.3 -0.2  0.1 
-0.3  0.6 -0.9  0.3 -0.4 -0.4 -2.5 -0.2 -0.1  0.3 -1.2  0.3 -0.1 -1.1 -0.0  0.1 -0.4 -0.4 -0.1  0.1 
 0.5  1.2 -0.4 -0.5 -0.0  0.1  1.7 -0.0  0.2  0.5 -1.3  0.5  0.1 -1.0  0.1  0.1 -0.0  0.2 -0.6 -0.1 
 0.6  1.5  0.9 -0.4 -0.4  0.6 -0.8  0.4  0.8  0.5 -0.9  0.7 -0.6 -1.3 -0.3 -0.0  0.1 -0.0 -0.6  0.0 
 0.7  1.1 -0.6 -1.0  0.0 -0.1  0.4 -0.7  0.1  0.6 -2.5  0.7  0.2 -1.6  0.2  0.1  0.2  0.5 -1.2 -0.2 
Minimum distance of calculation. 
true answer: 1 
indices: 1 
distance: 0.0
---
Target calculation: 1+9-8
pred: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) 
tar: tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0 64  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  1.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.6  0.4  0.2 -0.3 -0.2  0.2  0.5  0.6  0.0 -0.5 -0.7  0.1  0.7  0.1  0.4  0.6 -0.3  0.2 -0.3 
-0.3 -0.2 -0.3  0.5 -0.5 -0.1 -2.0  0.3  0.1  0.2 -0.3 -0.1 -0.3 -0.3 -0.1  0.2 -0.4 -0.8  0.3 -0.1 
 0.2  0.3  1.2  0.1 -0.5  0.8 -0.8  0.0  1.3  0.4  0.1  0.1 -1.0 -0.4 -0.3  0.1  0.1 -0.7  0.3 -0.0 
 0.3  1.0 -1.7 -0.5  0.1 -0.3 -0.3 -0.7 -0.0  0.4 -1.8  0.5  0.2 -1.5  0.3  0.1  0.0  0.2 -1.0 -0.1 
 0.3  1.0  0.3 -0.1 -0.3  0.8 -0.5 -0.0  1.1  0.4 -0.3  0.4 -0.8 -0.9 -0.1  0.0  0.1 -0.3 -0.2  0.1 
-0.3  0.6 -0.9  0.3 -0.4 -0.4 -2.5 -0.2 -0.1  0.3 -1.2  0.3 -0.1 -1.1 -0.0  0.1 -0.4 -0.4 -0.1  0.1 
 0.5  1.2 -0.4 -0.5 -0.0  0.1  1.7 -0.0  0.2  0.5 -1.3  0.5  0.1 -1.0  0.1  0.1 -0.0  0.2 -0.6 -0.1 
 0.6  1.5  0.9 -0.4 -0.4  0.6 -0.8  0.4  0.8  0.5 -0.9  0.7 -0.6 -1.3 -0.3 -0.0  0.1 -0.0 -0.6  0.0 
 0.7  1.1 -0.6 -1.0  0.0 -0.1  0.4 -0.7  0.1  0.6 -2.5  0.7  0.2 -1.6  0.2  0.1  0.2  0.5 -1.2 -0.2 
Minimum distance of calculation. 
true answer: 2 
indices: 1 
distance: 3.263961
---
Target calculation: 1+8-4
pred: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) 
tar: tensor([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0 64  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  1.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.6  0.4  0.2 -0.3 -0.2  0.2  0.5  0.6  0.0 -0.5 -0.7  0.1  0.7  0.1  0.4  0.6 -0.3  0.2 -0.3 
-0.3 -0.2 -0.3  0.5 -0.5 -0.1 -2.0  0.3  0.1  0.2 -0.3 -0.1 -0.3 -0.3 -0.1  0.2 -0.4 -0.8  0.3 -0.1 
 0.2  0.3  1.2  0.1 -0.5  0.8 -0.8  0.0  1.3  0.4  0.1  0.1 -1.0 -0.4 -0.3  0.1  0.1 -0.7  0.3 -0.0 
 0.3  1.0 -1.7 -0.5  0.1 -0.3 -0.3 -0.7 -0.0  0.4 -1.8  0.5  0.2 -1.5  0.3  0.1  0.0  0.2 -1.0 -0.1 
 0.3  1.0  0.3 -0.1 -0.3  0.8 -0.5 -0.0  1.1  0.4 -0.3  0.4 -0.8 -0.9 -0.1  0.0  0.1 -0.3 -0.2  0.1 
-0.3  0.6 -0.9  0.3 -0.4 -0.4 -2.5 -0.2 -0.1  0.3 -1.2  0.3 -0.1 -1.1 -0.0  0.1 -0.4 -0.4 -0.1  0.1 
 0.5  1.2 -0.4 -0.5 -0.0  0.1  1.7 -0.0  0.2  0.5 -1.3  0.5  0.1 -1.0  0.1  0.1 -0.0  0.2 -0.6 -0.1 
 0.6  1.5  0.9 -0.4 -0.4  0.6 -0.8  0.4  0.8  0.5 -0.9  0.7 -0.6 -1.3 -0.3 -0.0  0.1 -0.0 -0.6  0.0 
 0.7  1.1 -0.6 -1.0  0.0 -0.1  0.4 -0.7  0.1  0.6 -2.5  0.7  0.2 -1.6  0.2  0.1  0.2  0.5 -1.2 -0.2 
Minimum distance of calculation. 
true answer: 5 
indices: 1 
distance: 3.540927
---
Target calculation: 2+7-1
pred: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0 64  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  1.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.6  0.4  0.2 -0.3 -0.2  0.2  0.5  0.6  0.0 -0.5 -0.7  0.1  0.7  0.1  0.4  0.6 -0.3  0.2 -0.3 
-0.3 -0.2 -0.3  0.5 -0.5 -0.1 -2.0  0.3  0.1  0.2 -0.3 -0.1 -0.3 -0.3 -0.1  0.2 -0.4 -0.8  0.3 -0.1 
 0.2  0.3  1.2  0.1 -0.5  0.8 -0.8  0.0  1.3  0.4  0.1  0.1 -1.0 -0.4 -0.3  0.1  0.1 -0.7  0.3 -0.0 
 0.3  1.0 -1.7 -0.5  0.1 -0.3 -0.3 -0.7 -0.0  0.4 -1.8  0.5  0.2 -1.5  0.3  0.1  0.0  0.2 -1.0 -0.1 
 0.3  1.0  0.3 -0.1 -0.3  0.8 -0.5 -0.0  1.1  0.4 -0.3  0.4 -0.8 -0.9 -0.1  0.0  0.1 -0.3 -0.2  0.1 
-0.3  0.6 -0.9  0.3 -0.4 -0.4 -2.5 -0.2 -0.1  0.3 -1.2  0.3 -0.1 -1.1 -0.0  0.1 -0.4 -0.4 -0.1  0.1 
 0.5  1.2 -0.4 -0.5 -0.0  0.1  1.7 -0.0  0.2  0.5 -1.3  0.5  0.1 -1.0  0.1  0.1 -0.0  0.2 -0.6 -0.1 
 0.6  1.5  0.9 -0.4 -0.4  0.6 -0.8  0.4  0.8  0.5 -0.9  0.7 -0.6 -1.3 -0.3 -0.0  0.1 -0.0 -0.6  0.0 
 0.7  1.1 -0.6 -1.0  0.0 -0.1  0.4 -0.7  0.1  0.6 -2.5  0.7  0.2 -1.6  0.2  0.1  0.2  0.5 -1.2 -0.2 
Minimum distance of calculation. 
true answer: 8 
indices: 8 
distance: 4.150799
---
Target calculation: 2+7-2
pred: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) 
tar: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0 64  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  1.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.6  0.4  0.2 -0.3 -0.2  0.2  0.5  0.6  0.0 -0.5 -0.7  0.1  0.7  0.1  0.4  0.6 -0.3  0.2 -0.3 
-0.3 -0.2 -0.3  0.5 -0.5 -0.1 -2.0  0.3  0.1  0.2 -0.3 -0.1 -0.3 -0.3 -0.1  0.2 -0.4 -0.8  0.3 -0.1 
 0.2  0.3  1.2  0.1 -0.5  0.8 -0.8  0.0  1.3  0.4  0.1  0.1 -1.0 -0.4 -0.3  0.1  0.1 -0.7  0.3 -0.0 
 0.3  1.0 -1.7 -0.5  0.1 -0.3 -0.3 -0.7 -0.0  0.4 -1.8  0.5  0.2 -1.5  0.3  0.1  0.0  0.2 -1.0 -0.1 
 0.3  1.0  0.3 -0.1 -0.3  0.8 -0.5 -0.0  1.1  0.4 -0.3  0.4 -0.8 -0.9 -0.1  0.0  0.1 -0.3 -0.2  0.1 
-0.3  0.6 -0.9  0.3 -0.4 -0.4 -2.5 -0.2 -0.1  0.3 -1.2  0.3 -0.1 -1.1 -0.0  0.1 -0.4 -0.4 -0.1  0.1 
 0.5  1.2 -0.4 -0.5 -0.0  0.1  1.7 -0.0  0.2  0.5 -1.3  0.5  0.1 -1.0  0.1  0.1 -0.0  0.2 -0.6 -0.1 
 0.6  1.5  0.9 -0.4 -0.4  0.6 -0.8  0.4  0.8  0.5 -0.9  0.7 -0.6 -1.3 -0.3 -0.0  0.1 -0.0 -0.6  0.0 
 0.7  1.1 -0.6 -1.0  0.0 -0.1  0.4 -0.7  0.1  0.6 -2.5  0.7  0.2 -1.6  0.2  0.1  0.2  0.5 -1.2 -0.2 
Minimum distance of calculation. 
true answer: 7 
indices: 7 
distance: 1.3904045e-07
---
Target calculation: 3+3-3
pred: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(64) 
Accuracy (ratio) tensor(1.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0 64  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  1.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.6  0.4  0.2 -0.3 -0.2  0.2  0.5  0.6  0.0 -0.5 -0.7  0.1  0.7  0.1  0.4  0.6 -0.3  0.2 -0.3 
-0.3 -0.2 -0.3  0.5 -0.5 -0.1 -2.0  0.3  0.1  0.2 -0.3 -0.1 -0.3 -0.3 -0.1  0.2 -0.4 -0.8  0.3 -0.1 
 0.2  0.3  1.2  0.1 -0.5  0.8 -0.8  0.0  1.3  0.4  0.1  0.1 -1.0 -0.4 -0.3  0.1  0.1 -0.7  0.3 -0.0 
 0.3  1.0 -1.7 -0.5  0.1 -0.3 -0.3 -0.7 -0.0  0.4 -1.8  0.5  0.2 -1.5  0.3  0.1  0.0  0.2 -1.0 -0.1 
 0.3  1.0  0.3 -0.1 -0.3  0.8 -0.5 -0.0  1.1  0.4 -0.3  0.4 -0.8 -0.9 -0.1  0.0  0.1 -0.3 -0.2  0.1 
-0.3  0.6 -0.9  0.3 -0.4 -0.4 -2.5 -0.2 -0.1  0.3 -1.2  0.3 -0.1 -1.1 -0.0  0.1 -0.4 -0.4 -0.1  0.1 
 0.5  1.2 -0.4 -0.5 -0.0  0.1  1.7 -0.0  0.2  0.5 -1.3  0.5  0.1 -1.0  0.1  0.1 -0.0  0.2 -0.6 -0.1 
 0.6  1.5  0.9 -0.4 -0.4  0.6 -0.8  0.4  0.8  0.5 -0.9  0.7 -0.6 -1.3 -0.3 -0.0  0.1 -0.0 -0.6  0.0 
 0.7  1.1 -0.6 -1.0  0.0 -0.1  0.4 -0.7  0.1  0.6 -2.5  0.7  0.2 -1.6  0.2  0.1  0.2  0.5 -1.2 -0.2 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 0.0
---
Target calculation: 3+5-2
pred: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  1 63  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.016 0.984 0.    0.    0.    0.    0.    0.   ]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.4 -3.6  0.4  0.2 -0.3 -0.2  0.2  0.5  0.6  0.0 -0.5 -0.7  0.1  0.7  0.1  0.4  0.6 -0.3  0.2 -0.3 
-0.3 -0.2 -0.3  0.5 -0.5 -0.1 -2.0  0.3  0.1  0.2 -0.3 -0.1 -0.3 -0.3 -0.1  0.2 -0.4 -0.8  0.3 -0.1 
 0.2  0.3  1.2  0.1 -0.5  0.8 -0.8  0.0  1.3  0.4  0.1  0.1 -1.0 -0.4 -0.3  0.1  0.1 -0.7  0.3 -0.0 
 0.3  1.0 -1.7 -0.5  0.1 -0.3 -0.3 -0.7 -0.0  0.4 -1.8  0.5  0.2 -1.5  0.3  0.1  0.0  0.2 -1.0 -0.1 
 0.3  1.0  0.3 -0.1 -0.3  0.8 -0.5 -0.0  1.1  0.4 -0.3  0.4 -0.8 -0.9 -0.1  0.0  0.1 -0.3 -0.2  0.1 
-0.3  0.6 -0.9  0.3 -0.4 -0.4 -2.5 -0.2 -0.1  0.3 -1.2  0.3 -0.1 -1.1 -0.0  0.1 -0.4 -0.4 -0.1  0.1 
 0.5  1.2 -0.4 -0.5 -0.0  0.1  1.7 -0.0  0.2  0.5 -1.3  0.5  0.1 -1.0  0.1  0.1 -0.0  0.2 -0.6 -0.1 
 0.6  1.5  0.9 -0.4 -0.4  0.6 -0.8  0.4  0.8  0.5 -0.9  0.7 -0.6 -1.3 -0.3 -0.0  0.1 -0.0 -0.6  0.0 
 0.7  1.1 -0.6 -1.0  0.0 -0.1  0.4 -0.7  0.1  0.6 -2.5  0.7  0.2 -1.6  0.2  0.1  0.2  0.5 -1.2 -0.2 
Minimum distance of calculation. 
true answer: 6 
indices: 5 
distance: 2.7706013
---
Target calculation: 3+6-3
pred: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0 64  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  1.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.6  0.4  0.2 -0.3 -0.2  0.2  0.5  0.6  0.0 -0.5 -0.7  0.1  0.7  0.1  0.4  0.6 -0.3  0.2 -0.3 
-0.3 -0.2 -0.3  0.5 -0.5 -0.1 -2.0  0.3  0.1  0.2 -0.3 -0.1 -0.3 -0.3 -0.1  0.2 -0.4 -0.8  0.3 -0.1 
 0.2  0.3  1.2  0.1 -0.5  0.8 -0.8  0.0  1.3  0.4  0.1  0.1 -1.0 -0.4 -0.3  0.1  0.1 -0.7  0.3 -0.0 
 0.3  1.0 -1.7 -0.5  0.1 -0.3 -0.3 -0.7 -0.0  0.4 -1.8  0.5  0.2 -1.5  0.3  0.1  0.0  0.2 -1.0 -0.1 
 0.3  1.0  0.3 -0.1 -0.3  0.8 -0.5 -0.0  1.1  0.4 -0.3  0.4 -0.8 -0.9 -0.1  0.0  0.1 -0.3 -0.2  0.1 
-0.3  0.6 -0.9  0.3 -0.4 -0.4 -2.5 -0.2 -0.1  0.3 -1.2  0.3 -0.1 -1.1 -0.0  0.1 -0.4 -0.4 -0.1  0.1 
 0.5  1.2 -0.4 -0.5 -0.0  0.1  1.7 -0.0  0.2  0.5 -1.3  0.5  0.1 -1.0  0.1  0.1 -0.0  0.2 -0.6 -0.1 
 0.6  1.5  0.9 -0.4 -0.4  0.6 -0.8  0.4  0.8  0.5 -0.9  0.7 -0.6 -1.3 -0.3 -0.0  0.1 -0.0 -0.6  0.0 
 0.7  1.1 -0.6 -1.0  0.0 -0.1  0.4 -0.7  0.1  0.6 -2.5  0.7  0.2 -1.6  0.2  0.1  0.2  0.5 -1.2 -0.2 
Minimum distance of calculation. 
true answer: 6 
indices: 6 
distance: 4.774334e-08
---
Target calculation: 5+3-5
pred: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(64) 
Accuracy (ratio) tensor(1.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0 64  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  1.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.6  0.4  0.2 -0.3 -0.2  0.2  0.5  0.6  0.0 -0.5 -0.7  0.1  0.7  0.1  0.4  0.6 -0.3  0.2 -0.3 
-0.3 -0.2 -0.3  0.5 -0.5 -0.1 -2.0  0.3  0.1  0.2 -0.3 -0.1 -0.3 -0.3 -0.1  0.2 -0.4 -0.8  0.3 -0.1 
 0.2  0.3  1.2  0.1 -0.5  0.8 -0.8  0.0  1.3  0.4  0.1  0.1 -1.0 -0.4 -0.3  0.1  0.1 -0.7  0.3 -0.0 
 0.3  1.0 -1.7 -0.5  0.1 -0.3 -0.3 -0.7 -0.0  0.4 -1.8  0.5  0.2 -1.5  0.3  0.1  0.0  0.2 -1.0 -0.1 
 0.3  1.0  0.3 -0.1 -0.3  0.8 -0.5 -0.0  1.1  0.4 -0.3  0.4 -0.8 -0.9 -0.1  0.0  0.1 -0.3 -0.2  0.1 
-0.3  0.6 -0.9  0.3 -0.4 -0.4 -2.5 -0.2 -0.1  0.3 -1.2  0.3 -0.1 -1.1 -0.0  0.1 -0.4 -0.4 -0.1  0.1 
 0.5  1.2 -0.4 -0.5 -0.0  0.1  1.7 -0.0  0.2  0.5 -1.3  0.5  0.1 -1.0  0.1  0.1 -0.0  0.2 -0.6 -0.1 
 0.6  1.5  0.9 -0.4 -0.4  0.6 -0.8  0.4  0.8  0.5 -0.9  0.7 -0.6 -1.3 -0.3 -0.0  0.1 -0.0 -0.6  0.0 
 0.7  1.1 -0.6 -1.0  0.0 -0.1  0.4 -0.7  0.1  0.6 -2.5  0.7  0.2 -1.6  0.2  0.1  0.2  0.5 -1.2 -0.2 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 1.6425373e-07
---
Target calculation: 9+7-8
pred: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0 64  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  1.  0.  0.  0.  0.  0.  0.]
 [nan nan nan nan nan nan nan nan nan]]
-0.4 -3.6  0.4  0.2 -0.3 -0.2  0.2  0.5  0.6  0.0 -0.5 -0.7  0.1  0.7  0.1  0.4  0.6 -0.3  0.2 -0.3 
-0.3 -0.2 -0.3  0.5 -0.5 -0.1 -2.0  0.3  0.1  0.2 -0.3 -0.1 -0.3 -0.3 -0.1  0.2 -0.4 -0.8  0.3 -0.1 
 0.2  0.3  1.2  0.1 -0.5  0.8 -0.8  0.0  1.3  0.4  0.1  0.1 -1.0 -0.4 -0.3  0.1  0.1 -0.7  0.3 -0.0 
 0.3  1.0 -1.7 -0.5  0.1 -0.3 -0.3 -0.7 -0.0  0.4 -1.8  0.5  0.2 -1.5  0.3  0.1  0.0  0.2 -1.0 -0.1 
 0.3  1.0  0.3 -0.1 -0.3  0.8 -0.5 -0.0  1.1  0.4 -0.3  0.4 -0.8 -0.9 -0.1  0.0  0.1 -0.3 -0.2  0.1 
-0.3  0.6 -0.9  0.3 -0.4 -0.4 -2.5 -0.2 -0.1  0.3 -1.2  0.3 -0.1 -1.1 -0.0  0.1 -0.4 -0.4 -0.1  0.1 
 0.5  1.2 -0.4 -0.5 -0.0  0.1  1.7 -0.0  0.2  0.5 -1.3  0.5  0.1 -1.0  0.1  0.1 -0.0  0.2 -0.6 -0.1 
 0.6  1.5  0.9 -0.4 -0.4  0.6 -0.8  0.4  0.8  0.5 -0.9  0.7 -0.6 -1.3 -0.3 -0.0  0.1 -0.0 -0.6  0.0 
 0.7  1.1 -0.6 -1.0  0.0 -0.1  0.4 -0.7  0.1  0.6 -2.5  0.7  0.2 -1.6  0.2  0.1  0.2  0.5 -1.2 -0.2 
Minimum distance of calculation. 
true answer: 8 
indices: 9 
distance: 3.141183
---
pred: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) 
tar: tensor([1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 7, 6, 5,
        4, 3, 2, 1, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1, 4, 2, 1, 5, 3, 2, 1, 6, 4,
        3, 2, 1, 7, 5, 4, 3, 2, 1, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3, 2, 1,
        8, 7, 6, 5, 4, 3, 2, 3, 2, 4, 3, 1, 5, 4, 2, 1, 6, 5, 3, 2, 1, 7, 6, 4,
        3, 2, 1, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3,
        2, 8, 7, 6, 5, 4, 3, 4, 3, 2, 5, 4, 3, 1, 6, 5, 4, 2, 1, 7, 6, 5, 3, 2,
        1, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 9,
        7, 6, 5, 4, 3, 8, 7, 6, 5, 4, 5, 4, 3, 2, 6, 5, 4, 3, 1, 7, 6, 5, 4, 2,
        1, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 9,
        8, 6, 5, 4, 3, 9, 7, 6, 5, 4, 8, 7, 6, 5, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3,
        1, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 9,
        8, 7, 5, 4, 3, 9, 8, 6, 5, 4, 9, 7, 6, 5, 8, 7, 6, 7, 6, 5, 4, 3, 2, 8,
        7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 9, 8, 7,
        6, 4, 3, 9, 8, 7, 5, 4, 9, 8, 6, 5, 9, 7, 6, 8, 7, 8, 7, 6, 5, 4, 3, 2,
        9, 8, 7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 9, 8, 7, 6, 5, 3, 9, 8, 7,
        6, 4, 9, 8, 7, 5, 9, 8, 6, 9, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 9, 8, 7, 6,
        5, 4, 3, 9, 8, 7, 6, 5, 4, 9, 8, 7, 6, 5, 9, 8, 7, 6, 9, 8, 7, 9, 8, 9])
Accuracy (count): tensor(47) 
Accuracy (ratio) tensor(0.1152)
Accuracy:
 [[ 0  0 36  0  0  0  0  0  0]
 [ 0  0 43  0  0  0  0  0  0]
 [ 0  1 47  0  0  0  0  0  0]
 [ 0  1 50  0  0  0  0  0  0]
 [ 0  0 52  0  0  0  0  0  0]
 [ 0  1 50  0  0  0  0  0  0]
 [ 0  2 46  0  0  0  0  0  0]
 [ 0  0 43  0  0  0  0  0  0]
 [ 0  0 36  0  0  0  0  0  0]]
Accuracy:
 [[0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.021 0.979 0.    0.    0.    0.    0.    0.   ]
 [0.    0.02  0.98  0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.02  0.98  0.    0.    0.    0.    0.    0.   ]
 [0.    0.042 0.958 0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    1.    0.    0.    0.    0.    0.    0.   ]]
results (all): {'reconst_0x0_avg': 0.140625, 'reconst_0x0_all': nan, 'cross_1x0_avg': 0.1328125, 'cross_1x0_all': nan, 'cluster_avg': 0.054300822, 'cluster_all': array([ 0.149812  , -0.07777821,  0.15557407, ...,  0.29056847,
        0.15216196,  0.21530442], dtype=float32), 'magnitude_avg': 0.41798807160997387, 'magnitude_all': 0.41798807160997387, 'tsne-2d_avg': nan, 'tsne-2d_all': nan, 'mathematics_1+1-1_avg': 0.0, 'mathematics_1+1-1_all': nan, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+9-8_all': nan, 'mathematics_1+8-4_avg': 0.0, 'mathematics_1+8-4_all': nan, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-1_all': nan, 'mathematics_2+7-2_avg': 0.0, 'mathematics_2+7-2_all': nan, 'mathematics_3+3-3_avg': 1.0, 'mathematics_3+3-3_all': nan, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+5-2_all': nan, 'mathematics_3+6-3_avg': 0.0, 'mathematics_3+6-3_all': nan, 'mathematics_5+3-5_avg': 1.0, 'mathematics_5+3-5_all': nan, 'mathematics_9+7-8_avg': 0.0, 'mathematics_9+7-8_all': nan, 'mathematics_avg': 0.11519607901573181, 'mathematics_all': nan}
results (only averages): {'id': 'mmvae_cmnist_oscn_seed_4', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 0, 'target_property': 1, 'reconst_0x0_avg': 0.140625, 'cross_1x0_avg': 0.1328125, 'cluster_avg': 0.054300822, 'magnitude_avg': 0.41798807160997387, 'tsne-2d_avg': nan, 'mathematics_1+1-1_avg': 0.0, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+8-4_avg': 0.0, 'mathematics_2+7-1_avg': 0.0, 'mathematics_2+7-2_avg': 0.0, 'mathematics_3+3-3_avg': 1.0, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+6-3_avg': 0.0, 'mathematics_5+3-5_avg': 1.0, 'mathematics_9+7-8_avg': 0.0, 'mathematics_avg': 0.11519607901573181}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([7, 1, 3, 9, 6, 9, 2, 4, 8, 5, 8, 8, 7, 7, 6, 2, 8, 2, 1, 2, 6, 7, 9, 6,
        8, 7, 4, 8, 4, 5, 8, 1, 2, 5, 7, 7, 7, 1, 3, 3, 2, 7, 2, 3, 7, 9, 6, 8,
        2, 9, 9, 7, 5, 6, 2, 8, 1, 5, 6, 1, 7, 6, 4, 4, 3, 8, 6, 9, 8, 8, 5, 8,
        7, 1, 1, 4, 2, 6, 3, 7, 3, 9, 2, 1, 9, 6, 6, 6, 6, 2, 6, 5, 5, 3, 8, 5,
        2, 1, 8, 2, 8, 8, 4, 9, 3, 4, 4, 1, 7, 7, 7, 7, 6, 9, 2, 1, 5, 5, 4, 5,
        4, 6, 7, 6, 9, 5, 1, 2]), ['b7t', 'r1j', 'r3s', 'b9j', 'w6s', 'g9j', 'w2j', 'g4j', 'g8t', 'r5s', 'g8j', 'r8s', 'r7j', 'r7t', 'w6t', 'w2s', 'w8t', 'w2s', 'r1s', 'g2t', 'r6t', 'r7t', 'b9j', 'r6t', 'g8t', 'g7j', 'w4j', 'g8s', 'w4j', 'b5t', 'w8j', 'g1s', 'r2s', 'b5s', 'r7s', 'w7t', 'r7s', 'r1s', 'g3s', 'w3s', 'r2j', 'g7s', 'b2j', 'b3t', 'w7j', 'b9s', 'r6t', 'g8j', 'b2s', 'w9t', 'b9j', 'r7s', 'g5j', 'w6s', 'w2t', 'b8j', 'g1s', 'g5s', 'b6j', 'w1s', 'b7t', 'r6j', 'r4j', 'b4t', 'g3j', 'w8t', 'b6j', 'w9j', 'r8t', 'w8j', 'w5s', 'g8s', 'w7t', 'w1t', 'g1j', 'w4j', 'b2s', 'r6s', 'g3j', 'g7t', 'r3s', 'r9t', 'r2j', 'b1t', 'b9s', 'b6s', 'r6j', 'r6j', 'g6t', 'g2t', 'r6s', 'g5j', 'r5t', 'g3t', 'r8s', 'w5t', 'w2s', 'w1s', 'w8j', 'g2j', 'r8s', 'b8j', 'g4s', 'b9s', 'g3t', 'w4t', 'g4j', 'g1t', 'b7t', 'w7s', 'w7t', 'b7t', 'b6t', 'r9t', 'b2t', 'g1j', 'r5t', 'b5t', 'w4t', 'g5t', 'r4j', 'g6t', 'b7j', 'r6j', 'b9j', 'r5s', 'w1s', 'b2s']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 0 
Target property: 2 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4/analyse/0_2 
Number of category 3 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2} 
Start index: 0 
End index: 3 
withzero: False
---
Silhouette values: [-0.02455494 -0.00370131 -0.00641112 ... -0.00277493 -0.02259819
  0.00659515]
Average of silhouette coef: -0.0044943034
---

Distance matrix between labels.
  0   1   2
0 0.0 0.2 0.1 
1 0.2 0.0 0.2 
2 0.1 0.2 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 1] 
Latent embbeding: [0.21354127, 0.105822474, 0.17530315] 
Flatten array: [[0.         0.        ]
 [1.         0.21354127]
 [2.         0.10582247]
 [0.         0.        ]
 [1.         0.17530315]
 [0.         0.        ]]
Correlation: [[ 1.         -0.93670998]
 [-0.93670998  1.        ]]
---
[[], [], []] [2 0 1 ... 0 0 1] [[-53.488953  -26.718403 ]
 [ 42.332478  -28.35458  ]
 [ 71.17301    -1.2330308]
 ...
 [ 11.550566   47.785767 ]
 [-40.263775  -37.18278  ]
 [-14.526072  -11.495342 ]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4/analyse/0_2/latent__0_2.svg
results (all): {'cluster_avg': -0.0044943034, 'cluster_all': array([-0.02455494, -0.00370131, -0.00641112, ..., -0.00277493,
       -0.02259819,  0.00659515], dtype=float32), 'magnitude_avg': 0.93670997581944, 'magnitude_all': -0.93670997581944, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'mmvae_cmnist_oscn_seed_4', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 0, 'target_property': 2, 'cluster_avg': -0.0044943034, 'magnitude_avg': 0.93670997581944, 'tsne-2d_avg': nan}


Model runner was constructed.
{'K': 20,
 'batch_size': 128,
 'device': 'cuda',
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'Classifier_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'cross',
 'output_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/Classifier_OSCN/test_classifier_oscn',
 'run_id': 'test_classifier_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
Encoder based on MLP was constructed.
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1                  [-1, 400]       1,229,200
              ReLU-2                  [-1, 400]               0
            Linear-3                   [-1, 20]           8,020
            Linear-4                   [-1, 20]           8,020
            EncMLP-5       [[-1, 20], [-1, 20]]               0
            Linear-6                    [-1, 9]             189
================================================================
Total params: 1,245,429
Trainable params: 1,245,429
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.00
Params size (MB): 4.75
Estimated Total Size (MB): 4.77
----------------------------------------------------------------
Model is initialized without loading.

length of dataset (train): 120000 
length of dataset (test): 4000
objectives: cross 
t_objectives: cross


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([8, 5, 2, 7, 2, 1, 3, 3, 3, 2, 1, 5, 1, 4, 4, 3, 1, 9, 9, 4, 4, 1, 6, 3,
        5, 8, 6, 9, 6, 1, 3, 6, 9, 8, 8, 8, 2, 2, 6, 3, 2, 7, 8, 1, 3, 9, 1, 5,
        3, 1, 6, 8, 5, 8, 1, 2, 2, 7, 2, 8, 1, 9, 4, 8, 3, 4, 5, 3, 4, 1, 7, 4,
        7, 1, 3, 5, 3, 8, 8, 7, 8, 8, 7, 5, 4, 7, 8, 9, 1, 7, 2, 8, 1, 2, 6, 7,
        2, 8, 4, 9, 6, 3, 7, 7, 5, 2, 4, 7, 5, 7, 9, 1, 9, 3, 7, 1, 5, 6, 4, 1,
        2, 4, 4, 7, 4, 5, 6, 7]), ['g8j', 'g5s', 'r2t', 'b7s', 'r2j', 'b1t', 'g3t', 'r3s', 'b3j', 'r2s', 'r1j', 'g5s', 'w1t', 'b4t', 'r4s', 'w3t', 'r1j', 'r9j', 'w9s', 'r4s', 'w4s', 'b1j', 'r6s', 'b3j', 'b5j', 'g8t', 'r6s', 'g9j', 'b6s', 'w1s', 'r3j', 'b6j', 'g9j', 'g8j', 'b8t', 'w8s', 'w2s', 'b2t', 'g6t', 'g3t', 'b2s', 'g7j', 'w8j', 'w1t', 'g3j', 'w9t', 'b1s', 'g5j', 'r3s', 'r1s', 'r6j', 'b8t', 'r5s', 'w8s', 'b1s', 'g2j', 'g2j', 'w7j', 'b2s', 'w8j', 'g1j', 'r9j', 'w4j', 'g8s', 'b3j', 'g4j', 'w5t', 'w3j', 'w4t', 'b1t', 'r7s', 'r4t', 'r7j', 'b1t', 'w3j', 'b5t', 'r3s', 'b8j', 'g8s', 'g7s', 'g8t', 'w8s', 'b7t', 'r5t', 'r4s', 'g7j', 'r8s', 'w9j', 'r1s', 'b7s', 'w2t', 'r8s', 'b1j', 'g2t', 'g6t', 'b7t', 'g2t', 'g8j', 'g4j', 'g9t', 'g6t', 'w3s', 'g7j', 'w7s', 'b5j', 'r2j', 'w4s', 'b7s', 'r5t', 'b7t', 'g9j', 'g1s', 'b9j', 'b3j', 'g7t', 'g1s', 'r5j', 'w6t', 'w4j', 'g1t', 'b2t', 'w4j', 'w4t', 'r7t', 'r4j', 'g5s', 'r6t', 'g7t']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 1 
Target property: 0 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4/analyse/1_0 
Number of category 4 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2, 3} 
Start index: 0 
End index: 4 
withzero: False
---
Silhouette values: [0.08102484 0.1430567  0.12997791 ... 0.21896525 0.05060309 0.13110074]
Average of silhouette coef: 0.1050618
---

Distance matrix between labels.
  0   1   2   3
0 0.0 3.4 3.1 3.1 
1 3.4 0.0 3.4 3.9 
2 3.1 3.4 0.0 3.9 
3 3.1 3.9 3.9 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 1, 2, 1] 
Latent embbeding: [3.397342, 3.0854294, 3.10746, 3.4180372, 3.8825772, 3.9150832] 
Flatten array: [[0.         0.        ]
 [1.         3.39734197]
 [2.         3.08542943]
 [3.         3.10746002]
 [0.         0.        ]
 [1.         3.41803718]
 [2.         3.88257718]
 [0.         0.        ]
 [1.         3.91508317]
 [0.         0.        ]]
Correlation: [[ 1.         -0.46519729]
 [-0.46519729  1.        ]]
---
[[], [], [], []] [2 2 3 ... 3 0 3] [[-39.738007  -14.926104 ]
 [  3.757625    0.3454353]
 [ 36.981403  -11.497913 ]
 ...
 [ 28.03562   -38.702816 ]
 [ 15.26192    21.39696  ]
 [ 50.46557     5.3727746]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4/analyse/1_0/latent__1_0.svg
results (all): {'cluster_avg': 0.1050618, 'cluster_all': array([0.08102484, 0.1430567 , 0.12997791, ..., 0.21896525, 0.05060309,
       0.13110074], dtype=float32), 'magnitude_avg': 0.46519728828701473, 'magnitude_all': -0.46519728828701473, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'mmvae_cmnist_oscn_seed_4', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 1, 'target_property': 0, 'cluster_avg': 0.1050618, 'magnitude_avg': 0.46519728828701473, 'tsne-2d_avg': nan}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([5, 8, 4, 2, 4, 9, 1, 5, 6, 1, 2, 1, 2, 1, 8, 9, 1, 4, 2, 8, 1, 3, 6, 8,
        2, 4, 3, 3, 2, 6, 1, 4, 6, 8, 7, 4, 7, 7, 1, 2, 1, 4, 1, 3, 4, 7, 9, 8,
        2, 8, 7, 1, 7, 6, 5, 9, 5, 2, 9, 9, 8, 1, 6, 6, 6, 3, 3, 7, 1, 1, 2, 5,
        9, 7, 4, 9, 2, 1, 1, 6, 2, 6, 5, 3, 5, 3, 3, 9, 1, 5, 6, 3, 5, 1, 5, 9,
        9, 8, 5, 8, 4, 3, 9, 9, 8, 4, 7, 7, 5, 5, 6, 1, 7, 3, 3, 9, 4, 3, 3, 8,
        8, 8, 8, 7, 3, 1, 7, 3]), ['b5j', 'r8j', 'r4t', 'w2t', 'w4j', 'r9j', 'g1s', 'g5s', 'r6j', 'r1s', 'w2s', 'g1s', 'r2j', 'b1s', 'b8t', 'w9j', 'r1t', 'w4s', 'r2s', 'w8j', 'w1j', 'b3j', 'r6t', 'r8t', 'g2j', 'w4j', 'b3j', 'w3j', 'g2t', 'r6s', 'g1j', 'r4s', 'g6t', 'w8j', 'w7t', 'b4j', 'b7j', 'g7t', 'g1s', 'r2j', 'b1j', 'r4j', 'r1j', 'g3s', 'r4s', 'r7s', 'w9t', 'g8t', 'g2s', 'b8t', 'w7s', 'b1s', 'g7t', 'g6s', 'r5s', 'r9t', 'w5s', 'r2t', 'g9j', 'b9j', 'b8s', 'b1j', 'b6j', 'b6j', 'r6t', 'w3j', 'w3t', 'w7j', 'b1s', 'g1j', 'w2t', 'g5t', 'r9t', 'w7t', 'g4j', 'w9j', 'w2j', 'r1t', 'w1s', 'g6s', 'w2t', 'b6t', 'r5j', 'g3t', 'w5s', 'w3s', 'g3j', 'g9j', 'b1s', 'r5t', 'b6s', 'r3t', 'r5j', 'b1j', 'b5s', 'r9t', 'r9t', 'b8t', 'w5t', 'g8s', 'b4s', 'b3t', 'w9s', 'b9s', 'b8t', 'w4s', 'b7t', 'r7s', 'w5t', 'g5t', 'r6s', 'w1j', 'b7t', 'g3j', 'r3s', 'r9s', 'g4t', 'g3t', 'r3j', 'b8j', 'b8s', 'r8t', 'r8s', 'r7t', 'g3j', 'r1t', 'r7t', 'g3j']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 1 
Target property: 1 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4/analyse/1_1 
Number of category 10 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {1, 2, 3, 4, 5, 6, 7, 8, 9} 
Start index: 1 
End index: 10 
withzero: False
---
size of extracted recon in MMVAE: <class 'list'>
size of extracted recon in MMVAE: torch.Size([1, 128, 3, 32, 32])
size of extracted recon in MMVAE: torch.Size([128, 3, 32, 32])
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8]) 
tar: tensor([9, 7, 9, 6, 4, 7, 2, 4, 8, 5, 4, 9, 7, 6, 9, 1, 2, 5, 7, 3, 6, 4, 1, 4,
        1, 3, 9, 6, 1, 7, 4, 6, 8, 8, 3, 1, 3, 4, 1, 9, 7, 6, 8, 1, 5, 6, 8, 1,
        5, 4, 1, 6, 2, 7, 4, 5, 7, 3, 9, 3, 6, 4, 6, 2, 5, 4, 2, 4, 2, 1, 5, 8,
        5, 7, 1, 3, 1, 6, 4, 2, 1, 4, 4, 1, 5, 4, 4, 1, 2, 3, 8, 7, 2, 2, 2, 2,
        2, 5, 1, 6, 3, 3, 2, 8, 3, 1, 2, 1, 4, 9, 6, 1, 5, 1, 7, 4, 5, 5, 1, 5,
        6, 6, 9, 9, 2, 5, 4, 1])
Accuracy (count): tensor(8) 
Accuracy (ratio) tensor(0.0625)
Accuracy:
 [[ 0  0  0  0  0  0  0 22  0]
 [ 0  0  0  0  0  0  0 16  0]
 [ 0  0  0  0  0  0  0 11  0]
 [ 0  0  0  0  0  0  0 20  0]
 [ 0  0  0  0  0  0  0 15  0]
 [ 0  0  0  0  0  0  0 15  0]
 [ 0  0  0  0  0  0  0 11  0]
 [ 0  0  0  0  0  0  0  8  0]
 [ 0  0  0  0  0  0  0 10  0]]
Accuracy:
 [[0. 0. 0. 0. 0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 0. 0. 0. 1. 0.]]
---
size of extracted recon in MMVAE: <class 'list'>
size of extracted recon in MMVAE: torch.Size([1, 128, 3, 32, 32])
size of extracted recon in MMVAE: torch.Size([128, 3, 32, 32])
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8]) 
tar: tensor([1, 2, 9, 3, 7, 5, 3, 1, 1, 4, 8, 1, 5, 5, 4, 8, 1, 7, 1, 1, 3, 9, 5, 4,
        7, 8, 7, 2, 8, 6, 2, 1, 5, 7, 2, 1, 7, 6, 4, 3, 9, 9, 6, 5, 8, 8, 6, 4,
        2, 9, 7, 4, 4, 7, 5, 4, 6, 4, 7, 7, 4, 6, 9, 4, 9, 2, 9, 1, 1, 1, 7, 2,
        9, 2, 1, 7, 7, 5, 8, 6, 4, 2, 5, 6, 1, 9, 5, 1, 2, 5, 1, 3, 4, 7, 6, 7,
        4, 6, 2, 6, 8, 1, 9, 9, 8, 4, 7, 5, 9, 3, 8, 1, 2, 8, 2, 4, 8, 1, 2, 8,
        8, 4, 3, 4, 6, 2, 1, 1])
Accuracy (count): tensor(14) 
Accuracy (ratio) tensor(0.1094)
Accuracy:
 [[ 0  0  0  0  0  0  0 21  0]
 [ 0  0  0  0  0  0  0 15  0]
 [ 0  0  0  0  0  0  0  7  0]
 [ 0  0  0  0  0  0  0 17  1]
 [ 0  0  0  0  0  0  0 12  0]
 [ 0  0  0  0  0  0  0 12  0]
 [ 0  0  0  0  0  0  0 16  0]
 [ 0  0  0  0  0  0  0 14  0]
 [ 0  0  0  0  0  0  0 13  0]]
Accuracy:
 [[0.    0.    0.    0.    0.    0.    0.    1.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.    1.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.    1.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.944 0.056]
 [0.    0.    0.    0.    0.    0.    0.    1.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.    1.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.    1.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.    1.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.    1.    0.   ]]
---
Silhouette values: [-0.02996677  0.0755112  -0.01499212 ...  0.02456745 -0.01625517
  0.01466442]
Average of silhouette coef: 0.04666771
---

Distance matrix between labels.
  1   2   3   4   5   6   7   8   9
1 0.0 2.8 3.5 3.7 4.0 4.4 4.8 5.4 6.7 
2 2.8 0.0 1.2 1.8 2.5 3.3 4.0 4.9 6.6 
3 3.5 1.2 0.0 0.8 1.6 2.5 3.2 4.1 5.8 
4 3.7 1.8 0.8 0.0 1.1 1.8 2.5 3.5 5.4 
5 4.0 2.5 1.6 1.1 0.0 1.1 1.7 2.9 5.1 
6 4.4 3.3 2.5 1.8 1.1 0.0 0.8 2.4 4.8 
7 4.8 4.0 3.2 2.5 1.7 0.8 0.0 1.9 4.4 
8 5.4 4.9 4.1 3.5 2.9 2.4 1.9 0.0 2.5 
9 6.7 6.6 5.8 5.4 5.1 4.8 4.4 2.5 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1] 
Latent embbeding: [2.7555175, 3.4531176, 3.701829, 4.0387225, 4.421853, 4.817317, 5.356669, 6.74312, 1.2247022, 1.8122373, 2.5482023, 3.3477304, 4.0440903, 4.919721, 6.600685, 0.78707904, 1.6460142, 2.507508, 3.1979346, 4.070216, 5.8357196, 1.0539107, 1.7939236, 2.4914522, 3.4791498, 5.4263325, 1.0641425, 1.7157389, 2.9432232, 5.0924788, 0.79659194, 2.3620534, 4.774056, 1.9075601, 4.3914604, 2.534409] 
Flatten array: [[0.         0.        ]
 [1.         2.75551748]
 [2.         3.45311761]
 [3.         3.70182896]
 [4.         4.03872252]
 [5.         4.42185307]
 [6.         4.81731701]
 [7.         5.35666895]
 [8.         6.74312019]
 [0.         0.        ]
 [1.         1.22470224]
 [2.         1.81223726]
 [3.         2.54820228]
 [4.         3.3477304 ]
 [5.         4.04409027]
 [6.         4.91972113]
 [7.         6.60068512]
 [0.         0.        ]
 [1.         0.78707904]
 [2.         1.64601421]
 [3.         2.50750804]
 [4.         3.19793463]
 [5.         4.07021618]
 [6.         5.83571959]
 [0.         0.        ]
 [1.         1.05391073]
 [2.         1.79392362]
 [3.         2.49145222]
 [4.         3.47914982]
 [5.         5.42633247]
 [0.         0.        ]
 [1.         1.06414247]
 [2.         1.71573889]
 [3.         2.94322324]
 [4.         5.09247875]
 [0.         0.        ]
 [1.         0.79659194]
 [2.         2.36205339]
 [3.         4.77405596]
 [0.         0.        ]
 [1.         1.90756011]
 [2.         4.39146042]
 [0.         0.        ]
 [1.         2.53440905]
 [0.         0.        ]]
Correlation: [[1.        0.8850969]
 [0.8850969 1.       ]]
---
[[], [], [], [], [], [], [], [], [], []] [5 8 4 ... 7 4 8] [[-1.63554134e+01 -4.21614265e+01]
 [-1.40419975e-02  5.60122566e+01]
 [ 3.33715401e+01  2.33430042e+01]
 ...
 [-1.52210770e+01  3.67101135e+01]
 [ 2.74474506e+01  2.78795967e+01]
 [-3.31601334e+01  4.32438087e+01]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4/analyse/1_1/latent__1_1.svg
---
length of elements: 408 408
length of 1: 36
length of 2: 43
length of 3: 48
length of 4: 51
length of 5: 52
length of 6: 51
length of 7: 48
length of 8: 43
length of 9: 36
all elements:

[(1, (1, 2, 2)),
 (2, (1, 3, 2)),
 (1, (1, 3, 3)),
 (3, (1, 4, 2)),
 (2, (1, 4, 3)),
 (1, (1, 4, 4)),
 (4, (1, 5, 2)),
 (3, (1, 5, 3)),
 (2, (1, 5, 4)),
 (1, (1, 5, 5)),
 (5, (1, 6, 2)),
 (4, (1, 6, 3)),
 (3, (1, 6, 4)),
 (2, (1, 6, 5)),
 (1, (1, 6, 6)),
 (6, (1, 7, 2)),
 (5, (1, 7, 3)),
 (4, (1, 7, 4)),
 (3, (1, 7, 5)),
 (2, (1, 7, 6)),
 (1, (1, 7, 7)),
 (7, (1, 8, 2)),
 (6, (1, 8, 3)),
 (5, (1, 8, 4)),
 (4, (1, 8, 5)),
 (3, (1, 8, 6)),
 (2, (1, 8, 7)),
 (1, (1, 8, 8)),
 (8, (1, 9, 2)),
 (7, (1, 9, 3)),
 (6, (1, 9, 4)),
 (5, (1, 9, 5)),
 (4, (1, 9, 6)),
 (3, (1, 9, 7)),
 (2, (1, 9, 8)),
 (1, (1, 9, 9)),
 (2, (2, 1, 1)),
 (3, (2, 2, 1)),
 (1, (2, 2, 3)),
 (4, (2, 3, 1)),
 (2, (2, 3, 3)),
 (1, (2, 3, 4)),
 (5, (2, 4, 1)),
 (3, (2, 4, 3)),
 (2, (2, 4, 4)),
 (1, (2, 4, 5)),
 (6, (2, 5, 1)),
 (4, (2, 5, 3)),
 (3, (2, 5, 4)),
 (2, (2, 5, 5)),
 (1, (2, 5, 6)),
 (7, (2, 6, 1)),
 (5, (2, 6, 3)),
 (4, (2, 6, 4)),
 (3, (2, 6, 5)),
 (2, (2, 6, 6)),
 (1, (2, 6, 7)),
 (8, (2, 7, 1)),
 (6, (2, 7, 3)),
 (5, (2, 7, 4)),
 (4, (2, 7, 5)),
 (3, (2, 7, 6)),
 (2, (2, 7, 7)),
 (1, (2, 7, 8)),
 (9, (2, 8, 1)),
 (7, (2, 8, 3)),
 (6, (2, 8, 4)),
 (5, (2, 8, 5)),
 (4, (2, 8, 6)),
 (3, (2, 8, 7)),
 (2, (2, 8, 8)),
 (1, (2, 8, 9)),
 (8, (2, 9, 3)),
 (7, (2, 9, 4)),
 (6, (2, 9, 5)),
 (5, (2, 9, 6)),
 (4, (2, 9, 7)),
 (3, (2, 9, 8)),
 (2, (2, 9, 9)),
 (3, (3, 1, 1)),
 (2, (3, 1, 2)),
 (4, (3, 2, 1)),
 (3, (3, 2, 2)),
 (1, (3, 2, 4)),
 (5, (3, 3, 1)),
 (4, (3, 3, 2)),
 (2, (3, 3, 4)),
 (1, (3, 3, 5)),
 (6, (3, 4, 1)),
 (5, (3, 4, 2)),
 (3, (3, 4, 4)),
 (2, (3, 4, 5)),
 (1, (3, 4, 6)),
 (7, (3, 5, 1)),
 (6, (3, 5, 2)),
 (4, (3, 5, 4)),
 (3, (3, 5, 5)),
 (2, (3, 5, 6)),
 (1, (3, 5, 7)),
 (8, (3, 6, 1)),
 (7, (3, 6, 2)),
 (5, (3, 6, 4)),
 (4, (3, 6, 5)),
 (3, (3, 6, 6)),
 (2, (3, 6, 7)),
 (1, (3, 6, 8)),
 (9, (3, 7, 1)),
 (8, (3, 7, 2)),
 (6, (3, 7, 4)),
 (5, (3, 7, 5)),
 (4, (3, 7, 6)),
 (3, (3, 7, 7)),
 (2, (3, 7, 8)),
 (1, (3, 7, 9)),
 (9, (3, 8, 2)),
 (7, (3, 8, 4)),
 (6, (3, 8, 5)),
 (5, (3, 8, 6)),
 (4, (3, 8, 7)),
 (3, (3, 8, 8)),
 (2, (3, 8, 9)),
 (8, (3, 9, 4)),
 (7, (3, 9, 5)),
 (6, (3, 9, 6)),
 (5, (3, 9, 7)),
 (4, (3, 9, 8)),
 (3, (3, 9, 9)),
 (4, (4, 1, 1)),
 (3, (4, 1, 2)),
 (2, (4, 1, 3)),
 (5, (4, 2, 1)),
 (4, (4, 2, 2)),
 (3, (4, 2, 3)),
 (1, (4, 2, 5)),
 (6, (4, 3, 1)),
 (5, (4, 3, 2)),
 (4, (4, 3, 3)),
 (2, (4, 3, 5)),
 (1, (4, 3, 6)),
 (7, (4, 4, 1)),
 (6, (4, 4, 2)),
 (5, (4, 4, 3)),
 (3, (4, 4, 5)),
 (2, (4, 4, 6)),
 (1, (4, 4, 7)),
 (8, (4, 5, 1)),
 (7, (4, 5, 2)),
 (6, (4, 5, 3)),
 (4, (4, 5, 5)),
 (3, (4, 5, 6)),
 (2, (4, 5, 7)),
 (1, (4, 5, 8)),
 (9, (4, 6, 1)),
 (8, (4, 6, 2)),
 (7, (4, 6, 3)),
 (5, (4, 6, 5)),
 (4, (4, 6, 6)),
 (3, (4, 6, 7)),
 (2, (4, 6, 8)),
 (1, (4, 6, 9)),
 (9, (4, 7, 2)),
 (8, (4, 7, 3)),
 (6, (4, 7, 5)),
 (5, (4, 7, 6)),
 (4, (4, 7, 7)),
 (3, (4, 7, 8)),
 (2, (4, 7, 9)),
 (9, (4, 8, 3)),
 (7, (4, 8, 5)),
 (6, (4, 8, 6)),
 (5, (4, 8, 7)),
 (4, (4, 8, 8)),
 (3, (4, 8, 9)),
 (8, (4, 9, 5)),
 (7, (4, 9, 6)),
 (6, (4, 9, 7)),
 (5, (4, 9, 8)),
 (4, (4, 9, 9)),
 (5, (5, 1, 1)),
 (4, (5, 1, 2)),
 (3, (5, 1, 3)),
 (2, (5, 1, 4)),
 (6, (5, 2, 1)),
 (5, (5, 2, 2)),
 (4, (5, 2, 3)),
 (3, (5, 2, 4)),
 (1, (5, 2, 6)),
 (7, (5, 3, 1)),
 (6, (5, 3, 2)),
 (5, (5, 3, 3)),
 (4, (5, 3, 4)),
 (2, (5, 3, 6)),
 (1, (5, 3, 7)),
 (8, (5, 4, 1)),
 (7, (5, 4, 2)),
 (6, (5, 4, 3)),
 (5, (5, 4, 4)),
 (3, (5, 4, 6)),
 (2, (5, 4, 7)),
 (1, (5, 4, 8)),
 (9, (5, 5, 1)),
 (8, (5, 5, 2)),
 (7, (5, 5, 3)),
 (6, (5, 5, 4)),
 (4, (5, 5, 6)),
 (3, (5, 5, 7)),
 (2, (5, 5, 8)),
 (1, (5, 5, 9)),
 (9, (5, 6, 2)),
 (8, (5, 6, 3)),
 (7, (5, 6, 4)),
 (5, (5, 6, 6)),
 (4, (5, 6, 7)),
 (3, (5, 6, 8)),
 (2, (5, 6, 9)),
 (9, (5, 7, 3)),
 (8, (5, 7, 4)),
 (6, (5, 7, 6)),
 (5, (5, 7, 7)),
 (4, (5, 7, 8)),
 (3, (5, 7, 9)),
 (9, (5, 8, 4)),
 (7, (5, 8, 6)),
 (6, (5, 8, 7)),
 (5, (5, 8, 8)),
 (4, (5, 8, 9)),
 (8, (5, 9, 6)),
 (7, (5, 9, 7)),
 (6, (5, 9, 8)),
 (5, (5, 9, 9)),
 (6, (6, 1, 1)),
 (5, (6, 1, 2)),
 (4, (6, 1, 3)),
 (3, (6, 1, 4)),
 (2, (6, 1, 5)),
 (7, (6, 2, 1)),
 (6, (6, 2, 2)),
 (5, (6, 2, 3)),
 (4, (6, 2, 4)),
 (3, (6, 2, 5)),
 (1, (6, 2, 7)),
 (8, (6, 3, 1)),
 (7, (6, 3, 2)),
 (6, (6, 3, 3)),
 (5, (6, 3, 4)),
 (4, (6, 3, 5)),
 (2, (6, 3, 7)),
 (1, (6, 3, 8)),
 (9, (6, 4, 1)),
 (8, (6, 4, 2)),
 (7, (6, 4, 3)),
 (6, (6, 4, 4)),
 (5, (6, 4, 5)),
 (3, (6, 4, 7)),
 (2, (6, 4, 8)),
 (1, (6, 4, 9)),
 (9, (6, 5, 2)),
 (8, (6, 5, 3)),
 (7, (6, 5, 4)),
 (6, (6, 5, 5)),
 (4, (6, 5, 7)),
 (3, (6, 5, 8)),
 (2, (6, 5, 9)),
 (9, (6, 6, 3)),
 (8, (6, 6, 4)),
 (7, (6, 6, 5)),
 (5, (6, 6, 7)),
 (4, (6, 6, 8)),
 (3, (6, 6, 9)),
 (9, (6, 7, 4)),
 (8, (6, 7, 5)),
 (6, (6, 7, 7)),
 (5, (6, 7, 8)),
 (4, (6, 7, 9)),
 (9, (6, 8, 5)),
 (7, (6, 8, 7)),
 (6, (6, 8, 8)),
 (5, (6, 8, 9)),
 (8, (6, 9, 7)),
 (7, (6, 9, 8)),
 (6, (6, 9, 9)),
 (7, (7, 1, 1)),
 (6, (7, 1, 2)),
 (5, (7, 1, 3)),
 (4, (7, 1, 4)),
 (3, (7, 1, 5)),
 (2, (7, 1, 6)),
 (8, (7, 2, 1)),
 (7, (7, 2, 2)),
 (6, (7, 2, 3)),
 (5, (7, 2, 4)),
 (4, (7, 2, 5)),
 (3, (7, 2, 6)),
 (1, (7, 2, 8)),
 (9, (7, 3, 1)),
 (8, (7, 3, 2)),
 (7, (7, 3, 3)),
 (6, (7, 3, 4)),
 (5, (7, 3, 5)),
 (4, (7, 3, 6)),
 (2, (7, 3, 8)),
 (1, (7, 3, 9)),
 (9, (7, 4, 2)),
 (8, (7, 4, 3)),
 (7, (7, 4, 4)),
 (6, (7, 4, 5)),
 (5, (7, 4, 6)),
 (3, (7, 4, 8)),
 (2, (7, 4, 9)),
 (9, (7, 5, 3)),
 (8, (7, 5, 4)),
 (7, (7, 5, 5)),
 (6, (7, 5, 6)),
 (4, (7, 5, 8)),
 (3, (7, 5, 9)),
 (9, (7, 6, 4)),
 (8, (7, 6, 5)),
 (7, (7, 6, 6)),
 (5, (7, 6, 8)),
 (4, (7, 6, 9)),
 (9, (7, 7, 5)),
 (8, (7, 7, 6)),
 (6, (7, 7, 8)),
 (5, (7, 7, 9)),
 (9, (7, 8, 6)),
 (7, (7, 8, 8)),
 (6, (7, 8, 9)),
 (8, (7, 9, 8)),
 (7, (7, 9, 9)),
 (8, (8, 1, 1)),
 (7, (8, 1, 2)),
 (6, (8, 1, 3)),
 (5, (8, 1, 4)),
 (4, (8, 1, 5)),
 (3, (8, 1, 6)),
 (2, (8, 1, 7)),
 (9, (8, 2, 1)),
 (8, (8, 2, 2)),
 (7, (8, 2, 3)),
 (6, (8, 2, 4)),
 (5, (8, 2, 5)),
 (4, (8, 2, 6)),
 (3, (8, 2, 7)),
 (1, (8, 2, 9)),
 (9, (8, 3, 2)),
 (8, (8, 3, 3)),
 (7, (8, 3, 4)),
 (6, (8, 3, 5)),
 (5, (8, 3, 6)),
 (4, (8, 3, 7)),
 (2, (8, 3, 9)),
 (9, (8, 4, 3)),
 (8, (8, 4, 4)),
 (7, (8, 4, 5)),
 (6, (8, 4, 6)),
 (5, (8, 4, 7)),
 (3, (8, 4, 9)),
 (9, (8, 5, 4)),
 (8, (8, 5, 5)),
 (7, (8, 5, 6)),
 (6, (8, 5, 7)),
 (4, (8, 5, 9)),
 (9, (8, 6, 5)),
 (8, (8, 6, 6)),
 (7, (8, 6, 7)),
 (5, (8, 6, 9)),
 (9, (8, 7, 6)),
 (8, (8, 7, 7)),
 (6, (8, 7, 9)),
 (9, (8, 8, 7)),
 (7, (8, 8, 9)),
 (8, (8, 9, 9)),
 (9, (9, 1, 1)),
 (8, (9, 1, 2)),
 (7, (9, 1, 3)),
 (6, (9, 1, 4)),
 (5, (9, 1, 5)),
 (4, (9, 1, 6)),
 (3, (9, 1, 7)),
 (2, (9, 1, 8)),
 (9, (9, 2, 2)),
 (8, (9, 2, 3)),
 (7, (9, 2, 4)),
 (6, (9, 2, 5)),
 (5, (9, 2, 6)),
 (4, (9, 2, 7)),
 (3, (9, 2, 8)),
 (9, (9, 3, 3)),
 (8, (9, 3, 4)),
 (7, (9, 3, 5)),
 (6, (9, 3, 6)),
 (5, (9, 3, 7)),
 (4, (9, 3, 8)),
 (9, (9, 4, 4)),
 (8, (9, 4, 5)),
 (7, (9, 4, 6)),
 (6, (9, 4, 7)),
 (5, (9, 4, 8)),
 (9, (9, 5, 5)),
 (8, (9, 5, 6)),
 (7, (9, 5, 7)),
 (6, (9, 5, 8)),
 (9, (9, 6, 6)),
 (8, (9, 6, 7)),
 (7, (9, 6, 8)),
 (9, (9, 7, 7)),
 (8, (9, 7, 8)),
 (9, (9, 8, 8))]
i: 1
shape (20,)
i: 2
shape (20,)
i: 3
shape (20,)
i: 4
shape (20,)
i: 5
shape (20,)
i: 6
shape (20,)
i: 7
shape (20,)
i: 8
shape (20,)
i: 9
shape (20,)
mean_all: [None, array([-1.9936381e-01, -3.0449433e+00,  3.1637216e-01,  3.5317925e-01,
        1.5716958e-01, -2.6949212e-01, -3.9922994e-02,  2.7895653e-01,
        4.5595276e-01, -3.6108878e-01, -6.2807679e-01, -9.2918617e-01,
       -5.7638898e-02,  2.5363469e-01,  2.6030399e-04,  4.1089559e-01,
        3.5212073e-01, -6.9376069e-01,  6.7473847e-01, -1.4399655e-01],
      dtype=float32), array([-0.69335   , -1.5670638 , -0.2776381 ,  0.5195193 , -0.06148044,
        0.17703532,  0.01998041, -0.1239282 , -0.00356352, -0.7437236 ,
        1.235879  , -0.7206952 , -0.06098007,  0.77633834, -0.038671  ,
        0.25862446, -0.02666232, -0.49639776,  0.7520891 , -0.04703749],
      dtype=float32), array([-0.6917339 , -0.6554343 , -0.1959785 ,  0.10499013,  0.00424209,
        0.37285024, -0.01074805, -0.18483281,  0.05632415, -0.4978645 ,
        1.2802064 , -0.30252743, -0.11487148,  0.6012252 ,  0.0069179 ,
       -0.04976524, -0.18960738, -0.40190053,  0.6561424 ,  0.1163788 ],
      dtype=float32), array([-0.5675651 , -0.29400188, -0.13226633,  0.01515077, -0.07586524,
        0.2223464 , -0.07365371, -0.12386615, -0.09379134, -0.33992577,
        1.0646598 ,  0.09939983, -0.09432893,  0.5231715 , -0.01751252,
       -0.01628455, -0.19586003, -0.23789573,  0.2919507 ,  0.15214838],
      dtype=float32), array([-0.29098046,  0.10360245, -0.06779584, -0.18602623, -0.45541465,
       -0.02038914, -0.1249714 ,  0.02642654, -0.2951863 , -0.20000544,
        0.8120367 ,  0.10841651, -0.05731246,  0.01948908, -0.05057598,
       -0.18785635, -0.15800603,  0.19981733,  0.31284633,  0.16682541],
      dtype=float32), array([-0.08944257,  0.54810876, -0.01428232, -0.26641673, -0.29614326,
       -0.1943011 , -0.18132193,  0.13593361, -0.48431733, -0.09041674,
        0.20595881,  0.432076  , -0.07371674, -0.03651543, -0.08182944,
       -0.06651542, -0.16547723,  0.26423588, -0.2076456 ,  0.1665813 ],
      dtype=float32), array([ 0.10042736,  0.8139208 ,  0.15753727, -0.57244724, -0.37129715,
       -0.22958814, -0.22435318,  0.26781282, -0.42808482,  0.20506807,
       -0.15352309,  0.7037447 , -0.0429669 , -0.22659022, -0.1497628 ,
       -0.16587478, -0.11606232,  0.40219536, -0.30536786,  0.11710027],
      dtype=float32), array([ 0.5536214 ,  1.1217338 ,  0.8211161 , -0.6954735 , -0.3803079 ,
        0.769313  , -0.43477333,  0.43598482,  0.7385001 ,  0.28364542,
       -0.46483034,  0.8371411 , -0.24105456, -0.480669  , -0.23180354,
       -0.14751972,  0.0932571 ,  0.40717474, -0.7232273 ,  0.07676989],
      dtype=float32), array([ 0.93756974,  1.3282057 ,  1.6578668 , -0.9651174 , -0.46257672,
        2.0917883 , -0.6954509 ,  0.57348424,  2.4812508 ,  0.5571012 ,
       -0.66840315,  1.1391284 , -0.5471541 , -0.6966798 , -0.24207863,
       -0.13762005,  0.41999516,  0.7433686 , -0.8147058 ,  0.01010035],
      dtype=float32)]
---
Target calculation: 1+1-1
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]) 
tar: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0 63  1]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[0.    0.    0.    0.    0.    0.    0.    0.984 0.016]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.2 -3.0  0.3  0.4  0.2 -0.3 -0.0  0.3  0.5 -0.4 -0.6 -0.9 -0.1  0.3  0.0  0.4  0.4 -0.7  0.7 -0.1 
-0.7 -1.6 -0.3  0.5 -0.1  0.2  0.0 -0.1 -0.0 -0.7  1.2 -0.7 -0.1  0.8 -0.0  0.3 -0.0 -0.5  0.8 -0.0 
-0.7 -0.7 -0.2  0.1  0.0  0.4 -0.0 -0.2  0.1 -0.5  1.3 -0.3 -0.1  0.6  0.0 -0.0 -0.2 -0.4  0.7  0.1 
-0.6 -0.3 -0.1  0.0 -0.1  0.2 -0.1 -0.1 -0.1 -0.3  1.1  0.1 -0.1  0.5 -0.0 -0.0 -0.2 -0.2  0.3  0.2 
-0.3  0.1 -0.1 -0.2 -0.5 -0.0 -0.1  0.0 -0.3 -0.2  0.8  0.1 -0.1  0.0 -0.1 -0.2 -0.2  0.2  0.3  0.2 
-0.1  0.5 -0.0 -0.3 -0.3 -0.2 -0.2  0.1 -0.5 -0.1  0.2  0.4 -0.1 -0.0 -0.1 -0.1 -0.2  0.3 -0.2  0.2 
 0.1  0.8  0.2 -0.6 -0.4 -0.2 -0.2  0.3 -0.4  0.2 -0.2  0.7 -0.0 -0.2 -0.1 -0.2 -0.1  0.4 -0.3  0.1 
 0.6  1.1  0.8 -0.7 -0.4  0.8 -0.4  0.4  0.7  0.3 -0.5  0.8 -0.2 -0.5 -0.2 -0.1  0.1  0.4 -0.7  0.1 
 0.9  1.3  1.7 -1.0 -0.5  2.1 -0.7  0.6  2.5  0.6 -0.7  1.1 -0.5 -0.7 -0.2 -0.1  0.4  0.7 -0.8  0.0 
Minimum distance of calculation. 
true answer: 1 
indices: 1 
distance: 0.0
---
Target calculation: 1+9-8
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]) 
tar: tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0 64  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  0.  1.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.2 -0.3 -0.0  0.3  0.5 -0.4 -0.6 -0.9 -0.1  0.3  0.0  0.4  0.4 -0.7  0.7 -0.1 
-0.7 -1.6 -0.3  0.5 -0.1  0.2  0.0 -0.1 -0.0 -0.7  1.2 -0.7 -0.1  0.8 -0.0  0.3 -0.0 -0.5  0.8 -0.0 
-0.7 -0.7 -0.2  0.1  0.0  0.4 -0.0 -0.2  0.1 -0.5  1.3 -0.3 -0.1  0.6  0.0 -0.0 -0.2 -0.4  0.7  0.1 
-0.6 -0.3 -0.1  0.0 -0.1  0.2 -0.1 -0.1 -0.1 -0.3  1.1  0.1 -0.1  0.5 -0.0 -0.0 -0.2 -0.2  0.3  0.2 
-0.3  0.1 -0.1 -0.2 -0.5 -0.0 -0.1  0.0 -0.3 -0.2  0.8  0.1 -0.1  0.0 -0.1 -0.2 -0.2  0.2  0.3  0.2 
-0.1  0.5 -0.0 -0.3 -0.3 -0.2 -0.2  0.1 -0.5 -0.1  0.2  0.4 -0.1 -0.0 -0.1 -0.1 -0.2  0.3 -0.2  0.2 
 0.1  0.8  0.2 -0.6 -0.4 -0.2 -0.2  0.3 -0.4  0.2 -0.2  0.7 -0.0 -0.2 -0.1 -0.2 -0.1  0.4 -0.3  0.1 
 0.6  1.1  0.8 -0.7 -0.4  0.8 -0.4  0.4  0.7  0.3 -0.5  0.8 -0.2 -0.5 -0.2 -0.1  0.1  0.4 -0.7  0.1 
 0.9  1.3  1.7 -1.0 -0.5  2.1 -0.7  0.6  2.5  0.6 -0.7  1.1 -0.5 -0.7 -0.2 -0.1  0.4  0.7 -0.8  0.0 
Minimum distance of calculation. 
true answer: 2 
indices: 1 
distance: 2.534409
---
Target calculation: 1+8-4
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]) 
tar: tensor([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0 62  2]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [0.    0.    0.    0.    0.    0.    0.    0.969 0.031]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]
 [  nan   nan   nan   nan   nan   nan   nan   nan   nan]]
-0.2 -3.0  0.3  0.4  0.2 -0.3 -0.0  0.3  0.5 -0.4 -0.6 -0.9 -0.1  0.3  0.0  0.4  0.4 -0.7  0.7 -0.1 
-0.7 -1.6 -0.3  0.5 -0.1  0.2  0.0 -0.1 -0.0 -0.7  1.2 -0.7 -0.1  0.8 -0.0  0.3 -0.0 -0.5  0.8 -0.0 
-0.7 -0.7 -0.2  0.1  0.0  0.4 -0.0 -0.2  0.1 -0.5  1.3 -0.3 -0.1  0.6  0.0 -0.0 -0.2 -0.4  0.7  0.1 
-0.6 -0.3 -0.1  0.0 -0.1  0.2 -0.1 -0.1 -0.1 -0.3  1.1  0.1 -0.1  0.5 -0.0 -0.0 -0.2 -0.2  0.3  0.2 
-0.3  0.1 -0.1 -0.2 -0.5 -0.0 -0.1  0.0 -0.3 -0.2  0.8  0.1 -0.1  0.0 -0.1 -0.2 -0.2  0.2  0.3  0.2 
-0.1  0.5 -0.0 -0.3 -0.3 -0.2 -0.2  0.1 -0.5 -0.1  0.2  0.4 -0.1 -0.0 -0.1 -0.1 -0.2  0.3 -0.2  0.2 
 0.1  0.8  0.2 -0.6 -0.4 -0.2 -0.2  0.3 -0.4  0.2 -0.2  0.7 -0.0 -0.2 -0.1 -0.2 -0.1  0.4 -0.3  0.1 
 0.6  1.1  0.8 -0.7 -0.4  0.8 -0.4  0.4  0.7  0.3 -0.5  0.8 -0.2 -0.5 -0.2 -0.1  0.1  0.4 -0.7  0.1 
 0.9  1.3  1.7 -1.0 -0.5  2.1 -0.7  0.6  2.5  0.6 -0.7  1.1 -0.5 -0.7 -0.2 -0.1  0.4  0.7 -0.8  0.0 
Minimum distance of calculation. 
true answer: 5 
indices: 1 
distance: 3.4791498
---
Target calculation: 2+7-1
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(64) 
Accuracy (ratio) tensor(1.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0 64  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  0.  1.  0.]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.2 -0.3 -0.0  0.3  0.5 -0.4 -0.6 -0.9 -0.1  0.3  0.0  0.4  0.4 -0.7  0.7 -0.1 
-0.7 -1.6 -0.3  0.5 -0.1  0.2  0.0 -0.1 -0.0 -0.7  1.2 -0.7 -0.1  0.8 -0.0  0.3 -0.0 -0.5  0.8 -0.0 
-0.7 -0.7 -0.2  0.1  0.0  0.4 -0.0 -0.2  0.1 -0.5  1.3 -0.3 -0.1  0.6  0.0 -0.0 -0.2 -0.4  0.7  0.1 
-0.6 -0.3 -0.1  0.0 -0.1  0.2 -0.1 -0.1 -0.1 -0.3  1.1  0.1 -0.1  0.5 -0.0 -0.0 -0.2 -0.2  0.3  0.2 
-0.3  0.1 -0.1 -0.2 -0.5 -0.0 -0.1  0.0 -0.3 -0.2  0.8  0.1 -0.1  0.0 -0.1 -0.2 -0.2  0.2  0.3  0.2 
-0.1  0.5 -0.0 -0.3 -0.3 -0.2 -0.2  0.1 -0.5 -0.1  0.2  0.4 -0.1 -0.0 -0.1 -0.1 -0.2  0.3 -0.2  0.2 
 0.1  0.8  0.2 -0.6 -0.4 -0.2 -0.2  0.3 -0.4  0.2 -0.2  0.7 -0.0 -0.2 -0.1 -0.2 -0.1  0.4 -0.3  0.1 
 0.6  1.1  0.8 -0.7 -0.4  0.8 -0.4  0.4  0.7  0.3 -0.5  0.8 -0.2 -0.5 -0.2 -0.1  0.1  0.4 -0.7  0.1 
 0.9  1.3  1.7 -1.0 -0.5  2.1 -0.7  0.6  2.5  0.6 -0.7  1.1 -0.5 -0.7 -0.2 -0.1  0.4  0.7 -0.8  0.0 
Minimum distance of calculation. 
true answer: 8 
indices: 6 
distance: 2.5949614
---
Target calculation: 2+7-2
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]) 
tar: tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0 64  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  0.  1.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.2 -0.3 -0.0  0.3  0.5 -0.4 -0.6 -0.9 -0.1  0.3  0.0  0.4  0.4 -0.7  0.7 -0.1 
-0.7 -1.6 -0.3  0.5 -0.1  0.2  0.0 -0.1 -0.0 -0.7  1.2 -0.7 -0.1  0.8 -0.0  0.3 -0.0 -0.5  0.8 -0.0 
-0.7 -0.7 -0.2  0.1  0.0  0.4 -0.0 -0.2  0.1 -0.5  1.3 -0.3 -0.1  0.6  0.0 -0.0 -0.2 -0.4  0.7  0.1 
-0.6 -0.3 -0.1  0.0 -0.1  0.2 -0.1 -0.1 -0.1 -0.3  1.1  0.1 -0.1  0.5 -0.0 -0.0 -0.2 -0.2  0.3  0.2 
-0.3  0.1 -0.1 -0.2 -0.5 -0.0 -0.1  0.0 -0.3 -0.2  0.8  0.1 -0.1  0.0 -0.1 -0.2 -0.2  0.2  0.3  0.2 
-0.1  0.5 -0.0 -0.3 -0.3 -0.2 -0.2  0.1 -0.5 -0.1  0.2  0.4 -0.1 -0.0 -0.1 -0.1 -0.2  0.3 -0.2  0.2 
 0.1  0.8  0.2 -0.6 -0.4 -0.2 -0.2  0.3 -0.4  0.2 -0.2  0.7 -0.0 -0.2 -0.1 -0.2 -0.1  0.4 -0.3  0.1 
 0.6  1.1  0.8 -0.7 -0.4  0.8 -0.4  0.4  0.7  0.3 -0.5  0.8 -0.2 -0.5 -0.2 -0.1  0.1  0.4 -0.7  0.1 
 0.9  1.3  1.7 -1.0 -0.5  2.1 -0.7  0.6  2.5  0.6 -0.7  1.1 -0.5 -0.7 -0.2 -0.1  0.4  0.7 -0.8  0.0 
Minimum distance of calculation. 
true answer: 7 
indices: 7 
distance: 3.434548e-08
---
Target calculation: 3+3-3
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0 64  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  0.  1.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.2 -0.3 -0.0  0.3  0.5 -0.4 -0.6 -0.9 -0.1  0.3  0.0  0.4  0.4 -0.7  0.7 -0.1 
-0.7 -1.6 -0.3  0.5 -0.1  0.2  0.0 -0.1 -0.0 -0.7  1.2 -0.7 -0.1  0.8 -0.0  0.3 -0.0 -0.5  0.8 -0.0 
-0.7 -0.7 -0.2  0.1  0.0  0.4 -0.0 -0.2  0.1 -0.5  1.3 -0.3 -0.1  0.6  0.0 -0.0 -0.2 -0.4  0.7  0.1 
-0.6 -0.3 -0.1  0.0 -0.1  0.2 -0.1 -0.1 -0.1 -0.3  1.1  0.1 -0.1  0.5 -0.0 -0.0 -0.2 -0.2  0.3  0.2 
-0.3  0.1 -0.1 -0.2 -0.5 -0.0 -0.1  0.0 -0.3 -0.2  0.8  0.1 -0.1  0.0 -0.1 -0.2 -0.2  0.2  0.3  0.2 
-0.1  0.5 -0.0 -0.3 -0.3 -0.2 -0.2  0.1 -0.5 -0.1  0.2  0.4 -0.1 -0.0 -0.1 -0.1 -0.2  0.3 -0.2  0.2 
 0.1  0.8  0.2 -0.6 -0.4 -0.2 -0.2  0.3 -0.4  0.2 -0.2  0.7 -0.0 -0.2 -0.1 -0.2 -0.1  0.4 -0.3  0.1 
 0.6  1.1  0.8 -0.7 -0.4  0.8 -0.4  0.4  0.7  0.3 -0.5  0.8 -0.2 -0.5 -0.2 -0.1  0.1  0.4 -0.7  0.1 
 0.9  1.3  1.7 -1.0 -0.5  2.1 -0.7  0.6  2.5  0.6 -0.7  1.1 -0.5 -0.7 -0.2 -0.1  0.4  0.7 -0.8  0.0 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 0.0
---
Target calculation: 3+5-2
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0 64  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  0.  1.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.2 -0.3 -0.0  0.3  0.5 -0.4 -0.6 -0.9 -0.1  0.3  0.0  0.4  0.4 -0.7  0.7 -0.1 
-0.7 -1.6 -0.3  0.5 -0.1  0.2  0.0 -0.1 -0.0 -0.7  1.2 -0.7 -0.1  0.8 -0.0  0.3 -0.0 -0.5  0.8 -0.0 
-0.7 -0.7 -0.2  0.1  0.0  0.4 -0.0 -0.2  0.1 -0.5  1.3 -0.3 -0.1  0.6  0.0 -0.0 -0.2 -0.4  0.7  0.1 
-0.6 -0.3 -0.1  0.0 -0.1  0.2 -0.1 -0.1 -0.1 -0.3  1.1  0.1 -0.1  0.5 -0.0 -0.0 -0.2 -0.2  0.3  0.2 
-0.3  0.1 -0.1 -0.2 -0.5 -0.0 -0.1  0.0 -0.3 -0.2  0.8  0.1 -0.1  0.0 -0.1 -0.2 -0.2  0.2  0.3  0.2 
-0.1  0.5 -0.0 -0.3 -0.3 -0.2 -0.2  0.1 -0.5 -0.1  0.2  0.4 -0.1 -0.0 -0.1 -0.1 -0.2  0.3 -0.2  0.2 
 0.1  0.8  0.2 -0.6 -0.4 -0.2 -0.2  0.3 -0.4  0.2 -0.2  0.7 -0.0 -0.2 -0.1 -0.2 -0.1  0.4 -0.3  0.1 
 0.6  1.1  0.8 -0.7 -0.4  0.8 -0.4  0.4  0.7  0.3 -0.5  0.8 -0.2 -0.5 -0.2 -0.1  0.1  0.4 -0.7  0.1 
 0.9  1.3  1.7 -1.0 -0.5  2.1 -0.7  0.6  2.5  0.6 -0.7  1.1 -0.5 -0.7 -0.2 -0.1  0.4  0.7 -0.8  0.0 
Minimum distance of calculation. 
true answer: 6 
indices: 6 
distance: 1.2233413
---
Target calculation: 3+6-3
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]) 
tar: tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0 64  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  0.  1.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.2 -0.3 -0.0  0.3  0.5 -0.4 -0.6 -0.9 -0.1  0.3  0.0  0.4  0.4 -0.7  0.7 -0.1 
-0.7 -1.6 -0.3  0.5 -0.1  0.2  0.0 -0.1 -0.0 -0.7  1.2 -0.7 -0.1  0.8 -0.0  0.3 -0.0 -0.5  0.8 -0.0 
-0.7 -0.7 -0.2  0.1  0.0  0.4 -0.0 -0.2  0.1 -0.5  1.3 -0.3 -0.1  0.6  0.0 -0.0 -0.2 -0.4  0.7  0.1 
-0.6 -0.3 -0.1  0.0 -0.1  0.2 -0.1 -0.1 -0.1 -0.3  1.1  0.1 -0.1  0.5 -0.0 -0.0 -0.2 -0.2  0.3  0.2 
-0.3  0.1 -0.1 -0.2 -0.5 -0.0 -0.1  0.0 -0.3 -0.2  0.8  0.1 -0.1  0.0 -0.1 -0.2 -0.2  0.2  0.3  0.2 
-0.1  0.5 -0.0 -0.3 -0.3 -0.2 -0.2  0.1 -0.5 -0.1  0.2  0.4 -0.1 -0.0 -0.1 -0.1 -0.2  0.3 -0.2  0.2 
 0.1  0.8  0.2 -0.6 -0.4 -0.2 -0.2  0.3 -0.4  0.2 -0.2  0.7 -0.0 -0.2 -0.1 -0.2 -0.1  0.4 -0.3  0.1 
 0.6  1.1  0.8 -0.7 -0.4  0.8 -0.4  0.4  0.7  0.3 -0.5  0.8 -0.2 -0.5 -0.2 -0.1  0.1  0.4 -0.7  0.1 
 0.9  1.3  1.7 -1.0 -0.5  2.1 -0.7  0.6  2.5  0.6 -0.7  1.1 -0.5 -0.7 -0.2 -0.1  0.4  0.7 -0.8  0.0 
Minimum distance of calculation. 
true answer: 6 
indices: 6 
distance: 4.7268635e-08
---
Target calculation: 5+3-5
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]) 
tar: tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Accuracy (count): tensor(0) 
Accuracy (ratio) tensor(0.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0 64  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  0.  1.  0.]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.2 -0.3 -0.0  0.3  0.5 -0.4 -0.6 -0.9 -0.1  0.3  0.0  0.4  0.4 -0.7  0.7 -0.1 
-0.7 -1.6 -0.3  0.5 -0.1  0.2  0.0 -0.1 -0.0 -0.7  1.2 -0.7 -0.1  0.8 -0.0  0.3 -0.0 -0.5  0.8 -0.0 
-0.7 -0.7 -0.2  0.1  0.0  0.4 -0.0 -0.2  0.1 -0.5  1.3 -0.3 -0.1  0.6  0.0 -0.0 -0.2 -0.4  0.7  0.1 
-0.6 -0.3 -0.1  0.0 -0.1  0.2 -0.1 -0.1 -0.1 -0.3  1.1  0.1 -0.1  0.5 -0.0 -0.0 -0.2 -0.2  0.3  0.2 
-0.3  0.1 -0.1 -0.2 -0.5 -0.0 -0.1  0.0 -0.3 -0.2  0.8  0.1 -0.1  0.0 -0.1 -0.2 -0.2  0.2  0.3  0.2 
-0.1  0.5 -0.0 -0.3 -0.3 -0.2 -0.2  0.1 -0.5 -0.1  0.2  0.4 -0.1 -0.0 -0.1 -0.1 -0.2  0.3 -0.2  0.2 
 0.1  0.8  0.2 -0.6 -0.4 -0.2 -0.2  0.3 -0.4  0.2 -0.2  0.7 -0.0 -0.2 -0.1 -0.2 -0.1  0.4 -0.3  0.1 
 0.6  1.1  0.8 -0.7 -0.4  0.8 -0.4  0.4  0.7  0.3 -0.5  0.8 -0.2 -0.5 -0.2 -0.1  0.1  0.4 -0.7  0.1 
 0.9  1.3  1.7 -1.0 -0.5  2.1 -0.7  0.6  2.5  0.6 -0.7  1.1 -0.5 -0.7 -0.2 -0.1  0.4  0.7 -0.8  0.0 
Minimum distance of calculation. 
true answer: 3 
indices: 3 
distance: 6.604023e-08
---
Target calculation: 9+7-8
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]) 
tar: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
Accuracy (count): tensor(64) 
Accuracy (ratio) tensor(1.)
Accuracy:
 [[ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0 64  0]
 [ 0  0  0  0  0  0  0  0  0]]
Accuracy:
 [[nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [nan nan nan nan nan nan nan nan nan]
 [ 0.  0.  0.  0.  0.  0.  0.  1.  0.]
 [nan nan nan nan nan nan nan nan nan]]
-0.2 -3.0  0.3  0.4  0.2 -0.3 -0.0  0.3  0.5 -0.4 -0.6 -0.9 -0.1  0.3  0.0  0.4  0.4 -0.7  0.7 -0.1 
-0.7 -1.6 -0.3  0.5 -0.1  0.2  0.0 -0.1 -0.0 -0.7  1.2 -0.7 -0.1  0.8 -0.0  0.3 -0.0 -0.5  0.8 -0.0 
-0.7 -0.7 -0.2  0.1  0.0  0.4 -0.0 -0.2  0.1 -0.5  1.3 -0.3 -0.1  0.6  0.0 -0.0 -0.2 -0.4  0.7  0.1 
-0.6 -0.3 -0.1  0.0 -0.1  0.2 -0.1 -0.1 -0.1 -0.3  1.1  0.1 -0.1  0.5 -0.0 -0.0 -0.2 -0.2  0.3  0.2 
-0.3  0.1 -0.1 -0.2 -0.5 -0.0 -0.1  0.0 -0.3 -0.2  0.8  0.1 -0.1  0.0 -0.1 -0.2 -0.2  0.2  0.3  0.2 
-0.1  0.5 -0.0 -0.3 -0.3 -0.2 -0.2  0.1 -0.5 -0.1  0.2  0.4 -0.1 -0.0 -0.1 -0.1 -0.2  0.3 -0.2  0.2 
 0.1  0.8  0.2 -0.6 -0.4 -0.2 -0.2  0.3 -0.4  0.2 -0.2  0.7 -0.0 -0.2 -0.1 -0.2 -0.1  0.4 -0.3  0.1 
 0.6  1.1  0.8 -0.7 -0.4  0.8 -0.4  0.4  0.7  0.3 -0.5  0.8 -0.2 -0.5 -0.2 -0.1  0.1  0.4 -0.7  0.1 
 0.9  1.3  1.7 -1.0 -0.5  2.1 -0.7  0.6  2.5  0.6 -0.7  1.1 -0.5 -0.7 -0.2 -0.1  0.4  0.7 -0.8  0.0 
Minimum distance of calculation. 
true answer: 8 
indices: 8 
distance: 0.9160262
---
pred: tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 3, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]) 
tar: tensor([1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 7, 6, 5,
        4, 3, 2, 1, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1, 4, 2, 1, 5, 3, 2, 1, 6, 4,
        3, 2, 1, 7, 5, 4, 3, 2, 1, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3, 2, 1,
        8, 7, 6, 5, 4, 3, 2, 3, 2, 4, 3, 1, 5, 4, 2, 1, 6, 5, 3, 2, 1, 7, 6, 4,
        3, 2, 1, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 1, 9, 7, 6, 5, 4, 3,
        2, 8, 7, 6, 5, 4, 3, 4, 3, 2, 5, 4, 3, 1, 6, 5, 4, 2, 1, 7, 6, 5, 3, 2,
        1, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 1, 9, 8, 6, 5, 4, 3, 2, 9,
        7, 6, 5, 4, 3, 8, 7, 6, 5, 4, 5, 4, 3, 2, 6, 5, 4, 3, 1, 7, 6, 5, 4, 2,
        1, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 1, 9, 8, 7, 5, 4, 3, 2, 9,
        8, 6, 5, 4, 3, 9, 7, 6, 5, 4, 8, 7, 6, 5, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3,
        1, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 1, 9, 8, 7, 6, 4, 3, 2, 9,
        8, 7, 5, 4, 3, 9, 8, 6, 5, 4, 9, 7, 6, 5, 8, 7, 6, 7, 6, 5, 4, 3, 2, 8,
        7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 1, 9, 8, 7, 6, 5, 3, 2, 9, 8, 7,
        6, 4, 3, 9, 8, 7, 5, 4, 9, 8, 6, 5, 9, 7, 6, 8, 7, 8, 7, 6, 5, 4, 3, 2,
        9, 8, 7, 6, 5, 4, 3, 1, 9, 8, 7, 6, 5, 4, 2, 9, 8, 7, 6, 5, 3, 9, 8, 7,
        6, 4, 9, 8, 7, 5, 9, 8, 6, 9, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 9, 8, 7, 6,
        5, 4, 3, 9, 8, 7, 6, 5, 4, 9, 8, 7, 6, 5, 9, 8, 7, 6, 9, 8, 7, 9, 8, 9])
Accuracy (count): tensor(43) 
Accuracy (ratio) tensor(0.1054)
Accuracy:
 [[ 0  0  0  0  0  0  0 36  0]
 [ 0  0  0  0  0  0  0 43  0]
 [ 0  0  1  0  0  0  0 47  0]
 [ 0  0  0  0  0  0  0 51  0]
 [ 0  0  1  0  0  0  0 51  0]
 [ 0  0  0  0  0  0  0 51  0]
 [ 0  0  0  0  0  0  0 46  2]
 [ 0  0  0  0  0  0  0 42  1]
 [ 0  0  0  0  0  0  0 36  0]]
Accuracy:
 [[0.    0.    0.    0.    0.    0.    0.    1.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.    1.    0.   ]
 [0.    0.    0.021 0.    0.    0.    0.    0.979 0.   ]
 [0.    0.    0.    0.    0.    0.    0.    1.    0.   ]
 [0.    0.    0.019 0.    0.    0.    0.    0.981 0.   ]
 [0.    0.    0.    0.    0.    0.    0.    1.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.958 0.042]
 [0.    0.    0.    0.    0.    0.    0.    0.977 0.023]
 [0.    0.    0.    0.    0.    0.    0.    1.    0.   ]]
results (all): {'reconst_1x1_avg': 0.0625, 'reconst_1x1_all': nan, 'cross_0x1_avg': 0.109375, 'cross_0x1_all': nan, 'cluster_avg': 0.04666771, 'cluster_all': array([-0.02996677,  0.0755112 , -0.01499212, ...,  0.02456745,
       -0.01625517,  0.01466442], dtype=float32), 'magnitude_avg': 0.8850968983236693, 'magnitude_all': 0.8850968983236693, 'tsne-2d_avg': nan, 'tsne-2d_all': nan, 'mathematics_1+1-1_avg': 0.0, 'mathematics_1+1-1_all': nan, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+9-8_all': nan, 'mathematics_1+8-4_avg': 0.0, 'mathematics_1+8-4_all': nan, 'mathematics_2+7-1_avg': 1.0, 'mathematics_2+7-1_all': nan, 'mathematics_2+7-2_avg': 0.0, 'mathematics_2+7-2_all': nan, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+3-3_all': nan, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+5-2_all': nan, 'mathematics_3+6-3_avg': 0.0, 'mathematics_3+6-3_all': nan, 'mathematics_5+3-5_avg': 0.0, 'mathematics_5+3-5_all': nan, 'mathematics_9+7-8_avg': 1.0, 'mathematics_9+7-8_all': nan, 'mathematics_avg': 0.10539215803146362, 'mathematics_all': nan}
results (only averages): {'id': 'mmvae_cmnist_oscn_seed_4', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 1, 'target_property': 1, 'reconst_1x1_avg': 0.0625, 'cross_0x1_avg': 0.109375, 'cluster_avg': 0.04666771, 'magnitude_avg': 0.8850968983236693, 'tsne-2d_avg': nan, 'mathematics_1+1-1_avg': 0.0, 'mathematics_1+9-8_avg': 0.0, 'mathematics_1+8-4_avg': 0.0, 'mathematics_2+7-1_avg': 1.0, 'mathematics_2+7-2_avg': 0.0, 'mathematics_3+3-3_avg': 0.0, 'mathematics_3+5-2_avg': 0.0, 'mathematics_3+6-3_avg': 0.0, 'mathematics_5+3-5_avg': 0.0, 'mathematics_9+7-8_avg': 1.0, 'mathematics_avg': 0.10539215803146362}


 ==============
 START ANALYSIS
 ==============


===
Data and label info... 
type(label): <class 'list'> 
label: [tensor([6, 3, 2, 9, 1, 6, 7, 9, 7, 9, 4, 2, 7, 1, 7, 7, 5, 8, 8, 2, 2, 8, 1, 6,
        3, 5, 1, 7, 2, 6, 8, 1, 5, 1, 6, 3, 2, 9, 6, 6, 2, 5, 3, 8, 2, 3, 3, 2,
        5, 1, 8, 2, 1, 8, 4, 9, 1, 2, 5, 1, 5, 6, 3, 5, 2, 1, 6, 7, 3, 6, 4, 2,
        7, 3, 1, 3, 6, 2, 1, 1, 9, 7, 4, 7, 3, 2, 9, 2, 8, 3, 5, 7, 7, 9, 5, 6,
        6, 8, 6, 2, 1, 5, 5, 9, 3, 1, 5, 8, 4, 1, 1, 8, 7, 7, 4, 2, 5, 4, 3, 8,
        7, 4, 5, 9, 2, 4, 4, 9]), ['w6s', 'g3j', 'g2t', 'r9j', 'g1s', 'g6t', 'b7j', 'r9t', 'b7t', 'b9t', 'r4s', 'g2s', 'r7s', 'b1s', 'b7j', 'r7j', 'b5s', 'r8j', 'r8j', 'g2s', 'w2s', 'b8t', 'w1j', 'r6j', 'b3t', 'g5t', 'b1s', 'w7t', 'g2t', 'r6t', 'r8j', 'b1t', 'r5j', 'r1j', 'g6t', 'b3j', 'w2j', 'r9t', 'w6t', 'b6j', 'r2j', 'r5j', 'w3j', 'b8j', 'g2t', 'r3j', 'b3s', 'b2t', 'b5j', 'g1t', 'w8j', 'g2j', 'g1s', 'r8j', 'w4j', 'b9j', 'b1t', 'r2t', 'r5j', 'b1t', 'g5j', 'w6t', 'g3s', 'r5j', 'b2j', 'g1s', 'r6j', 'w7j', 'w3j', 'w6j', 'r4s', 'r2j', 'b7t', 'g3j', 'w1t', 'b3t', 'r6t', 'g2s', 'b1j', 'w1s', 'w9j', 'w7j', 'r4s', 'g7s', 'b3j', 'b2s', 'g9j', 'r2s', 'r8s', 'g3t', 'b5t', 'b7t', 'g7t', 'b9s', 'g5t', 'w6s', 'w6j', 'b8s', 'w6s', 'g2j', 'r1s', 'r5j', 'w5s', 'w9j', 'g3t', 'g1s', 'r5s', 'w8j', 'g4j', 'b1t', 'b1t', 'r8s', 'w7j', 'g7t', 'r4s', 'r2s', 'b5t', 'w4j', 'r3s', 'r8s', 'g7t', 'b4t', 'b5j', 'b9s', 'g2t', 'w4s', 'b4t', 'w9j']] 
type(data): <class 'list'> 
data[0].shape: torch.Size([128, 3, 28, 28])

===
Setting info... 
Target modality: 1 
Target property: 2 
Output directory: ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4/analyse/1_2 
Number of category 3 
Shape of latent_all: (2048, 20) 
Shape of label_all:  (2048,) 
Set of label_all:  {0, 1, 2} 
Start index: 0 
End index: 3 
withzero: False
---
Silhouette values: [0.03503122 0.15176553 0.13988648 ... 0.06121404 0.14455761 0.09348354]
Average of silhouette coef: 0.09177324
---

Distance matrix between labels.
  0   1   2
0 0.0 3.1 3.3 
1 3.1 0.0 3.2 
2 3.3 3.2 0.0 

Distance of number label and latent embedding 
Number: [1, 2, 1] 
Latent embbeding: [3.1313822, 3.2999442, 3.1983232] 
Flatten array: [[0.         0.        ]
 [1.         3.13138223]
 [2.         3.29994416]
 [0.         0.        ]
 [1.         3.19832325]
 [0.         0.        ]]
Correlation: [[1.       0.918957]
 [0.918957 1.      ]]
---
[[], [], []] [1 0 2 ... 2 0 2] [[ 30.097935    12.232735  ]
 [  8.3842125    7.846714  ]
 [-21.369984     0.91013354]
 ...
 [-28.889326    -5.887006  ]
 [-18.592741    33.078255  ]
 [ 53.22156     -2.5966964 ]]
saved ./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4/analyse/1_2/latent__1_2.svg
results (all): {'cluster_avg': 0.09177324, 'cluster_all': array([0.03503122, 0.15176553, 0.13988648, ..., 0.06121404, 0.14455761,
       0.09348354], dtype=float32), 'magnitude_avg': 0.9189569965609187, 'magnitude_all': 0.9189569965609187, 'tsne-2d_avg': nan, 'tsne-2d_all': nan}
results (only averages): {'id': 'mmvae_cmnist_oscn_seed_4', 'model_name': 'MMVAE_CMNIST_OSCN', 'target_modality': 1, 'target_property': 2, 'cluster_avg': 0.09177324, 'magnitude_avg': 0.9189569965609187, 'tsne-2d_avg': nan}
Arguments (initial):
{'device': 'cuda',
 'experiment': 'test_loop_1',
 'no_cuda': False,
 'pretrained_path': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'synthesize'}
args are updated using pretrained_path:
 {'experiment': 'test_loop_1', 'model': 'VAE_OSCN', 'run_type': 'train', 'seed': 4, 'num_hidden_layers': 2, 'use_conditional': False, 'use_cnn': False, 'latent_dim': 20, 'obj': 'elbo', 'batch_size': 128, 'epochs': 3, 'K': 20, 'learn_prior': False, 'llik_scaling': 0.0, 'logp': False, 'looser': False, 'print_freq': 100, 'no_analytics': False, 'no_cuda': False, 'run_id': 'test_vae_oscn', 'pretrained_path': '', 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn', 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train'}
Parameters were loaded for classifier
Run ID:
 test_vae_oscn
Run Directory:
 ./rslt/test_loop_1/VAE_OSCN/test_vae_oscn
Arguments (after settings):
{'K': 20,
 'batch_size': 128,
 'epochs': 3,
 'experiment': 'test_loop_1',
 'latent_dim': 20,
 'learn_prior': False,
 'llik_scaling': 0.0,
 'logp': False,
 'looser': False,
 'model': 'VAE_OSCN',
 'no_analytics': False,
 'no_cuda': False,
 'num_hidden_layers': 2,
 'obj': 'elbo',
 'output_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn/train',
 'pretrained_path': '',
 'print_freq': 100,
 'run_dir': './rslt/test_loop_1/VAE_OSCN/test_vae_oscn',
 'run_id': 'test_vae_oscn',
 'run_type': 'train',
 'seed': 4,
 'use_cnn': False,
 'use_conditional': False}
run_ids_dict was automatically constructed.
run_ids_dict for synthesized: {'VAE_CMNIST': ['test_vae_cmnist', 'vae_cmnist_seed_3', 'vae_cmnist_seed_4'], 'VAE_OSCN': ['vae_oscn_seed_4', 'vae_oscn_seed_3', 'test_vae_oscn'], 'MMVAE_CMNIST_OSCN': ['test_mmvae_cmnist_oscn', 'mmvae_cmnist_oscn_seed_3', 'mmvae_cmnist_oscn_seed_4']}
{'VAE_CMNIST': ['test_vae_cmnist', 'vae_cmnist_seed_3', 'vae_cmnist_seed_4'], 'VAE_OSCN': ['vae_oscn_seed_4', 'vae_oscn_seed_3', 'test_vae_oscn'], 'MMVAE_CMNIST_OSCN': ['test_mmvae_cmnist_oscn', 'mmvae_cmnist_oscn_seed_3', 'mmvae_cmnist_oscn_seed_4']}
./rslt/test_loop_1/VAE_CMNIST/test_vae_cmnist/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_3/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/VAE_CMNIST/vae_cmnist_seed_4/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_4/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/VAE_OSCN/vae_oscn_seed_3/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/VAE_OSCN/test_vae_oscn/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/MMVAE_CMNIST_OSCN/test_mmvae_cmnist_oscn/analyse/1_1/analyse_result.csv was loaded.
./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_3/analyse/1_1/analyse_result.csv was loaded.
./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4/analyse/0_1/analyse_result.csv was loaded.
./rslt/test_loop_1/MMVAE_CMNIST_OSCN/mmvae_cmnist_oscn_seed_4/analyse/1_1/analyse_result.csv was loaded.
Before converting:
                           id  ... reconst_1x1_avg
0            test_vae_cmnist  ...             NaN
1          vae_cmnist_seed_3  ...             NaN
2          vae_cmnist_seed_4  ...             NaN
3            vae_oscn_seed_4  ...             NaN
4            vae_oscn_seed_3  ...             NaN
5              test_vae_oscn  ...             NaN
6     test_mmvae_cmnist_oscn  ...             NaN
7     test_mmvae_cmnist_oscn  ...        0.101562
8   mmvae_cmnist_oscn_seed_3  ...             NaN
9   mmvae_cmnist_oscn_seed_3  ...        0.117188
10  mmvae_cmnist_oscn_seed_4  ...             NaN
11  mmvae_cmnist_oscn_seed_4  ...        0.062500

[12 rows x 4 columns]
After converting:
                           id  ... reconst_1x1_avg
0            test_vae_cmnist  ...             NaN
1          vae_cmnist_seed_3  ...             NaN
2          vae_cmnist_seed_4  ...             NaN
3            vae_oscn_seed_4  ...        0.179688
4            vae_oscn_seed_3  ...        0.070312
5              test_vae_oscn  ...        0.062500
6     test_mmvae_cmnist_oscn  ...             NaN
7     test_mmvae_cmnist_oscn  ...        0.101562
8   mmvae_cmnist_oscn_seed_3  ...             NaN
9   mmvae_cmnist_oscn_seed_3  ...        0.117188
10  mmvae_cmnist_oscn_seed_4  ...             NaN
11  mmvae_cmnist_oscn_seed_4  ...        0.062500

[12 rows x 4 columns]
===
analyzed data (all):
                          id         model_name  ...  reconst_1x1_avg  cross_0x1_avg
0            test_vae_cmnist         VAE_CMNIST  ...              NaN            NaN
1          vae_cmnist_seed_3         VAE_CMNIST  ...              NaN            NaN
2          vae_cmnist_seed_4         VAE_CMNIST  ...              NaN            NaN
3            vae_oscn_seed_4           VAE_OSCN  ...         0.179688            NaN
4            vae_oscn_seed_3           VAE_OSCN  ...         0.070312            NaN
5              test_vae_oscn           VAE_OSCN  ...         0.062500            NaN
6     test_mmvae_cmnist_oscn  MMVAE_CMNIST_OSCN  ...              NaN            NaN
7     test_mmvae_cmnist_oscn  MMVAE_CMNIST_OSCN  ...         0.101562       0.101562
8   mmvae_cmnist_oscn_seed_3  MMVAE_CMNIST_OSCN  ...              NaN            NaN
9   mmvae_cmnist_oscn_seed_3  MMVAE_CMNIST_OSCN  ...         0.117188       0.148438
10  mmvae_cmnist_oscn_seed_4  MMVAE_CMNIST_OSCN  ...              NaN            NaN
11  mmvae_cmnist_oscn_seed_4  MMVAE_CMNIST_OSCN  ...         0.062500       0.109375

[12 rows x 22 columns]
===
---
Start ANOVA. 
target_modality: 0 
target_column: magnitude_avg
((model_name in [@mmvae_name]) and (target_modality == @target_modality)) or (model_name in [@vae_name])
                 id         model_name  magnitude_avg
0   test_vae_cmnist         VAE_CMNIST       0.315776
1            seed_3         VAE_CMNIST       0.173624
2            seed_4         VAE_CMNIST       0.285009
6       test_mmoscn  MMVAE_CMNIST_OSCN       0.387215
8            seed_3  MMVAE_CMNIST_OSCN       0.622888
10           seed_4  MMVAE_CMNIST_OSCN       0.417988
model_name       MMVAE_CMNIST_OSCN  VAE_CMNIST
id                                            
seed_3                    0.622888    0.173624
seed_4                    0.417988    0.285009
test_mmoscn               0.387215         NaN
test_vae_cmnist                NaN    0.315776

--- 
F-value: nan 
p-value: nan
                 sum_sq   df         F    PR(>F)
C(model_name)  0.071217  1.0  6.472609  0.063701
Residual       0.044011  4.0       NaN       NaN
---
Start ANOVA. 
target_modality: 0 
target_column: cluster_avg
((model_name in [@mmvae_name]) and (target_modality == @target_modality)) or (model_name in [@vae_name])
                 id         model_name  cluster_avg
0   test_vae_cmnist         VAE_CMNIST     0.038583
1            seed_3         VAE_CMNIST     0.017405
2            seed_4         VAE_CMNIST     0.039995
6       test_mmoscn  MMVAE_CMNIST_OSCN     0.047188
8            seed_3  MMVAE_CMNIST_OSCN     0.088295
10           seed_4  MMVAE_CMNIST_OSCN     0.054301
model_name       MMVAE_CMNIST_OSCN  VAE_CMNIST
id                                            
seed_3                    0.088295    0.017405
seed_4                    0.054301    0.039995
test_mmoscn               0.047188         NaN
test_vae_cmnist                NaN    0.038583

--- 
F-value: nan 
p-value: nan
                 sum_sq   df         F    PR(>F)
C(model_name)  0.001466  1.0  4.562769  0.099527
Residual       0.001286  4.0       NaN       NaN
---
Start ANOVA. 
target_modality: 0 
target_column: mathematics_avg
((model_name in [@mmvae_name]) and (target_modality == @target_modality)) or (model_name in [@vae_name])
                 id         model_name  mathematics_avg
0   test_vae_cmnist         VAE_CMNIST         0.110294
1            seed_3         VAE_CMNIST         0.120098
2            seed_4         VAE_CMNIST         0.102941
6       test_mmoscn  MMVAE_CMNIST_OSCN         0.088235
8            seed_3  MMVAE_CMNIST_OSCN         0.117647
10           seed_4  MMVAE_CMNIST_OSCN         0.115196
model_name       MMVAE_CMNIST_OSCN  VAE_CMNIST
id                                            
seed_3                    0.117647    0.120098
seed_4                    0.115196    0.102941
test_mmoscn               0.088235         NaN
test_vae_cmnist                NaN    0.110294

--- 
F-value: nan 
p-value: nan
                 sum_sq   df         F    PR(>F)
C(model_name)  0.000025  1.0  0.147059  0.720873
Residual       0.000681  4.0       NaN       NaN
---
Start ANOVA. 
target_modality: 0 
target_column: reconst_0x0_avg
((model_name in [@mmvae_name]) and (target_modality == @target_modality)) or (model_name in [@vae_name])
                 id         model_name  reconst_0x0_avg
0   test_vae_cmnist         VAE_CMNIST         0.093750
1            seed_3         VAE_CMNIST         0.093750
2            seed_4         VAE_CMNIST         0.070312
6       test_mmoscn  MMVAE_CMNIST_OSCN         0.109375
8            seed_3  MMVAE_CMNIST_OSCN         0.093750
10           seed_4  MMVAE_CMNIST_OSCN         0.140625
model_name       MMVAE_CMNIST_OSCN  VAE_CMNIST
id                                            
seed_3                    0.093750    0.093750
seed_4                    0.140625    0.070312
test_mmoscn               0.109375         NaN
test_vae_cmnist                NaN    0.093750

--- 
F-value: nan 
p-value: nan
                 sum_sq   df        F    PR(>F)
C(model_name)  0.001231  1.0  3.27027  0.144818
Residual       0.001506  4.0      NaN       NaN
===
scatter bettween cluster and magnitude
===
pairplot
===
analyzed data (all):
                          id         model_name  ...  reconst_1x1_avg  cross_0x1_avg
0            test_vae_cmnist         VAE_CMNIST  ...              NaN            NaN
1          vae_cmnist_seed_3         VAE_CMNIST  ...              NaN            NaN
2          vae_cmnist_seed_4         VAE_CMNIST  ...              NaN            NaN
3            vae_oscn_seed_4           VAE_OSCN  ...         0.179688            NaN
4            vae_oscn_seed_3           VAE_OSCN  ...         0.070312            NaN
5              test_vae_oscn           VAE_OSCN  ...         0.062500            NaN
6     test_mmvae_cmnist_oscn  MMVAE_CMNIST_OSCN  ...              NaN            NaN
7     test_mmvae_cmnist_oscn  MMVAE_CMNIST_OSCN  ...         0.101562       0.101562
8   mmvae_cmnist_oscn_seed_3  MMVAE_CMNIST_OSCN  ...              NaN            NaN
9   mmvae_cmnist_oscn_seed_3  MMVAE_CMNIST_OSCN  ...         0.117188       0.148438
10  mmvae_cmnist_oscn_seed_4  MMVAE_CMNIST_OSCN  ...              NaN            NaN
11  mmvae_cmnist_oscn_seed_4  MMVAE_CMNIST_OSCN  ...         0.062500       0.109375

[12 rows x 22 columns]
===
---
Start ANOVA. 
target_modality: 1 
target_column: magnitude_avg
((model_name in [@mmvae_name]) and (target_modality == @target_modality)) or (model_name in [@vae_name])
               id         model_name  magnitude_avg
3          seed_4           VAE_OSCN       0.905619
4          seed_3           VAE_OSCN       0.955080
5   test_vae_oscn           VAE_OSCN       0.893638
7     test_mmoscn  MMVAE_CMNIST_OSCN       0.889029
9          seed_3  MMVAE_CMNIST_OSCN       0.957866
11         seed_4  MMVAE_CMNIST_OSCN       0.885097
model_name     MMVAE_CMNIST_OSCN  VAE_OSCN
id                                        
seed_3                  0.957866  0.955080
seed_4                  0.885097  0.905619
test_mmoscn             0.889029       NaN
test_vae_oscn                NaN  0.893638

--- 
F-value: nan 
p-value: nan
                 sum_sq   df         F    PR(>F)
C(model_name)  0.000083  1.0  0.060838  0.817318
Residual       0.005471  4.0       NaN       NaN
---
Start ANOVA. 
target_modality: 1 
target_column: cluster_avg
((model_name in [@mmvae_name]) and (target_modality == @target_modality)) or (model_name in [@vae_name])
               id         model_name  cluster_avg
3          seed_4           VAE_OSCN    -0.097435
4          seed_3           VAE_OSCN    -0.082908
5   test_vae_oscn           VAE_OSCN    -0.103293
7     test_mmoscn  MMVAE_CMNIST_OSCN     0.043830
9          seed_3  MMVAE_CMNIST_OSCN    -0.284780
11         seed_4  MMVAE_CMNIST_OSCN     0.046668
model_name     MMVAE_CMNIST_OSCN  VAE_OSCN
id                                        
seed_3                 -0.284780 -0.082908
seed_4                  0.046668 -0.097435
test_mmoscn             0.043830       NaN
test_vae_oscn                NaN -0.103293

--- 
F-value: nan 
p-value: nan
                 sum_sq   df         F    PR(>F)
C(model_name)  0.001331  1.0  0.073077  0.800282
Residual       0.072837  4.0       NaN       NaN
---
Start ANOVA. 
target_modality: 1 
target_column: mathematics_avg
((model_name in [@mmvae_name]) and (target_modality == @target_modality)) or (model_name in [@vae_name])
               id         model_name  mathematics_avg
3          seed_4           VAE_OSCN         0.088235
4          seed_3           VAE_OSCN         0.129902
5   test_vae_oscn           VAE_OSCN         0.110294
7     test_mmoscn  MMVAE_CMNIST_OSCN         0.117647
9          seed_3  MMVAE_CMNIST_OSCN         0.178922
11         seed_4  MMVAE_CMNIST_OSCN         0.105392
model_name     MMVAE_CMNIST_OSCN  VAE_OSCN
id                                        
seed_3                  0.178922  0.129902
seed_4                  0.105392  0.088235
test_mmoscn             0.117647       NaN
test_vae_oscn                NaN  0.110294

--- 
F-value: nan 
p-value: nan
                 sum_sq   df         F    PR(>F)
C(model_name)  0.000901  1.0  0.907258  0.394781
Residual       0.003973  4.0       NaN       NaN
---
Start ANOVA. 
target_modality: 1 
target_column: reconst_1x1_avg
((model_name in [@mmvae_name]) and (target_modality == @target_modality)) or (model_name in [@vae_name])
               id         model_name  reconst_1x1_avg
3          seed_4           VAE_OSCN         0.179688
4          seed_3           VAE_OSCN         0.070312
5   test_vae_oscn           VAE_OSCN         0.062500
7     test_mmoscn  MMVAE_CMNIST_OSCN         0.101562
9          seed_3  MMVAE_CMNIST_OSCN         0.117188
11         seed_4  MMVAE_CMNIST_OSCN         0.062500
model_name     MMVAE_CMNIST_OSCN  VAE_OSCN
id                                        
seed_3                  0.117188  0.070312
seed_4                  0.062500  0.179688
test_mmoscn             0.101562       NaN
test_vae_oscn                NaN  0.062500

--- 
F-value: nan 
p-value: nan
                 sum_sq   df      F    PR(>F)
C(model_name)  0.000163  1.0  0.064  0.812751
Residual       0.010173  4.0    NaN       NaN
===
scatter bettween cluster and magnitude
===
pairplot
